<?php

include_once drupal_get_path('module', 'sharepoint') . '/nusoap/nusoap.php';

/**
 * @file
 * Main Module file with hooks and various helpers.
 */


/**
 * Implementation of hook_permission().
 */
function sharepoint_permission() {
  $perms = array(
    'access sharepoint content' => array(
      'title' => t('Access sharepoint content'),
    ),
    'administer sharepoint endpoints' => array(
      'title' => t('Administer sharepoint endpoints'),
    ),
  );

  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function sharepoint_menu() {
  $items = array();

  // @TODO: reconsider SP-proxy path.
  $items['system/sp-proxy'] = array(
    'title' => 'Sharepoint file download',
    'page callback' => 'file_download',
    'page arguments' => array('sharepointProxy'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/structure/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint endpoint configuration.'),
    'page callback' => 'sharepoint_admin_endpoints',
    'access arguments' => array('administer sharepoint endpoints'),
    'file' => 'sharepoint.admin.inc',
  );

  $items['admin/structure/sharepoint/list'] = array(
    'title' => t('List'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/structure/sharepoint/endpoint/add'] = array(
    'title' => t('Add SharePoint EndPoint'),
    'description' => t('Add SharePoint endpoint.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_admin_endpoint_form'),
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('administer sharepoint endpoints'),
    'file' => 'sharepoint.admin.inc',
  );
  
  $items['admin/structure/sharepoint/endpoint/%sharepoint_endpoint/edit'] = array(
    'title' => t('Edit SharePoint Endpoint'),
    'description' => t('Edit a SharePoint endpoint.'),
    'page callback' => 'sharepoint_admin_endpoint',
    'page arguments' => array(4),
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('administer sharepoint endpoints'),
    'file' => 'sharepoint.admin.inc',
  );

  $items['admin/structure/sharepoint/endpoint/%sharepoint_endpoint/delete'] = array(
    'title' => t('Delete SharePoint Endpoint'),
    'description' => t('Delete a SharePoint endpoint.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sharepoint_admin_endpoint_delete_confirm', 4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer sharepoint endpoints'),
    'file' => 'sharepoint.admin.inc',
  );

  $items['admin/structure/sharepoint/sharepoint'] = array(
    'title' => t('SharePoint'),
    'description' => t('SharePoint integration settings.'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  return $items;
}

function sharepoint_endpoint_load($endpoint) {
  $endpoints = sharepoint_get_endpoints();
  if (!isset($endpoints[$endpoint])) {
    return FALSE;
  }
  return $endpoints[$endpoint];
}

/**
 * Save a sharepoint endpoint
 * @param array $endpoint an array containing the following:
 *   name the machine name of the endpoint.
 *   server_username username.
 *   server_password password.
 *   server_url the url of the server.
 *   server_authtype the authentication type.
 * @return TRUE or FALSE depending on whehter or not the endpoint was saved.
 */
function sharepoint_endpoint_save($endpoint) {
  $endpoints = sharepoint_get_endpoints();
  $endpoints[$endpoint['name']] = $endpoint;
  variable_set('sharepoint_endpoints', $endpoints);
  return TRUE;
}

/**
 * Delete a SharePoint Endpoint.
 * @param string $name the name of the sharepoint endpoint.
 */
function sharepoint_endpoint_delete($name) {
  $endpoints = sharepoint_get_endpoints();
  unset($endpoints[$name]);
  variable_set('sharepoint_endpoints', $endpoints);
}
/**
 * API function to check that sharepoint is configured.
 */
function sharepoint_is_configured() {
  return variable_get('sharepoint_server_url', FALSE) && variable_get('sharepoint_server_username', FALSE) && variable_get('sharepoint_server_password', FALSE);
}

/**
 * Check that the SOAP Library is there.
 */
function sharepoint_has_library() {
  // Just check if the nusoap php file exists. In the future, we will have
  // support for having the nusoap library in other places through the libraries
  // module.
  return (file_exists(drupal_get_path('module', 'sharepoint') . '/nusoap/nusoap.php'));
}

/**
 * Implementation of hook_feeds_plugins().
 */
function sharepoint_feeds_plugins() {
  $info = array();
  $path = drupal_get_path('module', 'sharepoint') . '/feeds';
  $info['sharepoint_view_parser'] = array(
    'name' => 'SharePoint View Parser',
    'description' => 'Parses Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsParser',
      'class' => 'SharePointViewParser',
      'file' => 'SharePointViewParser.inc',
      'path' => $path,
    ),
  );
  $info['sharepoint_view_fetcher'] = array(
    'name' => 'SharePoint View Fetcher',
    'description' => 'Fetches Sharepoint Views.',
    'handler' => array(
      'parent' => 'FeedsFetcher', // A plugin needs to derive either directly or indirectly from FeedsFetcher, FeedsParser or FeedsProcessor.
      'class' => 'SharePointViewFetcher',
      'file' => 'SharePointViewFetcher.inc',
      'path' => $path,
    ),
  );
  return $info;
}


/**
* Implementation of hook_search_info().
*/
function sharepoint_search_info() {
  return array(
    'title' => 'Sharepoint Content', 
    'path' => 'sharepoint', 
  );
}

/**
 * Implements of hook_search().
 * @param string $keys
 * @param string $conditions
 * @return the search result.
 */
function sharepoint_search_execute($keys,$conditions){
  module_load_include('inc', 'sharepoint');
  $client = sharepoint_get_client('search');
  return(sharepoint_get_spsearch_result($client,$keys));
}

/**
 * Implementation of hook_views_api().
 */
function sharepoint_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'sharepoint') . '/views',
  );
}

function _sharepoint_throw_connection_error($message) {
  throw new SharePointConnectionException(t('Could not connect to SharePoint Server:') . $message);
}
function _sharepoint_throw_soap_error($fault) {
  //throw new SharePointSoapException(t('An error occured while contacting Sharepoint:') . $fault);
}

/**
 * Utility function to load necessary includes.
 */
function sharepoint_load_includes() {
  module_load_include('inc', 'sharepoint');
}

/**
 * Retrieve all configured sharepoint endpoints.
 */
function sharepoint_get_endpoints() {
  return variable_get('sharepoint_endpoints', array());
}

/**
 * Get form elements for selecting endpoint, list and view.
 */
function _sharepoint_list_form_elements($client, $default_list = '', $default_view = '') {
  try {
    $lists = sharepoint_get_splist_collection($client);
    foreach ($lists as $id => $list) {
      // We need to use the Human Readable Name here, because we can't get
      // the list information otherwise.
      $options[$list['!Title']] = $list['!Title'];
    }
  }
  catch(SharePointException $error) {
    drupal_set_message(t('The connection to the SharePoint server could not be established!'), 'error');
  }

  $form['list'] = array(
    '#type' => 'select',
    '#title' => t('List Name'),
    '#default_value' => $default_list,
    '#options' => $options,
    '#required' => TRUE,
    '#description' => t('The name of the List you want to publish on your site'),
  );

  $form['view'] = array(
    '#type' => 'textfield',
    '#title' => t('View'),
    '#default_value' => $default_view,
    '#size' => 30,
    '#maxlength' => 30,
    '#description' => t('The name of the view to use'),
  );
  return $form;
}

function _sharepoint_feeds_config_form($feeds_plugin) {
  module_load_include('inc', 'sharepoint');
  $endpoints = sharepoint_get_endpoints();
  if (!count($endpoints)) {
    drupal_set_message(t('You have not configured any sharepoint endpoints.
      You need to have at least one.'));
    return;
  }
  $endpoint_options = array();
  foreach ($endpoints as $endpoint) {
    $endpoint_options[$endpoint['name']] = $endpoint['name'];
  }
  if (empty($feeds_plugin->config['endpoint'])) {
    $endpoint = $endpoints[current($endpoint_options)];
  }
  else {
    $endpoint = $endpoints[$feeds_plugin->config['endpoint']];
  }
  $form['endpoint'] = array(
    '#type' => 'select',
    '#title' => t('Endpoint'),
    '#options' => $endpoint_options,
    '#default_value' => $feeds_plugin->config['endpoint'],
  );

  try {
    $client = sharepoint_get_client($endpoint, 'lists');
  } catch(SharePointException $e) {
    drupal_set_message('Could not connect to the sharepoint server.');
  }
  $form += _sharepoint_list_form_elements($client, $feeds_plugin->config['list'], $feeds_plugin->config['view']);
  return $form;
}


