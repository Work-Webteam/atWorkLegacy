<?php

function _atwork_activity_node_types() {
  return array(
    'blog',
    'event',
    'forum',
    'wiki',
    'article',
    'status',
    'section',
    'section_page',
    'gallery',
    'image',
    'question',
    'answer',
    'poll',
//    'task',
  );
}

/**
 * Implements hook_menu();
 */
function atwork_activity_menu() {
  // a user page that displays their activity
  // built for the prototype but currently on hold
//  $items['user/%user/activity'] = array(
//    'title' => 'News Feed',
//    'description' => 'View your activity.',
//    'type' => MENU_LOCAL_TASK,
//    'page callback' => 'atwork_activity_page',
//    'page arguments' => array(1),
//    'access callback' => 'atwork_activity_page_access',
//    'access arguments' => array(1),
//  );

  // these callbacks are all done through ajax
  // this one has an access callback which was handy when it was a menu tab
  $items['atwork-activity/group/%node'] = array(
    'title' => 'Group Activity',
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_activity_group_callback',
    'page arguments' => array(2),
    'access callback' => 'atwork_activity_group_access',
    'access arguments' => array(2),
  );

  $items['atwork-activity/all-activity'] = array(
    'title' => 'All Activity',
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_activity_home_all_callback',
    'access arguments' => array('access content'),
    'page arguements' =>array(1),

  );

  $items['atwork-activity/comment-activity'] = array(
    'title' => 'Comment Activity',
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_activity_home_comment_callback',
    'access arguments' => array('access content'),
    'page arguements' =>array(1),
  );

  $items['atwork-activity/group-activity'] = array(
    'title' => 'Group Activity',
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_activity_home_group_callback',
    'access arguments' => array('access content'),
    'page arguements' =>array(1),
  );

  $items['atwork-activity/my-activity'] = array(
    'title' => 'My Activity',
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_activity_home_my_callback',
    'access arguments' => array('access content'),
    'page arguements' =>array(1),
  );

  return $items;
}


function atwork_activity_group_access($node) {
  if ($node->type == 'section' && user_access('access content')) {
    return TRUE;
  }
  return FALSE;
}


/*
 * A form added to the top of the user's activity feed.
 *
 * The menu item that calls this is commented out because we are waiting to release this (no profiles now)
 */
function atwork_activity_form() {
  $form = array();
  $form['status'] = array(
    '#type' => 'textarea',
    '#rows' => 3,
    '#maxlength' => 1000,
    '#maxlength_js' => TRUE,
    '#attributes' => array(
      'placeholder' => t('What are you working on?'),
    ),
  );
  $form['post'] = array(
    '#type' => 'submit',
    '#value' => t('Post'),
  );

  return $form;
}

/*
 * create a ststus content type for display in activity feeds
 */
function atwork_activity_form_submit(&$form, &$form_state) {

  if (!isset($form_state['values']['status']) || !$form_state['values']['status']) {
    return;
  }

  global $user;
  $node = new stdClass();

  $node->type = 'status';

  node_object_prepare($node);
  $node->language = LANGUAGE_NONE;
  $node->uid = $user->uid;
  $node->status = 1;
  $node->promote = 0;
  $node->comment = 2;

  $node->body[$node->language][0]['value']   = $form_state['values']['status'];
  $node->body[$node->language][0]['format']  = 'filtered_no_editor';

  $node = node_submit($node);
  node_save($node);
}

/*
 * Helper function used to display ajax-called activity feeds
 */
function _atwork_activity_ajax_header() {
  header("Content-type: text/html");
  header("Expires: Wed, 29 Jan 1975 04:15:00 GMT");
  header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
  header("Cache-Control: no-cache, must-revalidate");
  header("Pragma: no-cache");
}

/*
 * Should be a theme function?
 *
 * render a query result of messages
 */
function _atwork_activity_render_messages($result, $activityType) {
  $output = '<div class="atwork-activity">';
  $i = 1;
  $msgCount = 0;

  if($result != 'error'){
    foreach ($result as $record) {
      $message = message_load($record->mid);

      $classes = array();
      $classes[] = 'message';
      $classes[] = 'message-' . $message->mid;

      if ($i % 2 == 0) {
        $classes[] = 'even';
      }
      else {
        $classes[] = 'odd';
      }

      $msgCount++;

      $render = 1;

      if($message->type == 'new_image'){

        $q = db_select('field_data_field_message_node', 'fmn')
          ->where('fmn.entity_id = '. $message->mid);

        $q->leftJoin('field_data_field_gallery', 'i', 'i.entity_id = fmn.field_message_node_target_id');
        $q->leftJoin('field_data_field_gallery_status', 's', 's.entity_id = i.field_gallery_target_id');

        $q
          ->fields('fmn', array('bundle'))
          ->condition('s.field_gallery_status_value', '1');

        $re = $q
          ->extend('PagerDefault')
          ->limit(1)
          ->execute()
          ->fetchAll();

        if(!count($re))
          $render = 0;
      }


      $tmpMsg = str_replace("background","webpage", $message->getText());

      if($msgCount > 0){

        // Lets fix all badly formed html.
        /*$stripHtml = new DOMDocument();
        $stripHtml->loadHTML($tmpMsg);
        $tmpMsg = $stripHtml->saveHTML();
        // Get rid of that weird symbol that the XML is leaving
         $tmpMsg = html_entity_decode($tmpMsg,ENT_QUOTES,"UTF-8");
         $tmpMsg = str_replace("Ã‚","", $tmpMsg);
         */
        $tmpMsg = str_replace(array("<u>","</u>","<i>","</i>","<b>","</b>","<strong>","</strong>", "<em>", "</em>"),"", $tmpMsg);
      }
      $author = user_load($message->uid);
      // We want to add images to the activity feed.
      // Check if an image exists:
      if(isset($author->field_image) && $author->field_image){
        // If it does, then grab a renderable view of it
        $user_image = field_view_field('user', $author, 'field_image', array('settings' => array('label' => 'hidden', 'image_style' => 'icon_image')));
      } else {
        // Default image isn't always repopulated into $author->field_image after an ajax reload - so if it is missng and they have not saved a personal image, then lets reset the default image
        $profile_image_field = field_info_instance('user', 'field_image', 'user');
        $default_fid = $profile_image_field['settings']['default_image'];
        $author->field_image[] = file_load($default_fid);
        $user_image = field_view_field('user', $author, 'field_image', array('settings' => array('label' => 'hidden', 'image_style' => 'icon_image')));
      }

      if($render)
        $output .= '<div class="' . implode(' ', $classes) . '"><span class="date">' . date('M j', $message->timestamp) . '</span> <span class="user-feed-image">' . render($user_image) . '</span>' . $tmpMsg . '</div>';

      $i++;
    }
  }

  if($msgCount == 0){
    if($activityType == 1)
      $output .= 'No activity to report at this time.<br><br>When you take part on @Work by doing things like contributing to <a href="groups/">groups</a> or posting comments on news articles, that activity will be listed here.';
    else if($activityType == 2)
      $output .= 'No activity to report at this time.<br><br>When you join @Work <a href="groups/">groups</a>, you\'ll be able to follow the activity what\'s happening in those groups here.';
    else
      $output .= 'No results found.';
  }

  $output .= '</div>' . theme('pager');

  return $output;
}

/*
 * Menu callback for an ajax-called activity feed on a group homepage
 */
function atwork_activity_group_callback($node) {
  $og_context = og_context('node', $node);
  $activityType = 2;

  if(!isset($og_context['group_type']) || $og_context['group_type'] != 'node' || !isset($og_context['gid']))
    die();

  _atwork_activity_ajax_header();

  global $user;

  $or = db_or()
    ->condition('og.gid', $og_context['gid'])
    ->condition('og_image.gid', $og_context['gid'])
    ->condition('og_answer.gid', $og_context['gid'])
    ->condition('n.field_message_node_target_id', $og_context['gid']);

  $query = db_select('message', 'm')->distinct();

  $query->fields('m', array('mid'))
    ->leftJoin('field_data_field_message_node', 'n', 'm.mid = n.entity_id');

  $query->leftJoin('og_membership', 'og', "(og.etid = n.field_message_node_target_id AND og.entity_type = 'node')");

  $query->leftJoin('field_data_field_gallery', 'i', 'i.entity_id = n.field_message_node_target_id');

  $query->leftJoin('og_membership', 'og_image', "(og_image.etid = i.field_gallery_target_id AND og_image.entity_type = 'node')");

  $query->leftJoin('field_data_field_answer_question', 'a', 'a.entity_id = n.field_message_node_target_id');

  $query->leftJoin('og_membership', 'og_answer', "(og_answer.etid = a.field_answer_question_target_id AND og_answer.entity_type = 'node')");

  $query->orderBy('m.timestamp', 'DESC')
    ->condition($or)
    ->condition('m.type', array('new_comment', 'new_node', 'node_updated', 'new_answer', 'new_image', 'group_subscribe'), 'IN');

  $result = $query
    ->extend('PagerDefault')
    ->limit(10)
    ->execute()
    ->fetchAll();

  //dpm($result);
  $output = _atwork_activity_render_messages($result, $activityType);

  die($output);
}

/*
 * Menu callback for an ajax-called activity feed on the homepage
 */
function atwork_activity_home_group_callback($all_args) {
  $activityType = 2;

  global $user;

  if(isset($all_args) && $all_args === 'tab_2') {
    $myOgA = NULL;
    $myOgArr = og_get_groups_by_user($user);

    if($myOgArr != NULL){
      foreach($myOgArr['node'] as $key => $value){
        $myOgA[] = $value;
      }
    }
    _atwork_activity_ajax_header();

    $query = db_select('message', 'm');

    $query->fields('m', array('mid'));

    $query->leftJoin('field_data_field_message_node', 'fmn', 'fmn.entity_id = m.mid');
    $query->leftJoin('node', 'n', 'n.nid = fmn.field_message_node_target_id');

    $query->leftJoin('og_membership', 'og', "(og.etid = fmn.field_message_node_target_id AND og.entity_type = 'node')");
    $query->leftJoin('og_membership', 'og', 'm.uid = og.etid');
    $query->leftJoin('field_data_field_gallery', 'i', 'i.entity_id = fmn.field_message_node_target_id');
    $query->leftJoin('og_membership', 'og_image', "(og_image.etid = i.field_gallery_target_id AND og_image.entity_type = 'node')");
    $query->leftJoin('field_data_field_answer_question', 'a', 'a.entity_id = fmn.field_message_node_target_id');
    $query->leftJoin('og_membership', 'og_answer', "(og_answer.etid = a.field_answer_question_target_id AND og_answer.entity_type = 'node')");

    $query->orderBy('m.timestamp', 'DESC')
      ->condition('m.type', array('new_comment', 'new_node', 'node_updated', 'new_answer', 'new_image', 'group_subscribe'), 'IN')
      ->condition('n.status', '1')
      ->condition('og.gid', $myOgA)
      ->range(0, 100);

    $result = $query
      ->extend('PagerDefault')
      ->limit(8)
      ->execute()
      ->fetchAll();

    if($myOgA != NULL){
      $output = _atwork_activity_render_messages($result, $activityType);
    }
    else{
      $output = _atwork_activity_render_messages('error', $activityType);
    }
    die($output);
  }

}

/*
 * Menu callback for an ajax-called activity feed on the homepage
 */
function atwork_activity_home_all_callback($all_args) {
  if(isset($all_args) && $all_args === 'tab_1') {
    _atwork_activity_ajax_header();
    $activityType = 0;

    $query = db_select('message', 'm');

    $query->leftJoin('field_data_field_message_node', 'fmn', 'fmn.entity_id = m.mid');
    $query->leftJoin('field_data_field_gallery', 'i', 'i.entity_id = fmn.field_message_node_target_id');
    $query->leftJoin('field_data_field_gallery_status', 's', 's.entity_id = i.field_gallery_target_id');
    $query->leftJoin('node', 'n', 'n.nid = fmn.field_message_node_target_id');

    $db_or = db_or();
    $db_and = db_and();
    $query
      ->fields('m', array('mid'));
      $db_and->condition('m.type', array('new_comment', 'new_node', /*'node_updated',*/ 'new_answer', 'new_image'), 'IN');
      $db_and->condition('n.status', '1');
      $db_and->condition('n.uid', array('0, 10'), 'NOT IN');
      // Only want published, non-private galleries to be selected
      $db_or->condition('s.field_gallery_status_value', '1');
      $db_or->condition('s.field_gallery_status_value', NULL);
      //$db_or->condition('s.field_gallery_status_value', 'none', IFNULL) ;
      $db_and->condition($db_or);
      $query->condition($db_and);
      $query->orderBy('m.timestamp', 'DESC')
      ->range(0, 100);
    $result = $query
      ->extend('PagerDefault')
      ->limit(8)
      ->execute()
      ->fetchAll();
    $output = _atwork_activity_render_messages($result, $activityType);

    die($output);
  }
}

/*
 * Menu callback for an ajax-called activity feed on the homepage
 */
function atwork_activity_home_comment_callback($all_args) {
  if(isset($all_args) && $all_args === 'tab_4') {
    _atwork_activity_ajax_header();
    $activityType = 0;

    $query = db_select('message', 'm');

    $query->leftJoin('field_data_field_message_node', 'fmn', 'fmn.entity_id = m.mid');
    $query->leftJoin('node', 'n', 'n.nid = fmn.field_message_node_target_id');

    $query
      ->fields('m', array('mid'))
      ->condition('m.type', array('new_comment'), 'IN')
      ->condition('n.status', '1')
      ->orderBy('m.timestamp', 'DESC')
      ->range(0, 100);

    $result = $query
      ->extend('PagerDefault')
      ->limit(6)
      ->execute()
      ->fetchAll();

    $output = _atwork_activity_render_messages($result, $activityType);

    die($output);
  }
}

/*
 * Menu callback for an ajax-called activity feed on the homepage
 */
function atwork_activity_home_my_callback($all_args) {
  if(isset($all_args) && $all_args === 'tab_3') {
    _atwork_activity_ajax_header();
    $activityType = 1;

    global $user;

    $query = db_select('message', 'm');

    $query->leftJoin('field_data_field_message_node', 'fmn', 'fmn.entity_id = m.mid');
    $query->leftJoin('node', 'n', 'n.nid = fmn.field_message_node_target_id');

    $query
      ->fields('m', array('mid'))
      ->condition('m.type', array('user_liked_node', 'user_liked_comment'), 'NOT IN')
      ->condition('n.status', '1')
      ->condition('m.uid', $user->uid)
      ->orderBy('m.timestamp', 'DESC')
      ->range(0, 100);

    $result = $query
      ->extend('PagerDefault')
      ->limit(8)
      ->execute()
      ->fetchAll();

    $output = _atwork_activity_render_messages($result, $activityType);
    die($output);
  }
}

/*
 * A user page of an activity feed. Includes the "what's going on?" form
 *
 * Currently the mnu item is disabled (no profiles!)
 *
 */
function atwork_activity_page($user) {
  // js
  //drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity.js');

  // build query
  $following_subquery = db_select('user_relationships', 'ur')
    ->fields('ur', array('requestee_id'))
    ->where('ur.requester_id = :current_user', array(':current_user' => $user->uid))
    ->where('ur.rtid = 1')
    ->where('ur.approved = 1');

  $og_subquery = db_select('node', 'node')
    ->fields('node', array('nid'));

  $og_subquery->leftJoin('og_membership', 'og_nodes', "node.nid = og_nodes.etid AND og_nodes.entity_type = 'node' AND og_nodes.group_type = 'node' AND og_nodes.state = 1");
  $og_subquery->leftJoin('og_membership', 'og_user', "og_nodes.gid = og_user.gid AND og_user.entity_type = 'user' AND og_user.group_type = 'node' AND og_user.state = 1 AND og_user.etid = :current_user", array(':current_user' => $user->uid));

  $og_subquery->where('og_user.etid = :current_user', array(':current_user' => $user->uid))
    ->where('node.status = 1');

  $or = db_or()
    ->condition('m.uid', $user->uid)
    ->condition('m.uid', $following_subquery, 'IN')
    ->condition('message_node.field_message_node_target_id', $og_subquery, 'IN');

  //dpm($or->__toString);

  $query = db_select('message', 'm')
    ->fields('m', array('mid'));

  $query->leftJoin('field_data_field_message_node', 'message_node', 'm.mid = message_node.entity_id');

  $query->condition($or)
    ->orderBy('m.timestamp', 'DESC')
    ->range(0, 100);

  $result = $query
    ->extend('PagerDefault')
    ->limit(20)
    ->execute()
    ->fetchAll();

  $form = drupal_get_form('atwork_activity_form');

  $output = render($form);

  $i = 1;
  foreach ($result as $record) {
    $message = message_load($record->mid);

    $classes = array();
    $classes[] = 'message';
    $classes[] = 'message-' . $message->mid;

    if ($i % 2 == 0) {
      $classes[] = 'even';
    }
    else {
      $classes[] = 'odd';
    }

    $tmpMsg = str_replace("background","webpage", $message->getText());
    // Lets fix all badly formed html.
    $stripHtml = new DOMDocument();
    $stripHtml->loadHTML($tmpMsg);
    $tmpMsg = $stripHtml->saveHTML();
    // Get rid of that weird symbol that the XML is leaving
    $tmpMsg = html_entity_decode($tmpMsg,ENT_QUOTES,"UTF-8");
    $tmpMsg = str_replace("Ã‚","", $tmpMsg);

    $output .= '<div class="' . implode(' ', $classes) . '">' . $tmpMsg . '</div>';

    $i++;
  }

  $build = array();
  $build['activity_feed'] = array(
    '#weight' => 0,
    '#markup' => '<div id="activity-feed">' . $output . '</div>',
  );

  $build['activity_pager'] = array(
    '#weight' => 100,
    '#markup' => theme('pager'),
  );

  return $build;
}

/*
 * Using an access callback to only show activity feeds of the logged in user
 */
function atwork_activity_page_access($account) {
  global $user;

  if ($user->uid == $account->uid) {
    return TRUE;
  }

  return FALSE;
}

/**
* Find existing messages that match certain parameters.
 *
 * Copied from Commons and used in various hooks to delete mssages
 *
*/
function atwork_activity_existing_messages($acting_uid, $target_ids, $target_field, $message_type) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'message', '=')
   ->propertyCondition('uid', $acting_uid)
   ->propertyCondition('type', $message_type, '=')
   ->fieldCondition($target_field, 'target_id', $target_ids, 'IN')
   ->execute();

  if (!empty($query->ordered_results)) {
    $mids = array();
    foreach($query->ordered_results as $result) {
      $mids[] = $result->entity_id;
    }
    return $mids;
  }
  return FALSE;
}

/**
 * Implements hook_form_FORM_ID_alter();
 *
 * Create a message when a user joins a group
 *
 */
function atwork_activity_form_og_ui_confirm_subscribe_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_atwork_activity_group_subscribe';
}

/**
 * Implements hook_form_FORM_ID_alter();
 *
 * Create a message when a user leaves a group
 *
 */
function atwork_activity_form_og_ui_confirm_unsubscribe_alter(&$form, &$form_state, $form_id) {
  $form['#submit'][] = '_atwork_activity_group_unsubscribe';
}

/**
 * Implements hook_form_alter
 * Need to include displayname and date in comments to make them similar to other site comment strings
 */
function atwork_activity_form_alter(&$form, &$form_state, $form_id){

  if(isset($form['bundle']) && $form['bundle']['#value'] == "entity_comments"){
    // hide these fields on all forms
    $form['field_display_name']['#access'] = FALSE;
    $form['field_profile_comment_date']['#access'] = FALSE;
    // These can be updated regardless if there are available
    $author = user_load($form_state['reply']->uid);
    // Add image render as a #prefix to name?
    $form['field_display_name']['und'][0]['value']['#default_value'] =  $author->field_display_name['und'][0]['safe_value'];
    // TODO: Set prefix and suffix for display name in form (image render and <a> tags)
    $form['field_profile_comment_date']['und']['#prefix'] = "Posted: " . $form['field_profile_comment_date']['und']['#prefix'];
    // Leave out Reply/Edit and Delete versions of the form -- so far this field seems to be the only one that differentiates them
    $url_test = explode('/', $form['#action']);
    if($url_test[1] == "reply"){
      return;
    }
   // hide this submit button when we use our own.
   $form['actions']['submit']['#access'] = FALSE;
    // Create our own submit button for the profile page to send users to our handler
    $form['button'] = array(
      '#type' => 'button', // We lose ajax if we make this a true Submit - we will manually save the entity in our callback
      '#value' => 'Post Comment', // To differentiate it from the normal submit button - this will be hidden by CSS.
      '#prefix' => '<div id="comment-submit-button">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => 'atwork_activity_reply_form_submit_custom',
        'wrapper' => 'comment-submit-button',
        'event' => 'click',
      ),
      '#weight' => 99, // Want this at the bottom, just ahead of the footer.
    );
  }
}

/**
 * Submit handler for entity replies on the profile activity feed page
 */

function atwork_activity_reply_form_submit_custom($form, &$form_state) {
  //dpm($form);
  // Save this entity manually, and then we will refresh with Block Refresh (via JQuery)
  $reply = (object) $form_state['reply'];
  entity_form_submit_build_entity('reply', $reply, $form, $form_state);
  entity_save('reply', $reply);
  $bundle = reply_bundle_load($reply->bundle);

  return($form);
}


/**
 * Implements hook_entity_view_alter
 * Used to add in links/images and prefix's to rendered comment entities
 */

function atwork_activity_entity_view_alter(&$build, $type){
  if($type == "reply"){
    // Grab user who posetd the comment
    $author = user_load($build["field_display_name"]['#object']->uid);
    // Add a link to their profile to encourage connections
    $build["field_display_name"][0]['#markup'] = ' by <a href="/employees/' . $author->name . '"> ' . $build["field_display_name"][0]['#markup'] . '</a>';
    // Add image to the comment
    $image = field_view_field('user', $author, 'field_image', array('settings' => array('label' => 'hidden', 'image_style' => 'icon_image')));
    // Now lets set a more dynamic date
    $current_time = time();
    $post_time = $build['field_profile_comment_date']['#object']->field_profile_comment_date['und'][0]['value'];
    $diff = $current_time - $post_time;
    $time_record = "";
    switch(TRUE){
      case($diff<=60):
        $time_record = "Now";
        break;
      // Less than an hour
      case($diff<3600):
        // One minute
        if($diff < 120){
          $time_record = floor($diff/60) . " Minute ago";
        } else {
          // Any number of minutes
          $time_record = floor($diff/60) . " Minutes ago";
        }
        break;
      // Less than a day
      case($diff<86400):
        // One hour
        if($diff < 7200) {
          $time_record = floor($diff/3600) . " Hour ago";
        } else {
          $time_record = floor($diff/3600) . " Hours ago";
        }
        break;
      // Less than a week
      case($diff<604800):
        // On day
        if($diff < 172800){
          $time_record = floor($diff/86400) . " Day ago";
        } else {
          // More than one day
          $time_record = floor($diff/86400) . " Days ago";
        }
        break;
      default:
        $time_record = date('F j Y', $post_time);
        break;
    }

    // Set the time
    $build['field_profile_comment_date'][0]['#markup'] = '<span class="date-display-single" property="dc:date" datatype="xsd:dateTime">' . $time_record . '</span>';

    // Append the user image here
    $build["field_profile_comment_date"][0]['#markup'] = '<div class="feed-user-image">' . render($image) . '</div>'. " Posted: " . $build["field_profile_comment_date"][0]['#markup'];
    // Add flag icon:
    $build['links']['flag']['#links']['flag-flag_for_message_replies']['title'] =  str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $build['links']['flag']['#links']['flag-flag_for_message_replies']['title']);
  }

  if($type == "message"){
    $build['links']['flag']['#links']['flag-activity_feed_messages_flag']['title'] =  str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'),$build['links']['flag']['#links']['flag-activity_feed_messages_flag']['title']);
  }
}


/**
 * Implements hook_entity_load
 */
function atwork_activity_entity_load($entities, $type){
  if($type == 'message' || $type == 'reply'){
  }
}

/**
 * Implements hook_entity_view
 */
function atwork_activity_entity_view($entity, $type, $view_mode, $langcode){

}




function _atwork_activity_group_subscribe(&$form, &$form_state) {
  global $user;

  $node = node_load($form_state['build_info']['args'][1]);

  $message = message_create('group_subscribe', array('uid' => $user->uid, 'timestamp' => time()));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_message_node->set($node);

  $wrapper->save();
}

function _atwork_activity_group_unsubscribe(&$form, &$form_state) {
  global $user;

  $node = $form_state['build_info']['args'][1];

  $message = message_create('group_unsubscribe', array('uid' => $user->uid, 'timestamp' => time()));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_message_node->set($node);

  $wrapper->save();
}

/**
 * Implements hook_comment_insert();
 *
 * Create a message when a comment is created
 *
 */
function atwork_activity_comment_insert($comment) {
  $account = user_load($comment->uid);
  $node = node_load($comment->nid);

  if (!in_array($node->type, _atwork_activity_node_types()) || $node->type == 'status') {
    return;
  }

  $message = message_create('new_comment', array('uid' => $account->uid, 'timestamp' => $comment->created));

  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_message_node->set($node);
  $wrapper->field_message_comment->set($comment);

  $wrapper->save();

}

/**
 * Implements hook_comment_delete().
 *
 * Delete the message when a comment is deleted
 *
 */
function atwork_activity_comment_delete($comment) {
  // Delete the activity stream message created when this comment
  // was posted.
  if ($mids = atwork_activity_existing_messages($comment->uid, array($comment->cid), 'field_message_comment', 'new_comment')) {
    message_delete_multiple($mids);
  }
}

/**
 * Implements hook_node_insert().
 *
 * Create some different message types when nodes are created
 *
 */
function atwork_activity_node_insert($node) {
  global $atwork_activity_node_types;

  if (!in_array($node->type, _atwork_activity_node_types())) {
    return;
  }

  if ($node->type == 'status') {
    $message_type = 'status';
  }
  elseif ($node->type == 'answer') {
    $message_type = 'new_answer';
  }
  elseif ($node->type == 'image') {
    $message_type = 'new_image';
  }
  else {
    $message_type = 'new_node';
  }

  // Create a message when a user creates a new node.
  $message = message_create($message_type, array('uid' => $node->uid, 'timestamp' => $node->created));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_message_node->set($node);
  $wrapper->save();
}

/**
 * Implements hook_node_update();
 *
 * Create a message when a node is updated
 *
 */
function atwork_activity_node_update($node) {
  if (!in_array($node->type, array('wiki' /*, 'page', 'section_page'*/))) {
    return;
  }

  $message = message_create('node_updated', array('uid' => $node->revision_uid, 'timestamp' => $node->changed));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_message_node->set($node);
  $wrapper->save();

}

/**
 * Implements hook_votingapi_insert().
 *
 * Create messages when a user likes a node or comment
 *
 */
function atwork_activity_votingapi_insert($votes) {
  foreach ($votes as $vote) {
    if ($vote['entity_type'] == 'node') {
      $node = node_load($vote['entity_id']);
      $message = message_create('user_liked_node', array('uid' => $vote['uid'], 'timestamp' => $vote['timestamp']));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_message_node->set($node);
      $wrapper->save();
    }
    if ($vote['entity_type'] == 'comment') {
      $comment = comment_load($vote['entity_id']);
      $node = node_load($comment->nid);
      $message = message_create('user_liked_comment', array('uid' => $vote['uid'], 'timestamp' => $vote['timestamp']));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_message_node->set($node);
      $wrapper->field_message_comment->set($comment);
      $wrapper->save();
    }
  }
}

/**
 * Implements hook_message_access_alter().
 *
 * Ensures you can't see a message of a node you don't have access to
 *
 */
function atwork_activity_message_access_alter(&$access, $context) {
  // We're only interested in the 'view' operation.
  if ($context['op'] != 'view') {
    return;
  }

  $message = $context['entity'];
  // Verify view access to nodes referenced in the message.
  if (isset($message->field_message_node)) {
    foreach ($message->field_message_node[LANGUAGE_NONE] as $key => $value) {
      $node = node_load($value['target_id']);
      if (!node_access('view', $node, $context['account'])) {
        // If the user cannot view any nodes in the message,
        // deny access to the entire message;
        $access = FALSE;
        return;
      }
    }
  }
}

/**
 * Implements hook_user_update();
 *
 * Create a message when a user updates their account
 *
 */
function atwork_activity_user_update(&$edit, $account, $category) {
  global $user;

  // TODO, don't show subsequent edits (15 minutes delay)
  if (_atwork_user_changed($account->original, $account) && $account->uid == $user->uid) {
    $message = message_create('updated_user', array('uid' => $account->uid, 'timestamp' => time()));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->save();
  }
}

/*
 * Implements hook_user_relationships_save();
 *
 * Create a message when a user follows another user
 *
 */
function atwork_activity_user_relationships_save($relationship, $action) {
  if ($action == 'request') {
    $requestee = user_load($relationship->requestee_id);

    $message = message_create('following_user', array('uid' => $relationship->requester_id, 'timestamp' => $relationship->created));
    $wrapper = entity_metadata_wrapper('message', $message);
    $wrapper->field_message_user->set($requestee);
    $wrapper->save();
  }
}

/*
 * Implements hook_user_relationships_save();
 *
 * Delete the message when a user unfollows another user
 *
 */
function atwork_activity_user_relationships_delete($relationship, $action) {
  if ($mids = atwork_activity_existing_messages($relationship->requester_id, array($relationship->requestee_id), 'field_message_user', 'following_user')) {
    message_delete_multiple($mids);
  }
}

/**
 * Implements hook_tokens_alter();
 *
 * The name of a content type needs to be in lower case
 *
 */
function atwork_activity_tokens_alter(&$replacements, $context) {
  if (isset($replacements['[message:field-message-node:content-type]'])) {
    $replacements['[message:field-message-node:content-type]'] = strtolower($replacements['[message:field-message-node:content-type]']);
  }
}

/*
 * Implementation of hook_block_info()
 *
 * Make some message blocks
 * Includes profile page activity block, and homepage activity block.
 */
function atwork_activity_block_info() {
   // For the profile page
  $blocks['profile_page_activity_feed_block'] = array(
    'info' => t("Profile page activity feed block"),
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  // This example comes from node.module.
  $blocks['profile'] = array(
    'info' => t('Profile: Activity'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['group'] = array(
    'info' => t('Group: Activity'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['homepage'] = array(
    'info' => t('Homepage: Activity'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  return $blocks;
}





/*
 * Implementation of hook_block_view()
 *
 *
 *
 */
function atwork_activity_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    // currently not being used. required user_relationships
    case 'profile':
      if (arg(0) != 'user' || !is_numeric(arg(1))) {
        break;
      }

      $account = user_load(arg(1));
      if (!$account) {
        break;
      }

      // We want our js script to act on this block, not the standard one
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity.js');
      $output = '';
      global $user;

      if ($account->uid == $user->uid) {
        $output .= t('You can also view your own personalized !activity. It includes updates from employees you follow and groups you belong to.', array(
          '!activity' => l(t('news feed'), 'user/' . $user->uid . '/activity'),
        ));
      }
      else {
        $relationship = user_relationships_load(
          array(
            'requester_id' => $user->uid,
            'requestee_id' => $account->uid,
          ),
          array(
            'count' => TRUE,
          )
        );

        if ($relationship) {
          $output .= t('Since you are following this employee their activity also appears in your personalized !activity.', array(
            '!activity' => l(t('news feed'), 'user/' . $user->uid . '/activity'),
          ));
        }
        else {
          $output .= t('You can follow this employee to have their activity appear in your own !activity.', array(
            '!activity' => l(t('news feed'), 'user/' . $user->uid . '/activity'),
          ));
        }
      }

      $query = db_select('message', 'm')
        ->fields('m', array('mid'))
        ->orderBy('m.timestamp', 'DESC')
        ->condition('m.uid', $account->uid);

      $result = $query
        ->extend('PagerDefault')
        ->limit(10)
        ->execute()
        ->fetchAll();

      //TODO: use the render function here
      $i = 1;
      foreach ($result as $record) {
        $message = message_load($record->mid);

        $classes = array();
        $classes[] = 'message';
        $classes[] = 'message-' . $message->mid;

        if ($i % 2 == 0) {
          $classes[] = 'even';
        }
        else {
          $classes[] = 'odd';
        }


        $tmpMsg = str_replace("background","webpage", $message->getText());
        // Lets fix all badly formed html.
        $stripHtml = new DOMDocument();
        $stripHtml->loadHTML($tmpMsg);
        $tmpMsg = $stripHtml->saveHTML();
        // Get rid of that weird symbol that the XML is leaving
        $tmpMsg = html_entity_decode($tmpMsg,ENT_QUOTES,"UTF-8");
        $tmpMsg = str_replace("Ã‚","", $tmpMsg);

        $output .= '<div class="' . implode(' ', $classes) . '">' . $tmpMsg . '</div>';

        $i++;
      }



      $block['subject'] = _atwork_fa('circle-blank') . t('Activity');
      $block['content'] = array(
        '#markup' => '<div id="activity-feed">' . $output . '</div>' . theme('pager'),
      );

      break;



    case 'group':

      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity_group.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/jquery.url.js');
      drupal_add_js('initializeActivity();', 'inline');

      $block['subject'] = _atwork_fa('circle-blank') . t('Activity');
      $block['content'] = array(
        '#markup' => '<div id="group-activity"><div class="activity-feed-progress"><img src="/sites/all/themes/atwork_zen/images/progress.gif" title="Loading" /></div><div id="group-activity-ajax"></div></div>',
      );

      break;

    case 'homepage':

      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity_home.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/jquery.url.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity_undock.js');
      drupal_add_js('initializeAllActivity();', 'inline');

       /// this is now handled by click-handlers - too much strain on queries otherwise
      //drupal_add_js('initializeGroupActivity();', 'inline');
      //drupal_add_js('initializeMyActivity();', 'inline');
      //drupal_add_js('initializeCommentActivity();', 'inline');


      drupal_add_library('system', 'ui.tabs');

      $js = <<<EOT
(function($) {
  $(document).ready(function() {
    $( "#tabs" ).tabs();
  });
})(jQuery);
EOT;

      drupal_add_js($js, 'inline');

      $block['subject'] = t('Current Activity');
      $block['content'] = array(
        '#markup' => '
<a href="node/21100" class="jsNewActivityWindow"><img src="/sites/all/modules/custom/atwork_activity/img/pop-out-white.png" title="Click for pop-out Activity Feed window" /></a>
<div id="tabs">
<div class="activity-feed-progress"><img src="/sites/all/themes/atwork_zen/images/progress.gif" title="Loading" /></div>
  <ul>
    <li><a href="#tabs-1">All Activity</a></li>
    <li><a href="#tabs-4">Comment Activity</a></li>
    <li><a href="#tabs-3">My Activity</a></li>
    <li><a href="#tabs-2">My Groups</a></li>
  </ul>
  <div id="tabs-1">
  </div>
  <div id="tabs-4">
  </div>
  <div id="tabs-2">
  </div>
  <div id="tabs-3">
  </div>
</div>',
      );
     drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/atwork_activity_click_handlers.js');

      break;
    /** the profile page block view */
    case 'profile_page_activity_feed_block':
      $block['subject'] = 'User activity';
      // This helps to keep this code a little cleaner - all content is located in it's own function below.
      $block['content'] = _atwork_activity_profile_page_block_content(arg(1));
      // Don't think I need to pass these values anymore - will keep this for now to check.
      //feed_block_init();
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/' . 'js_atwork_activity_profile_feed.js');
      break;
  }
  return $block;
}


function feed_block_init(){
      $account = user_load(arg(1));
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/' . 'atwork_activity_profile_feed.js');
      drupal_add_js(drupal_get_path('module', 'atwork_activity') . '/jquery.url.js');
      drupal_add_js(array('feed_refresh' => array(
        'refreshURL' => url("atwork-activity/trigger-page"),
        'userId'=>$account->uid,
        )), 'setting');
}



/**
 * Helper function to create content for the profile page feed
 */
function _atwork_activity_profile_page_block_content($user_id){

  // Grab user and account variables
  global $user;
  $this_user = user_load($user->uid);

  if(isset($user_id)){
  $account = user_load($user_id);
  } else {
   $account = user_load(arg(1));
  }

  // Bail out if we don't have a user, or if this is employee news
  if (!isset($account) || $user_id == 0 || arg(1) == 0) {
    return;
  }

  // Decide if it is users block or others and set title
  if($account->uid === $user->uid){
    $block['title'] = t("My Feed");
  } else {
    $block['title'] = $account->field_gal_first_name['und'][0]['safe_value'] . t("'s activity feed");
  }
  // Grab all messages related to user, User name, and picture of User.

  $output = '';
  $classes = array();

  $query = db_select('message', 'm')
    ->fields('m', array('mid'))
    ->orderBy('m.timestamp', 'DESC')
    ->condition('m.uid', $account->uid);

  $result = $query
    //->extend('PagerDefault')
    //->limit(15)
    ->execute()
    ->fetchAll();

  //dpm($result);
  $result_mid = array();
  foreach($result as $value){
    $result_mid[] = $value->mid;
  }
  // Load entities and all related content
  $messages1 = entity_load('message', $result_mid);
  //dpm($messages1);
  // Now remove all unwanted messages
  foreach($messages1 as $key=>$value){
    switch(true){
      case($value->type == "user_received_ecard"):
      case($value->type == "user_sent_ecard"):
      case($value->type == "user_liked_comment"):
      case($value->type == "user_liked_node"):
      case($value->type == "group_unsubscribed"):
        unset($messages1[$key]);
        break;
      // Need to remove instances of masquerading or posting as employee news
      case($value->type == "node_updated"):
        if(isset($value->field_message_node['und'][0]['target_id']) && $value->field_message_node['und'][0]['target_id']){
          $node = node_load($value->field_message_node['und'][0]['target_id']);
          if(!empty($node)){
            if(isset($node->uid) && $node->uid){
              if(($account->uid !== $node->uid)){
                unset($messages1[$key]);
              }
            // Node is authored by employee news, so uid = 0 (false to teh check above)
            } else {
              unset($messages1[$key]);
            }
          }
        }
        break;
      case($value->type == "new_node"):
        if(isset($value->field_message_node['und'][0]['target_id']) && $value->field_message_node['und'][0]['target_id']){
          $node = node_load($value->field_message_node['und'][0]['target_id']);
          if(!empty($node)){
            if(isset($node->uid) && $node->uid){
              if(($account->uid !== $node->uid)){
                unset($messages1[$key]);
              }
            } else {
              unset($messages1[$key]);
            }
          }
        }
        break;
      // Gallery case
      case($value->type == "new_image"):
        if(isset($value->field_message_node['und'][0]['target_id']) && $value->field_message_node['und'][0]['target_id']){
          $node = node_load($value->field_message_node['und'][0]['target_id']);
          if(!empty($node)){
            if(isset($node->uid) && $account->uid){
              if(($node->uid !== $account->uid)){
                unset($messages1[$key]);
              }
            }
          }
        }
        break;
      // Following case
      case($value->type == "following_user"):
        if(isset($value->uid) && $value->uid == $this_user->uid){
          $user_on_own_feed = TRUE;
        }
        break;
      case($value->type == "status"):
        break;
      // TODO: Forum case, image case, background page, ??Broken Case?? (starts with [])?
      default:
        break;
    }
  }

  //dpm($messages1);
  // Now create a render array to get the entity wrappers/markup in place
  $message_render_array = entity_view('message', $messages1);
  // The final markup - wrap it up in a div
  $form = drupal_get_form('atwork_activity_form');

  $output .= render($form);
  $output .= '<div id="activity-feed">' ;

  if(isset($message_render_array) && $message_render_array){
    $pager_number = pager_array_splice($message_render_array['message'], 10);
  }

  $j = 1;
  if(isset($pager_number) && !empty($pager_number)){
    foreach($pager_number as $key=>$result) {
      // Set up odd/even classes
      $classes = array();
      $classes[] = 'message';
      $classes[] = 'message-' . $key;

      if ($j % 2 == 0) {
        $classes[] = 'even';
      }
      else {
        $classes[] = 'odd';
      }

      // We want to add images to the activity feed.
      $author = user_load($result['#entity']->uid, TRUE);
      // Add flag icon:
      if(isset( $result['links']['flag']['#links']['flag-message_flag']) &&  $result['links']['flag']['#links']['flag-message_flag']){
        $result['links']['flag']['#links']['flag-message_flag']['title'] =  str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $result['links']['flag']['#links']['flag-message_flag']['title']);
      }

      // Check if an image exists:
      if(isset($author->field_image) && $author->field_image){
        // If it does, then grab a renderable view of it
        $user_image = field_view_field('user', $author, 'field_image', array('settings' => array('label' => 'hidden', 'image_style' => 'icon_image')));
      } else {
        // Default image isn't always repopulated into $author->field_image after an ajax reload - so if it is missng and they have not saved a personal image, then lets reset the default image
        $profile_image_field = field_info_instance('user', 'field_image', 'user');
        $default_fid = $profile_image_field['settings']['default_image'];
        $author->field_image[] = file_load($default_fid);
        $user_image = field_view_field('user', $author, 'field_image', array('settings' => array('label' => 'hidden', 'image_style' => 'icon_image')));
      }

      // Handle following wording case
      if(isset($user_on_own_feed) && $result['#bundle'] == 'following_user'){
        // Remove "You is" and replace with You are
        $str = substr($result['message__message_text__0']['#markup'], 10);
        $result['message__message_text__0']['#markup'] = '<p>You are' . $str;
      }

      // Status update messages display improperly.
      if(isset($user_on_own_feed) && $result['#bundle'] == 'status'){
        $str = substr($result['message__message_text__0']['#markup'], 20);

        $result['message__message_text__0']['#markup'] = '<p>You updated your' . $str;
      }
      // Set date for mins/ago then hours, then days, week, then date
      $current_time = time();
      $post_time = $result['#entity']->timestamp;
      $diff = $current_time - $post_time;
      $time_record = "";
      switch(TRUE){
        case($diff<=60):
          $time_record = "Now";
          break;
        // Less than an hour
        case($diff<3600):
          $time_record = floor($diff/60) . " Minutes ago";
          break;
        // Less than a day
        case($diff<86400):
          $time_record = floor($diff/3600) . " Hours ago";
          break;
        // Less than a week
        case($diff<604800):
          $time_record = floor($diff/86400) . " Days ago";
          break;
        default:
          $time_record = date('F j Y', $result['#entity']->timestamp);
          break;
      }

       // Put everything together in the order we would like for this message
      $output .= '<div class="' . implode(' ', $classes) . '"><span class="date"> ' . $time_record . '</span> <span class="feed_image">' . render($user_image) . '</span>' . render($result) .
    /* print rate_generate_widget($widget_id, 'message', $entity->cid) . */ '</div>' ;
     $j++;
    }
  }

  $output .= '</div>' . theme('pager', array('quantity' => 9));
 // $output .= theme('pager');
  //dpm($output);

  return array('#markup'=>$output);
}

/**
 * A generic array pager for Drupal
 * Found here:
 * https://www.drupal.org/docs/7/creating-custom-modules/howtos/paging-non-sql-data
 */
function pager_array_splice($data, $limit = 9, $element = 0) {
  if(empty($data)){
    return;
  }
  global $pager_page_array, $pager_total, $pager_total_items; $page = isset($_GET['page']) ? $_GET['page'] : '';
  // Convert comma-separated $page to an array, used by other functions.
  $pager_page_array = explode(',', $page);
  // We calculate the total of pages as ceil(items / limit).
  $pager_total_items[$element] = count($data);
  $pager_total[$element] = ceil($pager_total_items[$element] / $limit);
  $pager_page_array[$element] = max(0, min((int)$pager_page_array[$element], ((int)$pager_total[$element]) - 1));
  return array_slice($data, $pager_page_array[$element] * $limit, $limit, TRUE);
}



/*
 * Create a message for ecards being sent. No other hooks so use this one.
 */
function atwork_activity_mail_alter(&$email_message) {
  if ($email_message['key'] == 'ecard_ecard') {
    $ecard = $email_message['params']['ecard'];
    $receiver = user_load_by_mail($ecard->mail_to);
    $node = node_load($ecard->entity_id);
    if ($receiver) {
      $message = message_create('user_received_ecard', array('uid' => $receiver->uid, 'timestamp' => time()));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_message_ecard->set($ecard);
      $wrapper->field_message_node->set($node);
      $wrapper->save();

      $message = message_create('user_sent_ecard', array('uid' => $ecard->uid, 'timestamp' => $ecard->sent_time));
      $wrapper = entity_metadata_wrapper('message', $message);
      $wrapper->field_message_ecard->set($ecard);
      $wrapper->field_message_node->set($node);
      $wrapper->save();
    }
  }
}


/**
 * Implementation of hook_block_view_alter
 * Code to show following/followers blocks only on user and user/* pages.
 */
function atwork_activity_block_view_alter(&$data, $block){
  switch ($block->delta){
    case("profile_page_activity_feed_block"):
      // Block is set, so lets check if we are on the right page
      if(isset($block->visibility) && $block->visibility == 1){
        $url_check = $_SERVER['REQUEST_URI'];
        $url_parts_check = explode( '/', $url_check);
        // Don't want to make the block disappear on ajax reload
        if($url_parts_check[1] == "block_refresh"){
          return;
        }
        // If we are down the path further than user/[idir], then hide these blocks
        if(count($url_parts_check) > 3){
          $data['content']['#access'] = false;
        }
      }
    break;
  }
}
