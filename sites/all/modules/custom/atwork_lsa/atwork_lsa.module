<?php

function atwork_lsa_form_lsa_application_node_form_alter(&$form, $form_state) {
  global $user;
  $user = user_load($user->uid);
  //$form['#token'] = False;
  drupal_set_title('Long Service Award Application');
  drupal_set_breadcrumb(array());
  drupal_add_js(drupal_get_path('module', 'atwork_lsa').'/atwork_lsa.js');
  drupal_add_js(drupal_get_path('module', 'atwork_lsa') . '/atwork_lsa_gift.js');
  drupal_add_js(drupal_get_path('module', 'atwork_lsa') . '/atwork_lsa_gift_list.js');
  jquery_impromptu_add();
  drupal_add_library('system', 'drupal.ajax');
  if (in_array('lsa admin', $user->roles) || in_array('administrator', $user->roles)){
    drupal_add_css('.group-lsa-administration {dsplay:block !important;}', 'inline');
  } else {
    // Hide the administration panel from all users until after signup is over.
    drupal_add_js(drupal_get_path('module', 'atwork_lsa') . '/atwork_lsa_admin_fields.js');
    drupal_add_css('.group-lsa-administration {display:none}', 'inline');
    // Also hide some fields non-admins will not use
    $form['field_lsa_guest_accom']['#access'] = false;
    $form['field_lsa_recipient_accom']['#access'] = false;
  }

  // LSA form adjustments
  $form['field_lsa_received_award']['#suffix'] = '<div style="display: none" id="lsa-no-gift">The Office of Protocol will contact you soon in this regard. Or you may contact them directly at (250) 387-1616.</div>';
  $form['field_lsa_terms'][$form['field_lsa_terms']['#language']]['#title'] = '';
  $form['#validate'][] = 'atwork_lsa_application_validate';
  $form['#submit'][] = 'atwork_lsa_application_submit';
  $form['actions']['submit']['#value'] = "SUBMIT your LSA registration";
  $form['field_lsa_accommodation_notes']['und'][0]['value']['#title'] = "";
  $form['field_lsa_accommodation_notes']['und']['#prefix'] .= "<p>Please specify your accommodations requirements, and indicate if the accommodation is for you or your guest.</p>";
  $form['field_lsa_award_sp_instructions']['#access'] = FALSE;
  // skip defaults for admins who are entering for others
  if (in_array('lsa admin', $user->roles) || in_array('administrator', $user->roles)  || in_array('lsa contact', $user->roles)) {
    //$form['field_lsa_terms'][$form['field_lsa_terms']['#language']]['#default_value'] = 1;

    return;
  }

  // if new application check if users already submitted one
  if (!isset($form['#node']->nid) || !$form['#node']->nid) {
    $exists = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.uid', $user->uid)
      ->condition('n.type', 'lsa_application')
      ->execute()
      ->fetchAssoc();

    if (isset($exists['nid']) && $exists['nid']) {
      drupal_goto('node/' . $exists['nid']);
    }
  }

  //$form['field_lsa_employee_number'][$form['field_lsa_employee_number']['#language']][0]['value']['#default_value'] = atwork_ldap_get_employee_number($user);

  $field_gal_first_name = field_get_items('user', $user, 'field_gal_first_name');
  $field_gal_last_name = field_get_items('user', $user, 'field_gal_last_name');
  $field_gal_phone_number = field_get_items('user', $user, 'field_gal_phone_number');
  $field_gal_branch = field_get_items('user',$user,'field_gal_branch');
  $field_gal_work_group = field_get_items('user',$user, 'field_gal_work_group');
  $field_gal_address = field_get_items('user',$user, 'field_gal_address');
  $field_gal_postal_code = field_get_items('user',$user,'field_gal_postal_code');
  $field_gal_city = field_get_items('user',$user,'field_gal_city');

  if (isset($field_gal_first_name[0]['value']) && $field_gal_first_name[0]['value']) {
    $form['field_lsa_first_name'][$form['field_lsa_first_name']['#language']][0]['value']['#default_value'] = $field_gal_first_name[0]['value'];
  }

  if (isset($field_gal_last_name[0]['value']) && $field_gal_last_name[0]['value']) {
    $form['field_lsa_last_name'][$form['field_lsa_last_name']['#language']][0]['value']['#default_value'] = $field_gal_last_name[0]['value'];
  }

  if (isset($field_gal_phone_number[0]['value']) && $field_gal_phone_number[0]['value']) {
    $form['field_lsa_work_phone'][$form['field_lsa_work_phone']['#language']][0]['value']['#default_value'] = $field_gal_phone_number[0]['value'];
  }

  if(isset($field_gal_branch[0]['value']) && $field_gal_branch[0]['value']){
    $form['field_lsa_branch_department'][$form['field_lsa_branch_department']['#language']][0]['value']['#default_value'] = $field_gal_branch[0]['value'];
  }

  if(isset($field_gal_work_group[0]['value']) && $field_gal_work_group[0]['value']){
    $form['field_lsa_office_work_group'][$form['field_lsa_office_work_group']['#language']][0]['value']['#default_value'] = $field_gal_work_group[0]['value'];
  }

  if(isset($field_gal_address[0]['value']) && $field_gal_address[0]['value']){
    $form['field_lsa_office_address'][$form['field_lsa_office_address']['#language']][0]['value']['#default_value'] = $field_gal_address[0]['value'];
  }

  if(isset($field_gal_postal_code[0]['value']) && $field_gal_postal_code[0]['value']){
    $form['field_lsa_office_postal_code'][$form['field_lsa_office_postal_code']['#language']][0]['value']['#default_value'] = $field_gal_postal_code[0]['value'];
  }

  if(isset($field_gal_city[0]['value']) && $field_gal_city[0]['value']) {
    $form['field_lsa_office_city'][$form['field_lsa_office_city']['#language']][0]['value']['#default_value'] = $field_gal_city[0]['value'];
  }

  $form['field_lsa_email'][$form['field_lsa_email']['#language']][0]['email']['#default_value'] = $user->mail;

}

/*
 * Validation function:
 *
 * Ensures the postal code is 6 characters with no spaces
 * Ensures the phone numbers are 10 digits long
 *
 * If no errors are found it applies ucwords() to the city and street
 * and strtoupper to the postal code
 *
 */
function atwork_lsa_application_validate($form, &$form_state) {
  global $user;

  $lang = $form_state['values']['language'];

  // if new check for duplicate employee id
//  $exists = db_select('field_data_field_lsa_employee_number', 'f')
//    ->fields('f', array('entity_id'))
//    ->condition('f.field_lsa_employee_number_value', $form_state['values']['field_lsa_employee_number'][$lang][0]['value'])
//    ->execute()
//    ->fetchAssoc();
//
//  if ($exists) {
//    if ((!isset($form_state['node']->nid) || !$form_state['node']->nid)) {
//      form_set_error('field_lsa_employee_number', t(
//        'The Employee Number %employee_number has already been submitted on a different application.',
//        array(
//          '%employee_number' => $form_state['values']['field_lsa_employee_number'][$lang][0]['value'],
//        )
//      ));
//    }
//    else {
//      drupal_set_message(t(
//        'The Employee Number %employee_number has already been submitted on a different application.',
//        array(
//          '%employee_number' => $form_state['values']['field_lsa_employee_number'][$lang][0]['value'],
//        )
//      ), 'warning');
//    }
//  }

  // We need to check if all PECSF fields have been filled out if this gift is their choice.
  if (($form_state['values']['field_lsa_register_last_year'][$lang][0]['value'] == 2 &&
      !$form_state['values']['field_lsa_award'][$lang][0]['value']) && $form_state['values']['field_lsa_years_of_service']['und'][0]['value'] <= '40'){
    form_set_error('field_lsa_gift_option', t(
      'Please choose an award.'
    ));
  }

  $postal_regex = '/^([a-zA-Z]\d[a-zA-Z])\ {0,1}(\d[a-zA-Z]\d)$/';
  // Quick validation to make sure we have the right number of chars for the Postal Codes
  if(isset($form_state['input']['field_lsa_home_postal_code']['und'][0]['value']) && $form_state['input']['field_lsa_home_postal_code']['und'][0]['value']){
    // Format this postal code
    // Upper case
    $form_state['input']['field_lsa_home_postal_code']['und'][0]['value'] = strtoupper($form_state['input']['field_lsa_home_postal_code']['und'][0]['value']);
    // remove spaces
    $form_state['input']['field_lsa_home_postal_code']['und'][0]['value'] = preg_replace('/\s+/', '', $form_state['input']['field_lsa_home_postal_code']['und'][0]['value']);
    // remove special characters
    $form_state['input']['field_lsa_home_postal_code']['und'][0]['value'] = preg_replace('/[^A-Za-z0-9\-]/', '', $form_state['input']['field_lsa_home_postal_code']['und'][0]['value']);
    // Put expected space back at 3rd spot
    $form_state['input']['field_lsa_home_postal_code']['und'][0]['value'] = wordwrap($form_state['input']['field_lsa_home_postal_code']['und'][0]['value'], 3, ' ', true);
    // Make sure this is no more than 7 characters long
    if (strlen($form_state['input']['field_lsa_home_postal_code']['und'][0]['value']) > 7){
      $form_state['input']['field_lsa_home_postal_code']['und'][0]['value'] = substr($node->field_lsa_home_postal_code[$lang][0]['value'],0,7);
    }
    $postal_check = str_replace(" ", "", $form_state['input']['field_lsa_home_postal_code']['und'][0]['value']);
    if(strlen($postal_check) < 6 || strlen($postal_check) > 6){
      form_set_error('field_lsa_home_postal_code', t("The recipient postal code must have 6 characters."));
    }
    // Quick regex to make sure we have relatively the right type of canadian postal
    $validity = preg_match($postal_regex, $form_state['input']['field_lsa_home_postal_code']['und'][0]['value']);
    if($validity == FALSE){
      form_set_error('field_lsa_home_postal_code', t("Please enter a valid recipient postal code in the format A1A 1A1"));
    }
  }

  if(isset($form_state['input']['field_lsa_office_postal_code']['und'][0]['value']) && $form_state['input']['field_lsa_office_postal_code']['und'][0]['value']){
    // Format this postal code
    // Upper case
    $form_state['input']['field_lsa_office_postal_code']['und'][0]['value'] = strtoupper($form_state['input']['field_lsa_office_postal_code']['und'][0]['value']);
    // remove spaces
    $form_state['input']['field_lsa_office_postal_code']['und'][0]['value'] = preg_replace('/\s+/', '', $form_state['input']['field_lsa_office_postal_code']['und'][0]['value']);
    // remove special characters
    $form_state['input']['field_lsa_office_postal_code']['und'][0]['value'] = preg_replace('/[^A-Za-z0-9\-]/', '', $form_state['input']['field_lsa_office_postal_code']['und'][0]['value']);
    // Put expected space back at 3rd spot
    $form_state['input']['field_lsa_office_postal_code']['und'][0]['value'] = wordwrap($form_state['input']['field_lsa_office_postal_code']['und'][0]['value'], 3, ' ', true);
    // Make sure this is no more than 7 characters long
    if (strlen($form_state['input']['field_lsa_office_postal_code']['und'][0]['value']) > 7){
      $form_state['input']['field_lsa_office_postal_code']['und'][0]['value'] = substr($node->field_lsa_home_postal_code[$lang][0]['value'],0,7);
    }
    $postal_check = str_replace(" ", "", $form_state['input']['field_lsa_office_postal_code']['und'][0]['value']);
    if(strlen($postal_check) < 6 || strlen($postal_check) > 6){
      form_set_error('field_lsa_office_postal_code', t("The office postal code must have 6 characters."));
    }
    // Quick regex to make sure we have relatively the right type of canadian postal
    $validity = preg_match($postal_regex, $form_state['input']['field_lsa_office_postal_code']['und'][0]['value']);
    if($validity == FALSE){
      form_set_error('field_lsa_office_postal_code', t("Please enter a valid office postal code in the format A1A 1A1"));
    }
  }

  
  if(isset($form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']) && $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']){
    // Format this postal code
    // Upper case
    $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'] = strtoupper($form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']);
    // remove spaces
    $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'] = preg_replace('/\s+/', '', $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']);
    // remove special characters
    $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'] = preg_replace('/[^A-Za-z0-9\-]/', '', $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']);
    // Put expected space back at 3rd spot
    $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'] = wordwrap($form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'], 3, ' ', true);
    // Make sure this is no more than 7 characters long
    if (strlen($form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']) > 7){
      $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value'] = substr($node->field_lsa_home_postal_code[$lang][0]['value'],0,7);
    }
    $postal_check = str_replace(" ", "", $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']);
    if(strlen($postal_check) < 6 || strlen($postal_check) > 6){
      form_set_error('field_lsa_supervisor_postal_code', t("The supervisor postal code must have 6 characters."));
    }
    // Quick regex to make sure we have relatively the right type of canadian postal
    $validity = preg_match($postal_regex, $form_state['input']['field_lsa_supervisor_postal_code']['und'][0]['value']);
    if($validity == FALSE){
      form_set_error('field_lsa_supervisor_postal_code', t("Please enter a valid postal code for the supervisor in the format A1A 1A1"));
    }
  }


  // Make sure all relevant PECSF fields filled out
  $award_id = $form_state['values']['field_lsa_award_id'][$lang][0]['value'];
  $pecsf_id = array(11,17, 33, 40, 42,44);
  // They have chosen a pecsf award
  if(in_array($award_id, $pecsf_id)){    
    if(!isset($form_state['values']['field_lsa_donation_options'][$lang][0]['value'])){
      form_set_error('field_lsa_donation_options', t("You must select a donation option."));
    }
    if(isset($form_state['values']['field_lsa_donation_options'][$lang][0]['value'])){
     // Option A - need to choose region
      if($form_state['values']['field_lsa_donation_options'][$lang][0]['value'] == 0){
        if(!$form_state['values']['field_lsa_pecsf_region'][$lang][0]['value']){
          form_set_error('field_lsa_pecsf_region', t('You must select a region'));
        }
      }
      // Option B
      if($form_state['values']['field_lsa_donation_options'][$lang][0]['value'] == 1){
        // Forgot to choose a region
        if(!isset($form_state['values']['field_lsa_pecsf_region'][$lang][0]['value'])){
          form_set_error('field_lsa_pecsf_region', t('You must select a region'));
        }
        // Forgot to enter a valid ID or Charity name
        if(!isset($form_state['values']['field_lsa_pecsf_id'][$lang][0]['value'])){
          form_set_error('field_lsa_pecsf_id', t('Please enter a PECSF charity ID'));
        }

        if(!isset($form_state['values']['field_lsa_pecsf_charity_name'][$lang][0]['value'])){
          form_set_error('field_lsa_pecsf_charity_name', t('Please enter a PECSF charity name you would like to donate to'));
        }

        if($form_state['values']['field_lsa_second_donation'][$lang][0]['value'] == 1){
          // Forgot information on second charity
          if(!isset($form_state['values']['field_lsa_pecsf_id_2'][$lang][0]['value'])){
            form_set_error('field_lsa_pecsf_id_2', t('Please enter a PECSF charity ID number for your second charity'));
          }

          if(!isset($form_state['values']['field_lsa_charity_name_2'][$lang][0]['value'])){
            form_set_error('field_lsa_charity_name_2', t('Please enter a PECSF charity name you would like to donate to'));
          }
        }

      }

    }
  }
  // check supervisor's email
  // WE went around the better GAL centered validation because not all addresses in LSA are in the GAL
  //_atwork_validate_emails($form_state['values']['field_lsa_supervisor_email'][$lang][0]['email'] , 'field_lsa_supervisor_email', $form['form_token']['#default_value']);
  $email = $form_state['values']['field_lsa_supervisor_email'][$lang][0]['email'];
  $internal_addresses = variable_get('atwork_mail_internal_addresses',array());
  if (in_array(substr_replace(strtolower($email), '', 0, strpos($email, '@')), $internal_addresses)) {
  } else {
    form_set_error($email, t('Email is limited to organizations within the BC Public Service. %email was not found.', array('%email' => $email)));
  }
  // Check to see if special requirements was selected as "yes" - if so then textbox is required.
  if($form_state['values']['field_lsa_ceremony_accommodation']['und'][0]['value'] == "1" && $form_state['values'  ]['field_lsa_accommodation_notes']['und'][0]['value'] == ''){
    form_set_error('field_lsa_accommodation_notes', t("You must indicate the accommodations that you require"));
  }
  // Check to see if user had indicated dietary requirements, but indicated none.
  if($form_state['values']['field_lsa_dietary_requirements']['und'][0]['value'] == "1" && (empty($form_state['values'  ]['field_lsa_recipient_dietary']['und']) && empty($form_state['values'  ]['field_lsa_dietary_guest']['und']))){
    form_set_error('field_lsa_recipient_dietary', t("You have not indicated dietary requirements for you or your guest"));
  }
  dpm($form_state);
  // Check if terms are approved
  if($form_state['values']['field_lsa_terms']['und'][0]['value'] != "1"){
    form_set_error('field_lsa_terms', t("You must agree to Terms in order to submit the form"));
  }
}

function atwork_lsa_pin_application_validate($form, &$form_state){
  $lang = $form_state['values']['language'];
  global $user;

  if (in_array('lsa admin', $user->roles) || in_array('administrator', $user->roles)) {
    return true;
  }

  // Check if an application has already been submitted for this user
  $exists = db_select('field_data_field_lsa_pin_employee_number', 'e')
      ->fields('e', array('entity_id'))
      ->condition('e.field_lsa_pin_employee_number_value', $form_state['input']['field_lsa_pin_employee_number'][$lang][0]['value'])
      //->condition('e.bundle', 'lsa_pin_application')
      ->execute()
      ->fetchAll();
  if(isset($exists) && !empty($exists)){
    // They already have an application, so we set an error.
    //form_set_error('field_lsa_pin_employee_number', t('This employee has already been registered for a service pin. Contact Gillian Kish (<a href="mailto:gillian.kish@gov.bc.ca?subject=Question%20about%20existing%20pin%20application">Gillian.kish@gov.bc.ca</a>) if additional pins are required.'));
    form_set_error('field_lsa_pin_employee_number', t('This employee has already been registered for a service pin. Contact your <a href="/career/employee-appreciation/recognition-contacts" target="blank">Ministry Recognition Contact</a> if additional pins are required.'));

  }

  // Make sure we have selected one or the other - don't want an empty application.
  if((isset($form_state['input']['field_lsa_other_milestone_years']['und']) && $form_state['input']['field_lsa_other_milestone_years']['und'] == 1) || (isset($form_state['input']['field_lsa_milestone_year']['und']) && $form_state['input']['field_lsa_milestone_year']['und'] == 1)){
    return true;
  } else {
    // Form is empty
    form_set_error('field_lsa_', t('You have not selected any milestone'));
  }

  // Lets make sure the Postal codes at least match standardized format - we are not looking up validity here.


  return true;
}

function atwork_lsa_node_presave($node) {

  if($node->type === 'lsa_pin_application'){
    $lang = $node->language;
    // Upper case
    $node->field_lsa_office_postal_code[$lang][0]['value'] = strtoupper($node->field_lsa_office_postal_code[$lang][0]['value']);
    // remove spaces
    $node->field_lsa_office_postal_code[$lang][0]['value'] = preg_replace('/\s+/', '', $node->field_lsa_office_postal_code[$lang][0]['value']);
    // remove special characters
    $node->field_lsa_office_postal_code[$lang][0]['value'] = preg_replace('/[^A-Za-z0-9\-]/', '', $node->field_lsa_office_postal_code[$lang][0]['value']);
    // Put expected space back at 3rd spot
    $node->field_lsa_office_postal_code[$lang][0]['value'] = wordwrap($node->field_lsa_office_postal_code[$lang][0]['value'], 3, ' ', true);
    // Make sure this is no more than 7 characters long
    if(strlen($node->field_lsa_office_postal_code[$lang][0]['value']) > 7){
      $node->field_lsa_office_postal_code[$lang][0]['value'] = substr($node->field_lsa_office_postal_code[$lang][0]['value'], 0,7);
    }
  }

  if ($node->type != 'lsa_application') {
    return;
  }

  $lang = $node->language;

  // standardize case
  $node->field_lsa_street[$lang][0]['value'] = ucwords(strtolower($node->field_lsa_street[$lang][0]['value']));
  $node->field_lsa_city[$lang][0]['value'] = ucwords(strtolower($node->field_lsa_city[$lang][0]['value']));

  // trim by request - probably not needed
  $node->field_lsa_first_name[$lang][0]['value'] = trim($node->field_lsa_first_name[$lang][0]['value']);

  if(isset($node->field_lsa_middle_name[$lang][0]['value']) && $node->field_lsa_middle_name[$lang][0]['value']){
    $node->field_lsa_middle_name[$lang][0]['value'] = trim($node->field_lsa_middle_name[$lang][0]['value']);
  }

  $node->field_lsa_last_name[$lang][0]['value'] = trim($node->field_lsa_last_name[$lang][0]['value']);

  // uppercase po box
  $node->field_lsa_street[$lang][0]['value'] = str_replace('Po Box', 'PO BOX', $node->field_lsa_street[$lang][0]['value']);

  // if "registered last year" is false, "received gift" must be false too
  if ($node->field_lsa_register_last_year[$lang][0]['value'] == 2) {
    $node->field_lsa_received_award[$lang][0]['value'] = 0;
  }

  // if "registered last year" is true then no gift for you!
  if ($node->field_lsa_register_last_year[$lang][0]['value'] == 1) {
    //$node->field_lsa_award[$lang][0]['value'] = "";
  }

}

/*
 * What to do after the form is submitted.
 * In addition to getting the email with confirmation details,
 * users get this page with some of the values that they entered in the form
 * output as a way of confirmation.
 *
 * Notice the dpm($form_state) -- useful for finding the correct values.
 * Use those contained in $form_state['values']['submitted_tree']
 *
 */
function atwork_lsa_application_submit(&$form, &$form_state) {
  // Append the ministry ID to the form
  if(isset($form_state['values']['field_lsa_org']['und'][0]['value']) && $form_state['values']['field_lsa_org']['und'][0]['value']){
    $form_state['values']['field_lsa_ministry_id']['und'][0]['value'] = $form_state['values']['field_lsa_org']['und'][0]['value'];
  }
  $id = get_award_id_number($form_state);
  // Send to helper function that will sort out the award id number if it is not populated yet.
  if($form_state['values']['field_lsa_award_id']['und'][0]['value'] == 0 || $form_state['values']['field_lsa_award_id']['und'][0]['value'] == NULL){
    if(isset($id) && $id > 0){
      $form_state['values']['field_lsa_award_id']['und'][0]['value'] = $id;
    }
  } elseif ($form_state['values']['field_lsa_award_id']['und'][0]['value'] != $id){
    $form_state['values']['field_lsa_award_id']['und'][0]['value'] = $id;
  } elseif(!isset($form_state['values']['field_lsa_award_id']['und'][0]['value'])){
    $form_state['values']['field_lsa_award_id']['und'][0]['value'] = $id;
  }

  // Check if we have a middle name. If it is a single initial, add a . (if length is == 1 )
  if(isset($form_state['values']['field_lsa_middle_name']['und'][0]['value']) && $form_state['values']['field_lsa_middle_name']['und'][0]['value']){
    $middle_name = $form_state['values']['field_lsa_middle_name']['und'][0]['value'];
    // If they entered a single letter for their middle name, lets add a .
    if(strlen($middle_name) > 0 && strlen($middle_name) < 2){
      $middle_name .= ".";
    }
    // If we have a middle name, we need an extra space for the cert
    $middle_name .= " ";
  } else {
    $middle_name = '';
  }

  if(isset($form_state['values']['field_lsa_certificate_ordered']['und'][0]['value']) && $form_state['values']['field_lsa_certificate_ordered']['und'][0]['value'] == 1){
    $form_state['values']['field_lsa_25year_certificatename']['und'][0]['value'] = $form_state['values']['field_lsa_first_name']['und'][0]['value'] . " " . $middle_name . $form_state['values']['field_lsa_last_name']['und'][0]['value'];
  }
}

function get_award_id_number($form_state){
  $award = $form_state['values']['field_lsa_award']['und'][0]['value'];
  $awards = array(
      1 => "2016 Recipient - award received",
      2 => "25 - Choice TBC",
      3 => "25 - Framed Certificate and Cross 'Starry Blue' Ballpoint Pen",
      4 => "25 - Cross 'Starry Blue' Ballpoint Pen - No Certificate",
      5 => "25 - Framed Certificate and Leather Tablet Holder with Notepad",
      6 => "25 - Leather Tablet Holder with Notepad - No Certificate",
      7 => "25 - Framed Certificate and Sterling Silver White Pearl Earrings",
      8 => "25 - Sterling Silver White Pearl Earrings - No Certificate",
      9 => "25 - Framed Certificate and Leather Passport and Luggage Tag Set",
      10 => "25 - Leather Passport and Luggage Tag Set - No Certificate",
      11 => "25 - $75.00 PECSF Charitible Donation",
      12 => "30 - Choice TBC",
      13 => "30 - Colonnade Clock",
      14 => "30 - Appalachian Sherpa Blanket",
      15 => "30 - Roy Vickers Print - Tofino Sunrise",
      16 => "30 - Solid Sterling Drop Earrings",
      17 => "30 - $150.00 PECSF Charitible Donation",
      18 => "35 - Choice TBC",
      19 => "35 - Bushnell Compact Binoculars",
      20 => "35 - Hand-Blown Glass Vase by Robert Held",
      21 => "35 - Ladies' Gold Watch with Black Strap",
      22 => "35 - Ladies' Gold Watch with Brown Strap",
      23 => "35 - Ladies' Gold Watch with Gold Strap",
      24 => "35 - Ladies' Silver Watch with Silver Face",
      25 => "35 - Ladies' Silver Watch with Two-toned Face",
      26 => "35 - Men's Gold Watch with Black Strap",
      27 => "35 - Men's Gold Watch with Brown Strap",
      28 => "35 - Men's Gold Watch with Gold Strap",
      29 => "35 - Men's Silver Watch with Silver Face",
      30 => "35 - Men's Silver Watch with Two-toned Face",
      31 => "35 - Sterling Silver Bracelet - size A",
      32 => "35 - Sterling Silver Bracelet - size B",
      33 => "35 - $300.00 PECSF Charitible Donation",
      34 => "40 - Choice TBC",
      35 => "40 - Napolean Beauty Ergo Mantle Clock",
      36 => "40 - 14kt White Gold Diamond Stud Earrings",
      37 => "40 - Hand-Blown Glass Bowl by Robert Held",
      38 => "40 - Michaela Davidson Print - Sunbreakers",
      39 => "40 - 10kt White Gold Diamond Pendant and Chain",
      40 => "40 - $400.00 PECSF Charitible Donation",
      41 => "45 - Choice TBC",
      42 => "45 - $450.00 PECSF Charitible Donation",
      43 => "50 - Choice TBC",
      44 => "50 - $500.00 PECSF Charitible Donation",
      45 => "Award already Sent",
    );
  $award_id = array_search($award, $awards);
  return $award_id;
}
function atwork_lsa_node_view($node, $view_mode, $langcode) {
  if($node->type === 'lsa_pin_application'){
    $node->content['top_message'] = array(
      '#weight' => -10,
      '#markup' => '<h2>Thank you for your registration</h2>
      <em style="color: red; font-weight: bold;">Print and retain this confirmation for your records.</em>',
      );
    $node->content['bottom_message'] = array(
      '#weight' => 90,
      '#markup' => '<p class="feature_box_yellow" style="margin-top: 1em;">If you have any questions, please contact your <a href="/career/employee-appreciation/recognition-contacts">Ministry Recognition Contact</a>.' /*, or the corporate  contact at the BC Public Service Agency, <a href="mailto:Gillian.Kish@gov.bc.ca">Gillian.Kish@gov.bc.ca</a></p>' */,
      );
  }


  if ($node->type != 'lsa_application') {
    return;
  }

  $award_year = date("Y");
  if(isset($node->field_lsa_certificate_ordered['und'][0]['value']) && $node->field_lsa_certificate_ordered['und'][0]['value'] == 0){
    // Don't show certificate unless 25 year recipient has chosen to get one made
    drupal_add_css('.field-name-field-lsa-25year-certificatename {display:none; }', 'inline');
  } else {
    drupal_add_css('.field-name-field-lsa-25year-certificatename {display:block; }', 'inline');
  }
  // Adding in our third and final steps of instructions that isn't in the block - TODO: hide this until we are ready to allow users to alter their fields
  $node->content['field_lsa_retiring_thisyear']['#prefix'] = '<p> Step 3: Verify your contact information below is correct. If you make changes, click the “Save Change” button. If you are unable to make changes to certain fields, please notify us by email at <a href="mailto:longserviceawards@gov.bc.ca?subject=Change%20request">longserviceawards@gov.bc.ca</a>.</p><p>&nbsp</p>'; 
  $node->content['field_lsa_supervisor_email']['#suffix'] = '<strong style="color: red;"> <br /><p>Thank you for confirming your information.</p><p>Once all your changes are saved, please visit the <a href="https://gww.gov.bc.ca/career/long-service-awards/faq">Long Service Awards FAQs</a> for more information.</p></strong>';
  // Change the confirmation message to make more sense.
  if (isset($_SESSION['messages']['status']) && $_SESSION['messages']['status']){
    $first_name = $node->field_lsa_first_name['und'][0]['safe_value'];
    $last_name = $node->field_lsa_last_name['und'][0]['safe_value'];
    if(isset($node->field_lsa_middle_name['und'][0]['safe_value']) && $node->field_lsa_middle_name['und'][0]['safe_value']) {
      $full_name = $first_name . ' ' . $node->field_lsa_middle_name['und'][0]['safe_value'] . ' ' . $last_name;
    } else {
      $full_name = $first_name . ' ' . $last_name;
    }
    $message_check = 'Long Service Awards Application <em class="placeholder">' . $full_name . '</em> has been created.';
    if (in_array($message_check, $_SESSION['messages']['status'])){
      $i = array_search($message_check, $_SESSION['messages']['status']);
      $_SESSION['messages']['status'][$i] = $full_name .'\'s Long Service Award registration has been received';
    }
  }
}

function atwork_lsa_views_pre_view(&$view, &$display_id, &$args) {
  global $user;
  if ($view->name == 'content' &&
      $display_id == 'lsa' &&
      (in_array('lsa admin', $user->roles) ||
      in_array('administrator', $user->roles))) {

    $view_filters = $view->display_handler->get_option('filters');
    unset($view_filters['uid_current']);
    $view->display_handler->override_option('filters', $view_filters);

  }
  if ($view->name == 'content' &&
      $display_id == 'page_2' &&
      (in_array('lsa admin', $user->roles) ||
      in_array('administrator', $user->roles))) {

    $view_filters = $view->display_handler->get_option('filters');
    unset($view_filters['uid_current']);
    $view->display_handler->override_option('filters', $view_filters);

  }
}

/**
 * Implements hook_insert();
 *
 * Send emails on successfult application creation
 */
function atwork_lsa_node_insert($node) {
  //if ($node->type != 'lsa_application' || $node->type != 'lsa_pin_application') {
    //return;
  //}

  if($node->type == 'lsa_application'){
    $lang = $node->language;

    require_once(drupal_get_path('module', 'atwork_lsa') . '/atwork_lsa.mail.inc');

    // applicant email
      $params = array(
        'subject' => $applicant_subject,
        'body' => $applicant_body,
      );
      drupal_mail('atwork_mail', 'atwork_mail_default', $applicant_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));

    // supervisor
    $params = array(
      'subject' => $supervisor_subject,
      'body' => $supervisor_body,
    );

    drupal_mail('atwork_mail', 'atwork_mail_default', $supervisor_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
  }

  if($node->type == 'lsa_pin_application'){
    $lang = $node->language;

    require_once(drupal_get_path('module', 'atwork_lsa') . '/atwork_lsa_pin.mail.inc');

    // Only to specific ministries
    $check_min = array(
      1, //ABR
      6, // ED
      2, // Aved
      11, // health
      40, // Environmental assessment office
      64, // Pub guardian and trustee
      );


    // applicant email, only sent if applicant has applied for themselves
    if($node->field_lsa_registerer['und'][0]['value'] == 1 && !in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min)){
      $params = array(
        'subject' => $applicant_subject,
        'body' => $applicant_body,
      );
      drupal_mail('atwork_mail', 'atwork_mail_default', $applicant_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
    }
    if($node->field_lsa_registerer['und'][0]['value'] == 1 && in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min)){
      $params = array(
        'subject' => $applicant_subject_special_condition,
        'body' => $applicant_body_special_condition,
      );

      drupal_mail('atwork_mail', 'atwork_mail_default', $applicant_to_special_condition, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));

    }


    // supervisor
    if(isset($node->field_lsa_pin_ministry_org['und'][0]['value']) && $node->field_lsa_pin_ministry_org['und'][0]['value'] && !in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min)){
      $params = array(
        'subject' => $supervisor_subject,
        'body' => $supervisor_body,
      );
      drupal_mail('atwork_mail', 'atwork_mail_default', $supervisor_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
    }

    if(isset($node->field_lsa_registerer['und'][0]['value']) && $node->field_lsa_registerer['und'][0]['value'] == 2 && in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min)){
      $params = array(
        'subject' => $supervisor_subject_special_condition,
        'body' => $supervisor_body_special_condition,
      );
      drupal_mail('atwork_mail', 'atwork_mail_default', $supervisor_to_special_condition, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
    }

    // Ministry Rep
    if(isset($node->field_lsa_ministry_rep_email['und'][0]['value']) && $node->field_lsa_ministry_rep_email['und'][0]['value'] && !in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min)){
      $params = array(
        'subject' => $ministry_rep_subject,
        'body' => $ministry_rep_body,
        );
      drupal_mail('atwork_mail', 'atwork_mail_default', $ministry_rep_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
    }

    if(isset($node->field_lsa_ministry_rep_email['und'][0]['value']) && $node->field_lsa_ministry_rep_email['und'][0]['value'] && in_array($node->field_lsa_pin_ministry_org['und'][0]['value'], $check_min) && $node->field_lsa_registerer['und'][0]['value'] == 3){
      $params = array(
        'subject' =>  $supervisor_subject_special_condition,
        'body'=> $supervisor_body_special_condition,
        );
       drupal_mail('atwork_mail', 'atwork_mail_default', $ministry_rep_to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
    }
  }
}

/**
 * Implements hook_form_alter();
 */
function atwork_lsa_form_alter(&$form, &$form_state, $form_id) {
  global $user;
// For LSA admin, allows to sort on whether a user has entered input.
  if($form['#id'] == 'views-exposed-form-lsa-admin-page-2'){
    if(isset($form['field_lsa_notes_value_op']['#options'])){
      // foreach here to remove all the fields we don't need
      foreach($form['field_lsa_notes_value_op']['#options'] as $key => $value){
        if($value == "Is empty (NULL)"){
          $form['field_lsa_notes_value_op']['#options'][$key] = "Is empty";
          continue;
        }
        if($value == "Is not empty (NOT NULL)"){
          $form['field_lsa_notes_value_op']['#options'][$key] = "Is not empty";
          continue;
        }
        unset($form['field_lsa_notes_value_op']['#options'][$key]);
      }
      // Also, unhide the drop down which seems to want to hide for some reason.
      drupal_add_css("#edit-field-lsa-notes-value-wrapper {display:block !important; }", 'inline');
      // But hide the weird textbox
      drupal_add_css("#edit-field-lsa-notes-value {display:none; }", 'inline');
    }
    //dpm($form);
  }

  if ($form['#id'] == 'views-exposed-form-content-lsa') {

    if (isset($form['#info']['filter-created']['label'])) {
      $form['#info']['filter-created']['label'] = '';
    }
    if (isset($form['#info']['filter-timestamp']['label'])) {
      $form['#info']['filter-timestamp']['label'] = '';
    }

    $form['created_op']['#default_value'] = '<';
    foreach (array('<=', '=', '!=', '>=', 'empty', 'not empty', 'regular_expression') as $op) {
      unset($form['created_op']['#options'][$op]);
    }

    $form['created']['value']['#title'] = '';
    $form['created']['value']['#type'] = 'date_popup';
    $form['created']['value']['#date_format'] = 'Y-m-d';

    $form['created']['min']['#title'] = t('Start Date');
    $form['created']['min']['#type'] = 'date_popup';
    $form['created']['min']['#date_format'] = 'Y-m-d';


    $form['created']['max']['#title'] = t('End Date');
    $form['created']['max']['#type'] = 'date_popup';
    $form['created']['max']['#date_format'] = 'Y-m-d';

  }
  if ($form['#id'] === 'lsa-pin-application-node-form'){
    drupal_set_title('Service Pin Application');
    drupal_set_breadcrumb(array());
  }

  if ($form_id === 'lsa_application_node_form' ) {
   //dpm($form);

  }

}




/**
 * implements hook_form_FORM_ID_alter
 */
function atwork_lsa_form_lsa_pin_application_node_form_alter(&$form, $form_state) {
  global $user;
  $user = user_load($user->uid);
  drupal_add_js(drupal_get_path('module', 'atwork_lsa').'/js_atwork_lsa_pin_ajax.js');
  //drupal_add_js(drupal_get_path('module', 'atwork_lsa').'/js_atwork_lsa_pin.js');

  if(isset($form['field_lsa_work_phone']['und'][0]['value']['#title']) && $form['field_lsa_work_phone']['und'][0]['value']['#title']){
    $form['field_lsa_work_phone']['und'][0]['value']['#title'] = t('Supervisor Phone Number');
  }
  if(isset($form['field_lsa_work_phone_ext']['und'][0]['value']['#title']) && $form['field_lsa_work_phone_ext']['und'][0]['value']['#title']){
    $form['field_lsa_work_phone_ext']['und'][0]['value']['#title'] = t('Supervisor Phone Ext');
  }
  $form['#validate'][] = 'atwork_lsa_pin_application_validate';
  $form['actions']['submit']['#value'] = t('Submit this Service Pin request');

/*
  // skip defaults for admins who are entering for others
  if (in_array('lsa admin', $user->roles) || in_array('recognition contact', $user->roles)) {

    return;
  }



    // if new application check if users already submitted one
  if (!isset($form['#node']->nid) || !$form['#node']->nid) {
    $exists = db_select('node', 'n')
      ->fields('n', array('nid'))
      ->condition('n.uid', $user->uid)
      ->condition('n.type', 'lsa_pin_application')
      ->execute()
      ->fetchAssoc();
    if (isset($exists['nid']) && $exists['nid']) {
      drupal_goto('career/long-service-awards-pin/applications/' . $exists['nid']);
    }
  }



  // We need to autofill some text boxes
  //$form['field_lsa_pin_employee_number'][$form['field_lsa_pin_employee_number']['#language']][0]['value']['#default_value'] = atwork_ldap_get_employee_number($user);
  $field_gal_first_name = field_get_items('user', $user, 'field_gal_first_name');
  $field_gal_last_name = field_get_items('user', $user, 'field_gal_last_name');
  $field_gal_phone_number = field_get_items('user', $user, 'field_gal_phone_number');
  $field_gal_branch = field_get_items('user',$user,'field_gal_branch');
  $field_gal_work_group = field_get_items('user',$user, 'field_gal_work_group');
  $field_gal_address = field_get_items('user',$user, 'field_gal_address');
  $field_gal_postal_code = field_get_items('user',$user,'field_gal_postal_code');
  $field_gal_city = field_get_items('user',$user,'field_gal_city');

  if (isset($field_gal_first_name[0]['value']) && $field_gal_first_name[0]['value']) {
    $form['field_lsa_pin_first_name'][$form['field_lsa_pin_first_name']['#language']][0]['value']['#default_value'] = $field_gal_first_name[0]['value'];
  }

  if (isset($field_gal_last_name[0]['value']) && $field_gal_last_name[0]['value']) {
    $form['field_lsa_pin_last_name'][$form['field_lsa_pin_last_name']['#language']][0]['value']['#default_value'] = $field_gal_last_name[0]['value'];
  }

  if(isset($field_gal_branch[0]['value']) && $field_gal_branch[0]['value']){
    $form['field_lsa_branch_department'][$form['field_lsa_branch_department']['#language']][0]['value']['#default_value'] = $field_gal_branch[0]['value'];
  }

  if(isset($field_gal_address[0]['value']) && $field_gal_address[0]['value']){
    $form['field_lsa_office_address'][$form['field_lsa_office_address']['#language']][0]['value']['#default_value'] = $field_gal_address[0]['value'];
  }

  if(isset($field_gal_postal_code[0]['value']) && $field_gal_postal_code[0]['value']){
    $form['field_lsa_office_postal_code'][$form['field_lsa_office_postal_code']['#language']][0]['value']['#default_value'] = $field_gal_postal_code[0]['value'];
  }

  if(isset($field_gal_city[0]['value']) && $field_gal_city[0]['value']) {
    $form['field_lsa_office_city'][$form['field_lsa_office_city']['#language']][0]['value']['#default_value'] = $field_gal_city[0]['value'];
  }

  $form['field_lsa_email'][$form['field_lsa_email']['#language']][0]['email']['#default_value'] = $user->mail;
*/
}

/**
 * implements hook_mmenu_alter()
 * this is used to redirect users after LSA alteration term has ended.
 * TODO = turn off before next season of LSA applications
 */
function atwork_lsa_menu_alter(&$items){
  $items['node/%node']['page callback'] = 'atwork_lsa_node_page_view';
}


/**
 * Implements hook_node_page_view
 */

function atwork_lsa_node_page_view($node) {
  global $user;

  /**
   * For some strange reason, pin form does not show retro milestones
   * @var [type]
   */

  if($node->type == 'lsa_pin_application'){

    $all_years = array();
    // If we have past years
    if(isset($node->field_lsa_previous_service_miles['und']) && $node->field_lsa_previous_service_miles['und']){
      foreach($node->field_lsa_previous_service_miles['und'] as $key=>$year){
        $all_years[] = $year['value'];
      }
    }
    // If we have a current year #
    if(isset($node->field_lsa_pin_service_milestone['und'][0]) && $node->field_lsa_pin_service_milestone['und'][0]){
      $string_year = $node->field_lsa_pin_service_milestone['und'][0]['value'];
      $all_years[] =  $string_year;
    }
    // Sort them
    sort($all_years);
    // Make sure they did not use the same year more than once
    $all_years = array_unique($all_years);
    // Now make a string
    $return_string_year = '';
    $years = count($all_years);
    if($years == 1){
      $return_string_year = $all_years[0] . " year";
    } elseif($years == 2){
      $return_string_year = $all_years[0] . " and " . $all_years[1] . " years";
    } else {
      // Put it in a string all nice like
      $return_string_year = implode(", ", $all_years);
      // Need to put an "and" in at the end of this string, removing the last comma
      $return_string_year = strrev(implode(strrev(' and'), explode(strrev(','), strrev($return_string_year), 2)));
      $return_string_year .= " years";
    }
    // Change what shows on page
    if(isset($node->field_lsa_pin_service_milestone['und'][0]['value']) && $node->field_lsa_pin_service_milestone['und'][0]['value']){
      $node->field_lsa_pin_service_milestone['und'][0]['value'] = $return_string_year ;
    } else {
      // build array ourselves
      $node->field_lsa_pin_service_milestone = array(
        'und' => array(
          0 => array(
            'value' => $return_string_year,
            'format' => NULL,
            'safe_value' => $return_string_year,
            ),
          ),
        );
    }
    //This is not sent by reference so we must return it.
    return node_page_view($node);
  }



  // Redirect any other user who tries to access an lsa application node
  if($node->type == 'lsa_application'){
    // skip redirect for admins and lsa_admins
    if (in_array('lsa admin', $user->roles) || in_array('administrator', $user->roles)) {
      return node_page_view($node);
    }
    // Give contact details
   //drupal_set_message('The LSA application period has come to an end. If you have any questions or concerns, please contact the Jenny Pescod at (250-356-7916) or email the <a href="mailto:longserviceawards@gov.bc.ca"> Long Service Award inbox </a> ', 'status');
    // Redirect to 403
    //drupal_goto('r4032login');

    return node_page_view($node);


  }
  else {
    // Not an lsa_application node, continue
    return node_page_view($node);
  }
}


/**
 * Implements hook_menu();
 * AJAX integration for new functionality
 */

function atwork_lsa_menu() {
  $items['atwork_lsa_pin_form/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'atwork_lsa_pin_page_callback',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
    //'delivery callback' => 'atwork_lsa_pin_delivery_callback',
  );
  return $items;
}

/**
 * Callback to determing who is filling out the pin form, and sending an array back to use to hide/show/auto-pop specific fields.
 * @param  string $choice   passes the choice that the user selects, which alters the way the form appears/populates.
 */
function atwork_lsa_pin_page_callback($choice) {
  $return_array = array();
  global $user;
  $current_user = user_load($user->uid);

  // skip defaults for admins who are entering for others
 // if (in_array('lsa admin', $current_user->roles) || in_array('recognition contact', $current_user->roles)) {
 //   die();
 // }
  if($choice == 1){
    //If this is a user, check to see if they have already submitted an application

    // We need to autofill some text boxes
    $field_gal_employee_number = field_get_items('user', $current_user, 'field_gal_employee_number');
    $field_gal_first_name = field_get_items('user', $current_user, 'field_gal_first_name');
    $field_gal_last_name = field_get_items('user', $current_user, 'field_gal_last_name');
    $field_gal_branch = field_get_items('user',$current_user,'field_gal_branch');
    $field_gal_work_group = field_get_items('user',$current_user, 'field_gal_work_group');
    $field_gal_city = field_get_items('user',$current_user,'field_gal_city');
    $field_gal_phone_number = field_get_items('user', $current_user, 'field_gal_phone_number');
    $field_email = $current_user->mail;
    $return_array = array(
      'choice' => 1,
      'employee_number' => $field_gal_employee_number,
      'first_name' => $field_gal_first_name,
      'last_name' => $field_gal_last_name,
      'branch' => $field_gal_branch,
      'work_group' => $field_gal_work_group,
      'email' => $field_email,
      'phone' => $field_gal_phone_number,
    );
    drupal_json_output($return_array);
    die();
  } elseif($choice == 2) {
    // This is a supervisor, so we can fill in some info for them
    $field_gal_first_name = field_get_items('user', $current_user, 'field_gal_first_name');
    $field_gal_last_name = field_get_items('user', $current_user, 'field_gal_last_name');
    $field_gal_phone_number = field_get_items('user', $current_user, 'field_gal_phone_number');
    $field_gal_address = field_get_items('user',$current_user, 'field_gal_address');
    $field_gal_postal_code = field_get_items('user',$current_user,'field_gal_postal_code');
    $field_gal_city = field_get_items('user',$current_user,'field_gal_city');
    $field_email = $current_user->mail;

    $return_array = array(
      'choice' => 2,
      'first_name' => $field_gal_first_name,
      'last_name' => $field_gal_last_name,
      'phone_number' => $field_gal_phone_number,
      'address' => $field_gal_address,
      'postal_code' => $field_gal_postal_code,
      'city' => $field_gal_city,
      'email' => $field_email,
    );

    drupal_json_output($return_array);
    die();
  } elseif($choice == 3) {
    $return_array = array(
      'choice' => 3,
    );
    drupal_json_output($return_array);
    die();
  }

  // Choice is 0 or does not have a value - so hide everything adn set select to 0
  $return_array = array(
    'choice' => 0,
  );
  drupal_json_output($return_array);
  die();

}

/*
function atwork_lsa_in_delivery_callback($page_callback_result) {
  print $page_callback_result;

}
*/
