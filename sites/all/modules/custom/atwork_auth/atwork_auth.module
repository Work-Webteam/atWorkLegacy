<?php
/*
 * Implementation if hook_init()
 *
 * This is the heart of the module so lets put it first :)
 *
 */
function atwork_auth_init() {
  global $user;

 // rss.xml bypasses siteminder so can abort now
  if($_GET['q'] == 'rss.xml') return;

  // this should only happen if site isn't accessed through reverse proxy
  // let's log it if this happens
  if(isset($_SERVER['USER'])) {
    if ($_SERVER['USER'] != 'apache' && (!isset($_SERVER['HTTP_SM_USER']) || !isset($_SERVER['HTTP_SMGOV_USERGUID']))) {
      if (variable_get('atwork_auth_watchdog_nosm', 1)) {
        watchdog('atwork_auth', t('A user connected without going through siteminder: ' . print_r($_SERVER, TRUE)));
      }
      return;
    }
  }

  // for consistency always use lowercase IDIRs in drupal

  if(strpos($_SERVER['HTTP_SM_USER'], 'IDIR') !== false ) {
    $sm_user = str_replace("idir\\", "", strtolower($_SERVER['HTTP_SM_USER']));
  }
  else {
    $sm_user = strtolower($_SERVER['HTTP_SM_USER']);
  }
  $sm_guid = $_SERVER['HTTP_SMGOV_USERGUID'];
  // user is already logged in, no use loading them
  if ($user->name && $user->name == $sm_user ) {
    return;
  }
  // abort for special IDIRs.
  // these could be search crawlers who shouldn't be logged in.
  if (_atwork_auth_excluded_idirs($sm_user)) {
    return;
  }

  // support masquerading, don't proceed if a user is currently masquerading.
  if (isset($user->name) && isset($user->sid)) {
    if (module_exists('masquerade') && $sm_user != $user->name) {
      $true_uid = db_select('masquerade', 'm')
        ->condition('sid', $user->sid)
        ->condition('uid_as', $user->uid)
        ->fields('m', array('uid_from'))
        ->execute()
        ->fetchAssoc();

      if ($true_uid) {
        // user is masquerading, abort now
        return;
      }
    }
  }

  // now lets load the expected uid and guid
  $uid = db_select('atwork_auth', 'a')
    ->fields('a', array('uid'))
    ->condition('a.guid', $sm_guid)
    ->execute()
    ->fetchAssoc();

  // if no guid was found there is no account yet.
  if (empty($uid)) {
    // this is now all handled by idir script - we should never update/remove or add a user here.
    drupal_set_message(t("Something has gone wrong, please try again or contact the @Work team"), 'error');
    drupal_exit();
    return;
  }

  // Log user in.
  $form_state['uid'] = $uid['uid'];
  user_login_submit(array(), $form_state);
  drupal_goto('<front>');
}


/**
 * Implementation of hook_menu
 *
 */
function atwork_auth_menu() {
  $links['admin/config/atwork/auth'] =  array(
    'title' => t('Authorization') ,
    'description' => t('Manage Authorization Settings') ,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atwork_auth_settings_form'),
    'access arguments' => array('access administration pages'),
    'file' => 'atwork_auth.admin.inc',
    'file path' => drupal_get_path('module', 'atwork_auth'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $links;
}

/*
 * Check if idir is on a list of exclusions
 * These could be robots/crawlers
 * Return TRUE if idir is exluded - this will prevent them from being logged on
 *
 */
function _atwork_auth_excluded_idirs($idir) {
  if (!$idir) {
    return TRUE;
  }

  if (variable_get('atwork_auth_excluded_idirs', '')) {
    $string = str_replace(array("\r\n", "\n", "\r"), ',', trim(variable_get('atwork_auth_excluded_idirs', '')));
    $string = str_replace(' ', '', $string);

    $excluded_idirs = explode(',', $string);
    if (in_array(strtolower($idir), $excluded_idirs)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
  * Implements hook_user_load()
  *
  * Add our GUID to users when they are loaded
  **/
function atwork_auth_user_load($users) {
  $result = db_query('SELECT uid, guid FROM {atwork_auth} WHERE uid IN (:uids)', array(':uids' => array_keys($users)));
  foreach ($result as $record) {
    $users[$record->uid]->guid = $record->guid;
  }
}
