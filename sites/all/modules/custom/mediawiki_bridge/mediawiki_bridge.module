<?php

/*
 * Helper Function
 * 
 * Establish connection to mediawiki api
 */
function _mediawiki_bridge_login() {
  static $token = 0;
  
  if ($token) {
    return $token;
  }
  
  $mediawiki_login = _mediawiki_bridge_api_call('login', array(
    'lgname' => variable_get('mediawiki_bridge_user', ''),
    'lgpassword' => variable_get('mediawiki_bridge_pass', ''),
  ));
  
  if ($mediawiki_login['login']['result'] == 'NeedToken' && isset($mediawiki_login['login']['token'])) {
    $token_login = _mediawiki_bridge_api_call('login', array(
      'lgname' => 'admin',
      'lgpassword' => 'e46pGMVm',
      'lgtoken' => $mediawiki_login['login']['token'],
    ));
    
    if ($token_login['login']['result'] == 'Success') {
      $edit_token_call = _mediawiki_bridge_api_call('query', array(
        'prop' => 'info',
        'intoken' => 'edit',
        'titles' => 'Sandbox',
      ));
      
      if (isset($edit_token_call['query']['pages'][-1]['edittoken'])) {
        $token = $edit_token_call['query']['pages'][-1]['edittoken'];
        return $token;
      }
    }
  }
  
  watchdog('mediawiki_bridge', t('Login failed. The response was: !response', array('!response' => print_r($result, 1))));
  return $token;
}

/*
 * Helper Function
 * 
 * Return the URL of a given title
 */
function _mediawiki_bridge_title_to_url($title) {
  $title = str_replace('_', ' ', $title);
  $result = db_query("SELECT nid FROM {node} WHERE title = :title AND type = 'wiki'", array(':title' => $title))->fetch();
  if (isset($result->nid)) {
    return url('node/' . $result->nid);
  }
}

/*
 * Helper Function
 * 
 * Retreive the pageid associated with an nid
 */
function _mediawiki_bridge_exists($nid) {
  $result = db_query("SELECT pageid FROM {mediawiki_bridge} WHERE nid = :nid", array(':nid' => $nid))->fetch();
  return isset($result->pageid) ? $result->pageid : 0;
}

/*
 * Helper Function
 * 
 * Add a new node to the mediawiki install
 */
function _mediawiki_bridge_add($node) {
  if (_mediawiki_bridge_login()) {
    $params = array(
      'title' => $node->title,
      'text' => $node->body[$node->language][0]['value'],
      'token' => _mediawiki_bridge_login(),
    );
    $result = _mediawiki_bridge_api_call('edit', $params);
    if (isset($result['edit']['pageid'])) {
      return $result['edit']['pageid'];
    }
    else {
      watchdog('mediawiki_bridge', t('An add failed. The response was: !response', array('!response' => print_r($result, 1))));
    }
  }
}

/*
 * Helper Function
 * 
 * Update a page on the mediawiki install
 */
function _mediawiki_bridge_edit($text, $pageid, $section = NULL) {
  if (_mediawiki_bridge_login()) {
    $params = array(
      'pageid' => $pageid,
      'text' => $text,
    );
    
    if ($section) {
      $params['section'] = $section;
    }
    
    $params['token'] = _mediawiki_bridge_login();
    
    $result = _mediawiki_bridge_api_call('edit', $params);
    if (!isset($result['edit']['pageid'])) {
      watchdog('mediawiki_bridge', t('An edit failed. The response was: !response', array('!response' => print_r($result, 1))));
    }
  }
  return 0;
}

/*
 * Helper Function
 * 
 * Delete a page from the mediawiki install
 */
function _mediawiki_bridge_delete($pageid) {
  if (_mediawiki_bridge_login()) {
    $params = array(
      'pageid' => $pageid,
      'token' => _mediawiki_bridge_login(),
    );
    
    $result = _mediawiki_bridge_api_call('delete', $params);
    
    if (!isset($result['delete'])) {
      watchdog('mediawiki_bridge', t('A deletion failed. The response was: !response', array('!response' => print_r($result, 1))));
    }
  }
}

/*
 * Helper Function
 * 
 * Retreive a section of a page from the mediawiki install
 */
function _mediawiki_bridge_get_page($pageid, $section_id = NULL) {
  if (_mediawiki_bridge_login()) {
    $params = array(
      'pageids' => $pageid,
      'prop' => 'revisions',
      'rvlimit' => 1,
      'rvprop' => 'content'
    );
    
    if ($section_id) {
      $params['rvsection'] = ($section_id);
    }
    
    $result = _mediawiki_bridge_api_call('query', $params);
    if (isset($result['query']['pages'][$pageid]['revisions'][0]['*'])) {
      return $result['query']['pages'][$pageid]['revisions'][0]['*'];
    }
    watchdog('mediawiki_bridge', t('A section query failed. The response was: !response', array('!response' => print_r($result, 1))));
  }
  return '';
}

/*
 * Helper Function
 * 
 * Retreive the rendered body of a mediawiki page
 */
function _mediawiki_bridge_parse($pageid, $section_id = NULL, $text = '') {
  if (_mediawiki_bridge_login()) {
    $params = array();
    
    if ($pageid) {
      $params['pageid'] = $pageid;
    }
    
    if ($text) {
      $params['text'] = $text;
    }
    
    if ($section_id) {
      $params['section'] = ($section_id);
    }
    
    $result = _mediawiki_bridge_api_call('parse', $params);
    if (isset($result['parse']['text']['*'])) {
      return $result['parse']['text']['*'];
    }
    watchdog('mediawiki_bridge', t('A parse request failed. The response was: !response', array('!response' => print_r($result, 1))));
  }
}

/*
 * Helper Function
 * 
 * Build and submit an API call
 */
function _mediawiki_bridge_api_call($action, $params) {
  $mediawiki_url = 'http://' . variable_get('mediawiki_bridge_url', '') . '/api.php';
  
  // Query
  $query = array(
    'action' => $action,
    'format' => 'php',
  );

  foreach ($params as $key => $param) {
    $query[$key] = $param;
  }
  
  // Init curl request
  $ch = curl_init($mediawiki_url);

  curl_setopt($ch, CURLOPT_HTTPHEADER, array('Content-Type: application/x-www-form-urlencoded;charset=UTF-8', 'Expect:'));
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_USERAGENT, "Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)");
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_COOKIEJAR, '/tmp/mediawiki_bridge_cookies.txt');
  curl_setopt($ch, CURLOPT_COOKIEFILE, '/tmp/mediawiki_bridge_cookies.txt');
  curl_setopt($ch, CURLOPT_POSTFIELDS, drupal_http_build_query($query));

  // Execute
  $res = curl_exec($ch);

  curl_close($ch);

  // Check the result is valid
  if ($res) {
    $data = unserialize($res);
    return ($data);
  }
  else {
    return array();
  }
}

/*
 * implementation of hook_menu
 */
function mediawiki_bridge_menu() {
  $items['admin/config/mediawiki_bridge'] =  array(
    'title' => t('MediaWiki Bridge') , 
    'description' => t('MediaWiki Bridge Settings') ,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediawiki_bridge_settings_form'),
    'access arguments' => array('access administration pages'), 
    'file' => 'mediawiki_bridge.admin.inc',
    'file path' => drupal_get_path('module', 'mediawiki_bridge'),
  );
  
  $items['node/%node/edit/%'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mediawiki_bridge_section_form', 1, 3), //url is in form of node/1373/edit/0
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'type' => MENU_CALLBACK
  );
 
  return $items;
}

/*
 * Callback for #after_build to enforce 
 * the filter format of 'wiki'
 */
//function _mediawiki_bridge_edit_section_afterbuild($form) {
//  if (isset($form['format']['format']['#options'])) {
//    foreach ($form['format']['format']['#options'] as $filter => $title) {
//      if ($filter != 'wiki') {
//        unset($form['format']['guidelines'][$filter]);
//      }
//    }
//    
//    $form['format']['format']['#access'] = FALSE;
//    unset($form['format']['help']);
//  }
//  
//  return $form;
//}

/**
 * A form for a secific section of the node/page
 */
function mediawiki_bridge_section_form($form, $form_state, $node, $section_id) {
  
  if (isset($_GET['title'])) {
    drupal_set_title(t('Edit Section: ' . check_plain($_GET['title'])));
    $form['section_title'] = array(
      '#type' => 'hidden',
      '#value' => check_plain($_GET['title']),
    );
  }
  
  if (!isset($node->mediawiki_pageid)) {
    $form['section_message'] = array(
      '#type' => 'item', 
      '#markup' => t('Couldn\'t find the requested section please !link', array('!link' => l(t('Go back'), 'node/' . $node->nid))),
    );
    return $form;
  }
  
  $section_text = _mediawiki_bridge_get_page($node->mediawiki_pageid, $section_id);
  
  if (!$section_text) {
    $form['section_message'] = array(
      '#type' => 'item', 
      '#markup' => t('Couldn\'t find the requested section please !link', array('!link' => l(t('Go back'), 'node/' . $node->nid))),
    );
    return $form;
  }
  
  $form['section_message'] = array(
    '#type' => 'item', 
    '#markup' => t('or go back to !link', array('!link' => l($node->title, 'node/' . $node->nid))),
  );

  $form['section'] = array(
    '#title' => '',
    '#type' => 'text_format',
    '#format' => 'wiki',
    '#rows' => 20,
    '#default_value' => $section_text,
  );
  
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );

  $form['#node'] = $node;
  $form['#section_id'] = $section_id;

  return $form;
}


/*
 * Submit Callback for mediawiki_bridge_section_form
 * 
 * Display a part of the node for editing (the section)
 * then combine and save the whole shebang
 */
function mediawiki_bridge_section_form_submit($form, &$form_state) {
  
  $node = $form['#node'];
  $section_id = $form['#section_id'];
  
  if ($node->mediawiki_pageid) {
    // update the page on mediawiki first
    // we are only updating the section
    _mediawiki_bridge_edit($form_state['values']['section']['value'], $node->mediawiki_pageid, $section_id);
    // now get the result of the entire page
    $text = _mediawiki_bridge_get_page($node->mediawiki_pageid);
    // now save the node and everything is synced
    $node->body[$node->language][0]['value'] = $text;
    $node->revision = TRUE;
    node_save($node);
    $t_args = array('@type' => $node->type, '%title' => $node->title);
    drupal_set_message(t('@type %title has been updated.', $t_args));
    
    //dpm($form_state);
    if (isset($form_state['values']['section_title'])) {
      $form_state['redirect'] = array(
        'node/' . $node->nid,
        array(
          'fragment' => $form_state['values']['section_title'],
        ),    
      );
    }
    else {
      $form_state['redirect'] = 'node/' . $node->nid;
    }
  }
}
/*
 * Implementation of hook_form_alter()
 * 
 * Remove the title if node already exists
 * 
 * Add a validation callback
 */
function mediawiki_bridge_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'wiki_node_form') {
    // not supporting teasers yet
    if (isset($form['body'][$form['body']['#language']][0]['summary'])) {
      unset($form['body'][$form['body']['#language']][0]['summary']);
    }
    
    if ($form['nid']['#value']) {
      $form['title']['#access'] = FALSE;
    }
    
    if (variable_get('mediawiki_bridge_wikieditor', '')) {
      
    }
    
    $form['#validate'][] = 'mediawiki_bridge_form_validate';
  }
}

/*
 * Validation Callback for wiki_node_form
 * 
 * Check if the given title is available
 */
function mediawiki_bridge_form_validate($form, &$form_state) {
  // check title on new nodes
  if (variable_get('mediawiki_bridge_title', 1) && !$form_state['values']['nid'] && $form_state['values']['title']) {
    $title = db_select('node', 'n')
      ->condition('title', $form_state['values']['title'])
      ->fields('n', array('nid'))
      ->execute()
      ->fetchAssoc();
    
    if ($title) {
      $node = node_load($title['nid']);
      $message = t('A wiki entry by this name !exists.', array(
        '!exists' => l(t('already exists'), 'node/' . $node->nid),
      ));
      form_set_error('title', $message);
    }
  }
}

/*
 * Implementation of hook_node_update()
 * 
 * Make changes on the mediawiki install
 * 
 * Or add mediawiki pageid-nid association
 */
function mediawiki_bridge_node_update($node) {
  if ($node->type == 'wiki') {
    if (isset($node->mediawiki_pageid)) {
      _mediawiki_bridge_edit($node->body[$node->language][0]['value'], $node->mediawiki_pageid);
    }
    else {
      $pageid = _mediawiki_bridge_add($node);
      if ($pageid) {
        db_insert('mediawiki_bridge')
          ->fields(array(
            'nid' => $node->nid,
            'pageid' => $pageid,
          ))
          ->execute();
      }
    }
  }
}


/*
 * Implementation of hook_node_view
 * 
 * Replace body with rendered wiki format from mediawiki install
 * 
 * Convert section-edit links to work with drupal
 * 
 * Convert internal mediawiki links
 */
function mediawiki_bridge_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'wiki' || !isset($node->mediawiki_pageid)) {
    return;
  }
  
  if ($view_mode == 'teaser') {
    $node->content['body'][0]['#markup'] = '';
    return;
  }
  
  if (arg(2) == 'revisions') {
    $node->content['body'][0]['#markup'] = _mediawiki_bridge_parse(0, 0, $node->content['body'][0]['#markup']);
  }
  else {
    $node->content['body'][0]['#markup'] = _mediawiki_bridge_parse($node->mediawiki_pageid);
  }
  
  $mediawiki_url_parts = explode('/', variable_get('mediawiki_bridge_url', ''));
  unset($mediawiki_url_parts[0]);
  $mediawiki_path = implode('/', $mediawiki_url_parts);
  
  $dom =  filter_dom_load($node->content['body'][0]['#markup']);
  
  $xpath = new DOMXPath($dom);
  
  // convert [[wiki links]]
  foreach ($xpath->query("//a[contains(@href,'$mediawiki_path')]") as $link) {
    parse_str(str_replace('/' . $mediawiki_path . '/index.php?', '', $link->getAttribute('href')), $output);
    
    // convert section edit links
    if (isset($output['title']) && isset($output['action'])) {
      if (isset($output['section'])) {
        if ($output['action'] == 'edit') {
          $title = trim(str_replace('Edit section:', '', $link->getAttribute('title')));
          $link->setAttribute('href', '/node/' . $node->nid . '/edit/' . ($output['section']) . '?title=' . urldecode($title));
        }
      }

      // convert red links
      if (isset($output['redlink'])) {
        if ($output['action'] == 'edit') {
          //dpm($link->getAttribute('title'));
          $title = trim(str_replace(' (page does not exist)', '', $link->getAttribute('title')));
          $link->setAttribute('href', '/node/add/wiki/?edit[title]=' . urldecode($title));
        }
      }
    }
    // existing internal links or images
    else {
      $href = $link->getAttribute('href');
      if (strpos($href, $mediawiki_path . '/index.php/File:')) {
        $filename = str_replace('/' . $mediawiki_path . '/index.php/File:', '', $href);
        $link->setAttribute('href', '/sites/default/files/wiki/userimage/' . $filename);
        $link->setAttribute('class', 'colorbox');
      }
      else {
        $title = str_replace('/' . $mediawiki_path . '/index.php/', '', $href);
        if ($title && !strpos(' ' . $title, '/')) {
          $link->setAttribute('href', _mediawiki_bridge_title_to_url($title));
        }
      }
    }
  }
  
  // convert image links
  
  
  
//  foreach ($xpath->query("//a[@href = '/" . drupal_get_path_alias($_GET['q']) . "']") as $link) {
//    $image = $link->getElementsByTagName('img');
//    $src = $image->item(0)->getAttribute('src');
//    if (preg_match('/\/sites\/default\/files\/wiki\/userimage\/thumb\/(.*?)\//', $src, $match)) {
//      $filename = $match[1];
//      $link->setAttribute('href', '/sites/default/files/wiki/userimage/' . $filename);
//      $link->setAttribute('class', 'colorbox');
//    }
//  }
  
  $body = filter_dom_serialize($dom);
  
  // convert image links
  $domains = array(
    'http://hinde.dmz:8888',
    'http://hinde.dmz:8000',
    'http://arrowsmith.dmz:8888',
    'http://arrowsmith.dmz:8000',
  );
  
  $body = str_replace($domains, '', $body);
  
  $node->content['body'][0]['#markup'] = $body;
  
  
}

/*
 * Implementation of hook_node_load()
 * 
 * Add our mediawiki pageid if it exists
 */
function mediawiki_bridge_node_load($nodes, $types) {
  global $user;
  
  if (count(array_intersect(array('wiki'), $types))) {
    $result = db_query('SELECT nid, pageid FROM {mediawiki_bridge} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
    foreach ($result as $record) {
      $nodes[$record->nid]->mediawiki_pageid = $record->pageid;
    }
  }
}

/*
 * Implementation of hook_node_load()
 * 
 * Add our mediawiki pageid if it exists
 */
function mediawiki_bridge_node_presave($node) {
//  if ($node->type == 'wiki') {
//    $body = field_get_items('node', $node, 'body');
//    $html = _mediawiki_bridge_parse($node->mediawiki_pageid);
//    $node->body[$node->language][0]['summary'] = text_summary($html, 'filtered_html');
//  }
}

/*
 * Implementation of hook_node_insert()
 * 
 * Add our new node to mediawiki and store the pageid
 */
function mediawiki_bridge_node_insert($node) {
  if ($node->type == 'wiki') {
    $pageid = _mediawiki_bridge_add($node);
    
    db_insert('mediawiki_bridge')
      ->fields(array(
        'nid' => $node->nid,
        'pageid' => $pageid,
      ))
      ->execute();
  }
}

//function mediawiki_bridge_section_node_validate($node, $form, &$form_state) {
//  if ($node->type == 'wiki') {
//    $query = "SELECT n.nid FROM {node} n
//      LEFT JOIN {node_revision} r ON (n.vid = r.vid)
//      WHERE n.status = 1
//        AND n.type = 'wiki'
//        AND r.title = :title";
//    
//    if ($node->nid) {
//      $query .= " AND n.nid != :nid LIMIT 1";
//      $result = db_query($query, array(':title' => $node->title, ':nid' => $node->nid))->fetch();
//    }
//    else {
//      $query .= " LIMIT 1";
//      $result = db_query($query, array(':title' => $node->title))->fetch();
//    }
//    
//    if (isset($result->nid)) {
//      form_set_error('title', t('A wiki entry already has this title: !node', array(
//        '!node' => l($node->title, 'node/' . $result->nid, array('attributes' => array('onclick' => 'window.open(this.href); return false;'))),
//      )));
//    }
//  }
//}

/*
 * Implementation of hook_node_delete
 * 
 * Delete the page from mediawiki
 * 
 * Delete the nid from our mediawiki_bridge table
 */
function mediawiki_bridge_node_delete($node) {
  if ($node->type == 'wiki') {
    if (isset($node->mediawiki_pageid)) {
      _mediawiki_bridge_delete($node->mediawiki_pageid);
      db_delete('mediawiki_bridge')
        ->condition('nid', $node->nid)
        ->execute();
    }
  }
}