<?php

/**
 * Implements hook_menu().
 */
function atwork_tasks_menu() {
  $items['node/%node/tasks'] = array(
    'title' => 'Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atwork_tasks_form', 1),
    'access callback' => 'atwork_tasks_access',
    'access arguments' => array(1),
  );
  return $items;
}

/*
 * Access callback
 *
 * Not really needed anymore but handy for local menu tab
 */
function atwork_tasks_access($node) {
  if ($node->type != 'section') {
    return FALSE;
  }

  if (user_access('access content')) {
    return TRUE;
  }

  return FALSE;
}

/*
 * Our tasks form
 */
function atwork_tasks_form($form, $form_state, $node) {
  $form = array();
  global $user;

  // we can pass a group node which will render all referenced task lists together
  if ($node->type == 'section') {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'task_list')
      ->propertyCondition('status', 1)
      ->fieldCondition('og_group_ref', 'target_id', $node->nid);

    $result = $query->execute();
    $gid = $node->nid;
  }
  // or we can pass a task_list node itself when viewing the node
  elseif ($node->type == 'task_list') {
    // fake the sql result
    $result['node'][$node->nid] = array();
    $gid = field_get_items('node', $node, 'og_group_ref');
    if ($gid) {
      $gid = $gid[0]['target_id'];
    }
  }

  if (isset($result['node'])) {

    $task_lists = array();
    // do a loop just to get available task lists so they can be changed
    foreach ($result['node'] as $nid => $values) {
      $tmp_node = node_load($nid);
      $task_lists[$nid] = $tmp_node->title;
    }

    $group_members = array(
    // Don't want a choice that breaks on submit so lets remove it and only allow assignement to group members.
    //  '_none' => '- None -',
    );
    foreach (_atwork_group_get_members($gid) as $member) {
      $group_members[$member->uid] = $member->field_display_name_value;
    }

    foreach ($result['node'] as $nid => $values) {
      $task_list = node_load($nid);

      $task_list_description = field_get_items('node', $task_list, 'body');

      $form['active_task_list_' . $task_list->nid] = array(
        '#prefix' => '<div id="active-task-list"><h2>' . $task_list->title . '</h2>' . $task_list_description[0]['value'],
        '#suffix' => '</div>',
        '#tree' => TRUE,
        '#theme' => 'atwork_tasks_table_theme',
      );

      // don't show node title if on node page
      if ($node->type == 'task_list') {
        $form['active_task_list_' . $task_list->nid]['#prefix'] = '<div id="active-task-list">' . $task_list_description[0]['value'];
      }

      $form['completed_task_list_' . $task_list->nid] = array(
        '#type' => 'fieldset',
        '#title' => t('Completed Tasks'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
        '#attributes' => array(
          'class' => array('no-border', 'no-arrow'),
        ),
        '#tree' => TRUE,
      );

      $task_query = new EntityFieldQuery();
      $task_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'task')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_task_list', 'target_id', $nid)
        ->fieldOrderBy('field_task_completed', 'value', 'ASC')
        ->fieldOrderBy('field_task_weight', 'value', 'ASC');

      $task_result = $task_query->execute();

      //dpm($task_result);

      $task_result['node'][0] = array();

      if (isset($task_result['node'])) {

        foreach ($task_result['node'] as $task_nid => $task_values) {
          $task = node_load($task_nid);

          $completed = 0;
          $assigned_to = 0;
          $due_date = '';
          $weight = 0;
          $task_nid = 0;
          $task_title = '';

          if ($task) {
            $task_nid = $task->nid;
            $task_title = $task->title;
            $completed = field_get_items('node', $task, 'field_task_completed');
            $assigned_to = field_get_items('node', $task, 'field_task_assignee');
            $assigned_to_user = user_load($assigned_to[0]['target_id']);
            $due_date = field_get_items('node', $task, 'field_task_due_date');
            $weight = field_get_items('node', $task, 'field_task_weight');
          }

          if ($completed) {
            $completed = $completed[0]['value'];
          }
          if ($completed) {
            $form_parent = 'completed';
          }
          else {
            $form_parent = 'active';
          }
          if ($assigned_to) {
            $assigned_to = $assigned_to[0]['target_id'];
          }
          if ($due_date) {
            $due_date = $due_date[0]['value'];
          }
          if ($weight) {
            $weight = $weight[0]['value'];
          }

          $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['completed'] = array(
            '#type' => 'checkbox',
            '#title' => t('Completed'),
            '#title_display' => 'invisible',
            '#default_value' => $completed,
            //'#parents' => array('data_table_' . $nid, $task_nid, 'completed'),
          );

          $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task'] = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('display-task'),
            ),
          );

          $task_classes = array('task');
          if ($assigned_to_user->uid == $user->uid) {
            $task_classes[] = 'own-task';
          }

          //Gather the curent users roles
          $roles = og_get_user_roles('node', $gid, $user->uid);
          // Users who are not assigned this task should not get to check it as complete.
          //dpm($roles);
          switch (TRUE) {
            case (in_array("Task Manager", $roles)):
            case (in_array("administrator", $roles)):
            case (user_access('administer users')):
            case ($assigned_to_user->uid == $user->uid);
              $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['completed']['#disabled'] = FALSE;
              break;
            default:
              $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['completed']['#disabled'] = TRUE;
              break;
          }

          if ($task) {
            $comment_link = l(format_plural($task->comment_count, '1 Comment', '@count Comments'), 'node/' . $task->nid, array('fragment' => 'comments'));
            if ($assigned_to_user) {
              $user_link = theme('username', array('account' => $assigned_to_user));
            }
            else {
              $user_link = t('Anyone');
            }


            if($due_date){
             // $checkdate = format_date(strtotime($due_date), 'custom', 'F j, Y');
             //dpm($due_date);
             // dpm(gettype($due_date));
             // dpm($checkdate);
              $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['task_markup'] = array(
                //'#markup' => '<div class="' . implode(' ', $task_classes) . '">' . $task->title . '<span class="task-details"> ' . $user_link . ' ' . format_date(strtotime($due_date), 'date_only') . ' ' . $comment_link . '</span></div>',
                '#markup' => '<div class="' . implode(' ', $task_classes) . '">' . $task->title . '<span class="task-details"> ' . $user_link . ' ' . format_date(strtotime($due_date), 'custom', 'F j, Y') . ' ' . $comment_link . '</span></div>',
              );
            } else {
              $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['task_markup'] = array(
                //'#markup' => '<div class="' . implode(' ', $task_classes) . '">' . $task->title . '<span class="task-details"> ' . $user_link . ' ' . format_date(strtotime($due_date), 'date_only') . ' ' . $comment_link . '</span></div>',
                '#markup' => '<div class="' . implode(' ', $task_classes) . '">' . $task->title . '<span class="task-details"> ' . $user_link . ' ' . 'No end date set' . ' ' . $comment_link . '</span></div>',
              );
            }
          }
          else {
            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['task_markup'] = array(
              '#markup' => '',
            );
          }

          if ($task) {
            $task_fieldset_title = t('Edit');
            $task_fieldset_collapsed = TRUE;
          }
          else {
            $task_fieldset_title = t('Add a new Task');
            $task_fieldset_collapsed = FALSE;
          }

          // User can edit tasks, adding new tasks will be removed from assignees later
          if($assigned_to_user->uid == $user->uid || in_array("Task Manager", $roles) || in_array("administrator", $roles) || user_access('administer users') ){
            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit'] = array(
              '#type' => 'fieldset',
              '#title' => $task_fieldset_title,
              '#collapsible' => TRUE,
              '#collapsed' => $task_fieldset_collapsed,
              '#attributes' => array(
                'class' => array('no-border', 'no-arrow'),
              ),
              //'#access' => FALSE,
            );


            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['title'] = array(
              '#type' => 'textfield',
              '#title' => t('Task'),
              '#size' => 50,
              '#title_display' => 'invisible',
              '#default_value' => $task_title,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'title'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['assignee'] = array(
              '#type' => 'select',
              '#title' => t('Assigned To'),
              '#title_display' => 'invisible',
              '#default_value' => $assigned_to,
              '#options' => $group_members,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'assignee'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['task_list'] = array(
              '#type' => 'select',
              '#title' => t('Task List'),
              '#title_display' => 'invisible',
              '#default_value' => $task_list->nid,
              '#options' => $task_lists,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'task_list'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['due_date'] = array(
              '#type' => 'date_popup',
              '#title' => t('Due Date'),
              '#title_display' => 'invisible',
              '#date_format' => 'Y-m-d',
              '#default_value' => $due_date,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'due_date'),

            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['weight'] = array(
              '#type' => 'weight',
              '#title' => t('Weight'),
              '#title_display' => 'invisible',
              '#default_value' => $weight,
              '#attributes' => array(
                'class' => array('task-weight'),
              ),
              //'#access' => FALSE,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'weight'),
           );
          }
          // Use does not have permission to edit or add tasks
          else {
            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit'] = array(
              '#type' => 'hidden',
              '#title' => $task_fieldset_title,
              '#collapsible' => TRUE,
              '#collapsed' => $task_fieldset_collapsed,
              '#attributes' => array(
                'class' => array('no-border', 'no-arrow'),
              ),
              //'#access' => FALSE,
            );


            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['title'] = array(
              '#type' => 'textfield',
              '#title' => t('Task'),
              '#size' => 50,
              '#title_display' => 'invisible',
              '#default_value' => $task_title,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'title'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['assignee'] = array(
              '#type' => 'select',
              '#title' => t('Assigned To'),
              '#title_display' => 'invisible',
              '#default_value' => $assigned_to,
              '#options' => $group_members,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'assignee'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['task_list'] = array(
              '#type' => 'select',
              '#title' => t('Task List'),
              '#title_display' => 'invisible',
              '#default_value' => $task_list->nid,
              '#options' => $task_lists,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'task_list'),
            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['due_date'] = array(
              '#type' => 'date_popup',
              '#title' => t('Due Date'),
              '#title_display' => 'invisible',
              '#date_format' => 'Y-m-d',
              '#default_value' => $due_date,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'due_date'),

            );

            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['weight'] = array(
              '#type' => 'hidden',
              '#title' => t('Weight'),
              '#title_display' => 'invisible',
              '#default_value' => $weight,
              '#attributes' => array(
                'class' => array('task-weight'),
              ),
              //'#access' => FALSE,
              //'#parents' => array('data_table_' . $nid, $task_nid, 'weight'),
           );
          }


          // Only Task Managers, group admins and site admins can create new tasks
          switch (TRUE) {
            case (in_array("Task Manager", $roles)):
            case (in_array("administrator", $roles)):
            case (user_access('administer users')):
              break;
            default:
              if (empty($form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['task_markup']['#markup'])) {
              unset($form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]);
              }
              break;
          }

          // don't want to reorder or edit past tasks.
          if ($completed) {
            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['weight']['#type'] = 'hidden';
            $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['task']['edit']['#type'] = 'hidden';
            // Only task manager/administrator can put task live again.
            switch (TRUE) {
              case (in_array("Task Manager", $roles)):
              case (in_array("administrator", $roles)):
              case (user_access('administer users')):
                $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['completed']['#disabled'] = FALSE;
                break;
              default:
                $form[$form_parent . '_task_list_' . $task_list->nid][$task_nid]['completed']['#disabled'] = TRUE;
                break;
            }
          }
        }
      }

      // remove if no children
      if (!element_children($form['completed_task_list_' . $task_list->nid])) {
        unset($form['completed_task_list_' . $task_list->nid]);
      }
    }
  }

  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 100,
  );

  //dpm($form);
  return $form;
}

/*
 * Submit callback
 */
function atwork_tasks_form_submit($form, $form_state) {
  //dpm($form_state);
  global $user;
  $num_changed = 0;

  foreach ($form_state['values'] as $key => $value) {
    if (strpos(' ' . $key, 'task_list_')) {

      $arr = explode('task_list_', $key);

      $task_list = node_load($arr[1]);

      foreach ($form_state['values'][$key] as $task_nid => $task_values) {
        if ($task_nid) {
          $task = node_load($task_nid);
          $needs_saving = FALSE;
          //$new_due_date = $task_values['task']['edit']['due_date'];
          if ($task_values['task']['edit']['due_date']) {
            $task_values['task']['edit']['due_date'] = $task_values['task']['edit']['due_date'] . ' 00:00:00';
          }

          if ($task->field_task_completed[$task->language][0]['value'] != $task_values['completed']) {
            $task->field_task_completed[$task->language][0]['value'] = $task_values['completed'];
            $needs_saving = TRUE;
          }
          if ($task->field_task_assignee[$task->language][0]['target_id'] != $task_values['task']['edit']['assignee']) {
            $task->field_task_assignee[$task->language][0]['target_id'] = $task_values['task']['edit']['assignee'];
            $needs_saving = TRUE;
          }
          if ($task->field_task_list[$task->language][0]['target_id'] != $task_values['task']['edit']['task_list']) {
            $task->field_task_list[$task->language][0]['target_id'] = $task_values['task']['edit']['task_list'];
            $needs_saving = TRUE;
          }
          if ($task->field_task_due_date[$task->language][0]['value'] != $task_values['task']['edit']['due_date']) {
            $task->field_task_due_date[$task->language][0]['value'] = $task_values['task']['edit']['due_date'];
            $needs_saving = TRUE;
          }
          if ($task->field_task_weight[$task->language][0]['value'] != $task_values['weight']) {
            $task->field_task_weight[$task->language][0]['value'] = $task_values['weight'];
            $needs_saving = TRUE;
          }
          if ($task->title != $task_values['task']['edit']['title']) {
            $task->title = $task_values['task']['edit']['title'];
            $needs_saving = TRUE;
          }

          if ($needs_saving) {
            $num_changed++;
            node_save($task);
          }

        }
        else {

          if ($task_values['task']['edit']['title'] && $task_values['task']['edit']['task_list']) {
            $node = new stdClass();
            $node->title = $task_values['task']['edit']['title'];
            $node->type = 'task';
            node_object_prepare($node);
            $node->language = LANGUAGE_NONE;

            $node->uid = $user->uid;
            $node->status = 1;
            $node->promote = 0;
            $node->comment = 2;

            if ($task_values['task']['edit']['task_list'] && is_numeric($task_values['task']['edit']['task_list'])) {
              $node->field_task_list[$node->language][] = array(
                'target_id' => $task_values['task']['edit']['task_list'],
              );
            }

            if ($task_values['task']['edit']['assignee']) {
              $node->field_task_assignee[$node->language][] = array(
                'target_id' => $task_values['task']['edit']['assignee'],
              );
            }

            if ($task_values['task']['edit']['due_date']) {
              $node->field_task_assignee[$node->language][] = array(
                'value' => $task_values['task']['edit']['due_date'],
                'timezone' => 'America/Vancouver',
                'timezone_db' => 'America/Vancouver',
                'date_type' => 'datetime',
              );
            }

            $node = node_submit($node);
            node_save($node);
            $num_changed++;
          }
        }
      }
    }
  }

  if ($num_changed) {
    drupal_set_message(t('!num tasks were saved.', array('!num' => $num_changed)));
  }

}

/**
 * Implements hook_theme()
 */
function atwork_tasks_theme($existing, $type, $theme, $path) {
  return array(
    'atwork_tasks_table_theme' => array(
      'render element' => 'element'
    ),
  );
}


/*
 * Theme Callback for atwork_images_table_theme
 *
 * Render our images into a draggable table
 */
function theme_atwork_tasks_table_theme($vars) {
  $element = $vars['element'];
  //kpr($element);
  drupal_add_tabledrag($element['#id'], 'order', 'sibling', 'task-weight'); // needed for table dragging

  $header = array(
    'completed' => t('Completed'),
    'task' => t('Task'),
    'weight' => t('Weight'),
  );

  $rows = array();
  foreach (element_children($element) as $key) {
    $row = array();

    $row['data'] = array();
    foreach ($header as $fieldname => $title) {
      $row['data'][] = drupal_render($element[$key][$fieldname]);
      $row['class'] = array('draggable'); // needed for table dragging
    }
    $rows[] = $row;
  }

  return theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('id' => $element['#id']), // needed for table dragging
  ));
}


/**
 * Implements hook_node_view();
 */
function atwork_tasks_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'task_list' && $view_mode == 'full') {
    //dpm($node);
    $node->content['body'][0] = drupal_get_form('atwork_tasks_form', $node);
  }
  if ($node->type == 'task' && $view_mode == 'full') {
    //dpm($node);
    $task_list = field_get_items('node', $node, 'field_task_list');
    $task_list = node_load($task_list[0]['target_id']);

    if ($task_list) {
      $group = field_get_items('node', $task_list, 'og_group_ref');
      $group = node_load($group[0]['target_id']);
      if ($group) {
        og_context('node', $group);

        $breadcrumb = array();
        $breadcrumb[] = l(t('Home'), '<front>');
        $breadcrumb[] = l(t('Groups'), 'groups');
        $breadcrumb[] = l($group->title, 'node/' . $group->nid);
        $breadcrumb[] = l(t('Task Lists'), 'node/' . $group->nid . '/tasks');
        $breadcrumb[] = l($task_list->title, 'node/' . $task_list->nid);

        drupal_set_breadcrumb($breadcrumb);
      }
    }

    if (isset($node->content['field_task_assignee']['#items'][0]['target_id'])) {
      $assignee = user_load($node->content['field_task_assignee']['#items'][0]['target_id']);
      $node->content['field_task_assignee'][0]['#markup'] = theme('username', array('account' => $assignee));
    }

    $node->content['field_task_list'][0]['#markup'] = l($task_list->title, 'node/' . $task_list->nid);

    if ($node->content['field_task_completed']['#items'][0]['value']) {
      $node->content['field_task_completed'][0]['#markup'] = t('Yes');
    }
    else {
      $node->content['field_task_completed'][0]['#markup'] = t('No');
    }
  }

}

/*
 * Implements hook_views_pre_view();
 */
function atwork_tasks_views_pre_view(&$view, &$display_id, &$args) {
  if (($view->name == 'task_list'  || $view->name == 'og_member_reference') && $display_id == 'entityreference_1') {
    // if GET var is set creating node
    if (isset($_GET['field_task_list'])) {
      $task_list = node_load($_GET['field_task_list']);
      $group = field_get_items('node', $task_list, 'og_group_ref');
      $gid = $group[0]['target_id'];
    }
    elseif (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'edit') {
      $node = node_load(arg(1));
      $task_list = field_get_items('node', $node, 'field_task_list');
      $task_list = node_load($task_list[0]['target_id']);

      if ($task_list) {
        $group = field_get_items('node', $task_list, 'og_group_ref');
        $gid = $group[0]['target_id'];
      }
    }

    if (isset($gid)) {
      $group = node_load($gid);
      og_context('node', $group);
      $view->set_arguments(array($gid));
    }
  }
}

/**
 * Implement hook_og_permission().
 */
function atwork_tasks_og_permission() {
  $items = array();

  $items['manage_tasks'] = array(
    'title' => t('Manage all Tasks'),
    'description' => t('This role can edit any task, even those not assigned to them.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter();
 */
function atwork_tasks_form_task_node_form_alter(&$form, &$form_state, $form_id) {

}
