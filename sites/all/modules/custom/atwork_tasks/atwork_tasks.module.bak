<?php

/**
 * Implements hook_menu().
 */
function atwork_tasks_menu() {
  $items['node/%node/tasks'] = array(
    'title' => 'Tasks',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atwork_tasks_form', 1),
    'access callback' => 'atwork_tasks_access',
    'access arguments' => array(1),
  );
  return $items;
}

function atwork_tasks_access($node) {
  if ($node->type != 'section') {
    return FALSE;
  }
  
  if (user_access('access content')) {
    return TRUE;
  }
  
  return FALSE;
}

function atwork_tasks_form($form, $form_state, $node) {
  $form = array();
  $form['#tree'] = TRUE;
  $rows = array();
  $row_elements = array();
  
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'task_list')
    ->propertyCondition('status', 1)
    ->fieldCondition('og_group_ref', 'target_id', $node->nid);

  $result = $query->execute();
  
  if (isset($result['node'])) {
    
    $task_lists = array();
    // do a loop just to get available task lists so they can be changed
    foreach ($result['node'] as $nid => $values) {
      $tmp_node = node_load($nid);
      $task_lists[$nid] = $tmp_node->title;
    }
    
    $group_members = array();
    foreach (_atwork_group_get_members($node->nid) as $member) {
      $group_members[$member->uid] = $member->field_display_name_value;
    }
    
    foreach ($result['node'] as $nid => $values) {
      $task_list = node_load($nid);
      
      $task_list_description = field_get_items('node', $task_list, 'body');
      
      $form['data_table_' . $nid] = array(
        '#type' => 'fieldset',
        '#title' => $task_list->title,
        '#description' => $task_list_description[0]['value'],
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      
      $task_query = new EntityFieldQuery();
      $task_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'task')
        ->propertyCondition('status', 1)
        ->fieldCondition('field_task_list', 'target_id', $nid)
        ->fieldOrderBy('field_task_completed', 'value', 'ASC')
        ->fieldOrderBy('field_task_weight', 'value', 'ASC');
      
      $task_result = $task_query->execute();
      
      if (isset($task_result['node'])) {
        
        foreach ($task_result['node'] as $task_nid => $task_values) {
          $task = node_load($task_nid);
          
          $completed = field_get_items('node', $task, 'field_task_completed');
          $assigned_to = field_get_items('node', $task, 'field_task_assignee');
          $due_date = field_get_items('node', $task, 'field_task_due_date');
          //$task_list_ref = field_get_items('node', $task, 'field_task_list');
          $weight = field_get_items('node', $task, 'field_task_weight');
          
          $rows[$task_nid] = array(
            'data' => array(
              
              array('data' => array(
                '#type' => 'checkbox',
                '#title' => t('Completed'),
                '#title_display' => 'invisible',
                '#default_value' => $completed[0]['value'],
                '#parents' => array('data_table_' . $nid, $task_nid, 'completed'),
              )),

              array('data' => array(
                '#type' => 'textfield',
                '#title' => t('Task'),
                '#size' => 50,
                '#title_display' => 'invisible',
                '#default_value' => $task->title,
                '#parents' => array('data_table_' . $nid, $task_nid, 'title'),
              )),

              array('data' => array(
                '#type' => 'select',
                '#title' => t('Assigned To'),
                '#title_display' => 'invisible',
                '#default_value' => $assigned_to[0]['target_id'],
                '#options' => $group_members,
                '#parents' => array('data_table_' . $nid, $task_nid, 'assignee'),
              )),

              array('data' => array(
                '#type' => 'select',
                '#title' => t('Task List'),
                '#title_display' => 'invisible',
                '#default_value' => $task_list->nid,
                '#options' => $task_lists,
                '#parents' => array('data_table_' . $nid, $task_nid, 'task_list'),
              )),

              array('data' => array(
                '#type' => 'date_popup',
                '#title' => t('Due Date'),
                '#title_display' => 'invisible',
                '#default_value' => $due_date[0]['value'],
                '#parents' => array('data_table_' . $nid, $task_nid, 'due_date'),

              )),

              array('data' => array(
                '#type' => 'weight',
                '#title' => t('Weight'),
                '#title_display' => 'invisible',
                '#default_value' => $weight[0]['value'],
                '#attributes' => array(
                  'class' => array('task-order-weight'),
                ),
                '#parents' => array('data_table_' . $nid, $task_nid, 'weight'),
              )),
            ),
            'class' => array('draggable'),
          );
          
          $row_elements[$task_nid] = array(
            'completed' => &$rows[$task_nid]['data'][1]['data'],
            'title' => &$rows[$task_nid]['data'][2]['data'],
            'assignee' => &$rows[$task_nid]['data'][3]['data'],
            'task_list' => &$rows[$task_nid]['data'][4]['data'],
            'due_date' => &$rows[$task_nid]['data'][5]['data'],
            'weight' => &$rows[$task_nid]['data'][6]['data'],
          );
          
          
          $header = array(
            t('Completed'),
            t('Task'),
            t('Assigned to'),
            t('Task List'),
            t('Due Date'),
          //  array('data' => t('Operations'), 'colspan' => 2),
            array('data' => t('Weight'), 'class' => array('tabledrag-hide')),
          );
          
          $form['data_table_' . $nid][$nid] = array(
            '#theme' => 'table',
            'elements' => $row_elements,
            '#header' => $header,
            '#rows' => $rows,
            '#empty' => t('There are no task lists.'),
            '#attributes' => array('id' => 'task-order'),
          );
          
          drupal_add_tabledrag('task-order', 'order', 'sibling', 'task-order-weight');
          
        }
      }
      
    }
  }
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
    '#weight' => 100,
  );
  dpm($form);
  return $form;
}

/**
 * Implements hook_node_view();
 */
function atwork_tasks_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'task_list' && $view_mode == 'full') {
    $node->content['atwork_add_task'] = array(
      '#theme' => 'links',
      '#attributes' => array(
        'class' => array('links', 'inline'),
      ),
      '#links' => array(
        'add_task' => array(
          'title' => t('Add a task to this list.'),
          'href' => 'node/add/task',
          'attributes' => array(
            'title' => t('Add a task to this list.'),
          ),
          'query' => array(
            'field_task_list' => $node->nid,
            'destination' => 'node/' . $node->nid,
          ),
        ),
      ),
    );
  }
}

function atwork_tasks_views_pre_view(&$view, &$display_id, &$args) {
  if (($view->name == 'task_list'  || $view->name == 'og_member_reference') && $display_id == 'entityreference_1' && isset($_GET['field_task_list'])) {
    
    $task_list = node_load($_GET['field_task_list']);
    
    $groups = field_get_items('node', $task_list, 'og_group_ref');
    
    if (isset($groups[0]['target_id'])) {
      $view->set_arguments(array($groups[0]['target_id']));
    } 
  }
}

/**
 * Implement hook_og_permission().
 */
function atwork_tasks_og_permission() {
  $items = array();

  $items['manage_tasks'] = array(
    'title' => t('Manage all Tasks'),
    'description' => t('This role can edit any task, even those not assigned to them.'),
    'default role' => array(OG_ADMINISTRATOR_ROLE),
    'restrict access' => TRUE,
  );

  return $items;
}