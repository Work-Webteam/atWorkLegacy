<?php 

// Current R2R application pages
define("R2R_REG_FORM_NID", 20702); // 2017 reg form nid
define("R2R_LIVECAST_URL", "http://video.web.gov.bc.ca/psa/townhall/"); // 2017 R2R livestream url
// This is where we set the upcoming session by ID (as found in webform sessions)
// Ex. [01| Vancouver â€“ Wednesday, February 7 -  Holiday Inn and Suites Vancouver Downtown]  Would be set as 01
define("WEBCAST_ID", '01');
/**
 * Implements hook_block_info
 * We require a block to grab form submission data for users who are accessing R2R stream
 */
 function atwork_r2r_block_info(){
  $blocks['r2r_registration'] = array(
    'info' => t('Region to region registration pop-up form'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
 }

 /**
  * Implements hook_block_view
  * Block to check/receive/update forms for users who want to view R2R streams
  */
function atwork_r2r_block_view($delta = ''){
  $block = array();
  switch ($delta){
    case 'r2r_registration';
      $block['content'] =  array(
        // We don't want to show anything, so we are getting an empty string back. This simply launches the nec .js
        '#markup' => r2r_registration_information(),
      );
    break;
  }
  return $block;
}

/**
 * Helper function that loads js for the r2r form
 * @return $output [empty string]
 */
function r2r_registration_information(){
  global $user;
  $current_user = user_load($user->uid);
  // check for user form - if we have one, then pass them through to the video url
  include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
  $submissions = webform_get_submissions(array('nid' => R2R_REG_FORM_NID, 'uid' => $current_user->uid));

  // Otherwise we pop a form and get them to reg.
  // Grab a copy of the webform to get dropdown city info
  $webform_node = node_load(R2R_REG_FORM_NID);
  // The output string we will return, don't want to pass anything back, just load js
  $output = '';
  // Gather user and form info we require for the jQuery form.
  $name = $current_user->field_gal_first_name['und'][0]['safe_value'] . ' ' .  $current_user->field_gal_last_name['und'][0]['safe_value'];
  $ministry = $current_user->field_gal_ministry_name['und'][0]['safe_value'];
  $email = $current_user->mail;
  $arr = explode("\n", $webform_node->webform['components'][2]['extra']['items']);
  $casts = array();
  foreach($arr as $k=>$v){
    $split[] = explode("|", $v);
    foreach($split as $value ){
      if(!isset($value[1])){
        continue;
      }
      $casts[$value[0]] = $value[1];
    }
  }
  $cast_id = WEBCAST_ID;
  $cast_name = $casts[$cast_id];
  // Currently this is only used for the current webcast 
  $session = 8;
  // Add form update js
  drupal_add_js(drupal_get_path('module', 'atwork_r2r') . '/' . 'js_r2r_form.js');
  drupal_add_library('system', 'ui.dialog');
  
  // Pass user info to settings, all info we require to fill out the form
  drupal_add_js(array('atwork_r2r' => array('user' => $name, 'uid' => $current_user->uid, 'ministry' => $ministry, 'email' => $email, 'castId' => $cast_id, 'castName' => $cast_name, 'session' => $session, 'redirect' => R2R_LIVECAST_URL)), 'setting');
  return $output;
}

/**
 * Implements hook_menu()
 * Create menu path for accessing values via Ajax
 */
function atwork_r2r_menu(){
  // Initial submission URL for user.
  $items['r2r/registration'] = array(
    'page callback' => 'atwork_r2r_callback',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  $items['r2r/check'] = array(
    'page callback' => 'atwork_r2r_sub_check',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  return $items;
}

function atwork_r2r_sub_check(){
  global $user;
  // check for user form - if we have one, then pass them through to the video url
  include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
  $submissions = webform_get_submissions(array('nid' => R2R_REG_FORM_NID, 'uid' => $user->uid));
  // Otherwise we pop a form and get them to reg.
  // The output string we will return, don't want to pass anything back, just load js
  // If we have a submission, we redirect user to the video automatically
  if(isset($submissions) && !empty($submissions)){
    // Set redirect if submission forms have already been filled out.
    $return_array = array(
      '1' => true,
      '2' => R2R_LIVECAST_URL,
    );
    echo json_encode($return_array);
    die();
  } else {
    echo json_encode(false);
    die();
  }
}

function atwork_r2r_callback(){
  global $user;
  // We need to include the webform inc file to allow us to use its functions
  include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
  
  // get post and use it.
  $submission_array = $_POST;
  // Grab a copy of the webform
  $webform_node = node_load(R2R_REG_FORM_NID);
  // Gather all the info we need for the form
  $data = array(
    // Webcast - this is static for now - eventually we may need to make it dynamic
    "2" => array(
      '0'=> $submission_array['attendance'],
    ),
    // Session can be in person (7) or virtual (8)
    "4" => array( 
      '0'=> $submission_array['session'],
    ),
    //' Ministry
    "8" => array(
      '0' => $submission_array['ministry'],
    ),
    // Name
    "9" => array(
      '0' => $submission_array['name'],
    ),
    // email
    "10" => array(
      '0' => $submission_array['email'],
    ),
  );
  // now fill in and submit it.
  $submission = (object) array(
    'nid' => R2R_REG_FORM_NID,
    'uid' => $user->uid,
    'sid' => NULL,
    'submitted' => REQUEST_TIME,
    'completed' => REQUEST_TIME,
    'remote_addr' => ip_address(),
    'is_draft' => FALSE,
    'data' => $data,
  );
  $sid = webform_submission_insert($webform_node, $submission);
  // If it works return a 200, any error is 500.
  if(isset($sid) && $sid != null){
    echo json_encode("200");
    die();
    return;
  }
  // return 200 or 500
  echo json_encode('500');
  die();
}