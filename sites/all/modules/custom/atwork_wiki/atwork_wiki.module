<?php

/*
 * Implementation of hook_menu()
 */
function atwork_wiki_menu() {  
//  $items['wikisearch/autocomplete'] = array(
//    'page callback' => '_atwork_wiki_autocomplete',
//    'access arguments' => array('access content'),
//    'type' => MENU_CALLBACK
//  );
  
  $items['node/%/discussion'] = array(
    'title' => 'Discussion',
    'title callback' => '_atwork_wiki_discussion_page_title',
    'title arguments' => array(1),
    'page callback' => '_atwork_wiki_discussion_page_view',
    'page arguments' => array(1),
    'access callback' => '_atwork_wiki_discussion_page_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  return $items;
}


function _atwork_wiki_discussion_page_title($nid) {
  if (is_numeric($nid) && $node = node_load($nid)) {
    if (isset($node->comment_count)) return t('Discussion (!num)', array('!num' => $node->comment_count));
  }
  return 'Discussion';
}

function _atwork_wiki_discussion_page_view($nid) {
  if (is_numeric($nid) && $node = node_load($nid)) {
    //$comments = views_embed_view('node_comments', 'block', $node->nid);
    if ($comments) {
      return $comments;
    }
    //dpm($node);
  }
  return '';
}

function _atwork_wiki_discussion_page_access($nid) {
  if (is_numeric($nid) && $node = node_load($nid)) {
    if ($node->type == 'wiki' && isset($node->atwork_comment) && $node->atwork_comment > 0) {
      return TRUE;
    }
  }
  return FALSE;
}

/*
 * Page callback for wikisearch/autocomplete
 */
function _atwork_wiki_autocomplete($string) {
  $matches = array();
 
  // Some fantasy DB table which holds cities
  $query = db_select('node', 'n');
 
  // Select rows that match the string
  $return = $query
    ->fields('n', array('title'))
    ->condition('n.title', '%' . db_like($string) . '%', 'LIKE')
    ->condition('n.type', 'wiki')
    ->range(0, 15)
    ->execute();
 
  // add matches to $matches  
  foreach ($return as $row) {
    $matches[$row->title] = check_plain($row->title);
  }
 
  // return for JS
  drupal_json_output($matches);
}

/*
 * Implementation of hook_node_view
 * 
 */
function atwork_wiki_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'wiki') {
    return;
  }

}

/**
 * Implementation of hook_subscriptions_queue_alter().
 */
function atwork_wiki_subscriptions_queue_alter(&$event) {
  //dpm($event);
}

/*
 * Implementation of hook_views_post_render()
 * 
 * On search page custom add an exact match if it exists
 * 
 * On category page show a list of categories if one hasn't been selected
 */
function atwork_wiki_views_post_render(&$view, &$output, &$cache) {
  //dpm($view);
  if ($view->name == 'wiki' && $view->current_display == 'page' && isset($view->exposed_input['terms'])) {
    // lets show any exact matches before the rest of the results
    //dpm($view);
    if ($view->exposed_input['terms'] && $view->result) {
      $nid = db_select('node', 'n')
        ->condition('title', $view->exposed_input['terms'])
        ->condition('type', 'wiki')
        ->fields('n', array('nid'))
        ->execute()
        ->fetchAssoc();
      
      if ($nid) {
        $html = '<div class="wiki-exact-match">' . t('Exact match:') . ' ' . 
          l($view->exposed_input['terms'], 'node/' . $nid['nid']) . '</div>';
        
        $output = $html . $output;
      }
    }
  }
  if ($view->name == 'wiki' && $view->current_display == 'page_1') {    
    if (!$view->args) {
      // only good for two level hierarchy!
      
      $taxonomy_tree = taxonomy_get_tree(4);
      
      $items = array();
      foreach ($taxonomy_tree as $term_data) {
        $term = entity_load('taxonomy_term', array($term_data->tid));
        $term = reset($term);
        
        $term_uri = entity_uri('taxonomy_term', $term);
        
        $item = array(
          'data' => l($term->name, $term_uri['path'], $term_uri['options']),
        );
        
        if (!$term_data->depth) {
          $items[$term->tid] = $item;
        }
        else {
          if (!isset($items[$term_data->parents[0]]['children'])) {
            $items[$term_data->parents[0]]['children'] = array();
          }
          array_push($items[$term_data->parents[0]]['children'], $item);
        }
      }

      $variables = array(
        'items' => $items,
        'title' => '',
        'type' => 'ul',
        'attributes' => array(), 
      );
      
      $output = theme('item_list', $variables);
    }
  }
}

/*
 * Implementation of hook_form_alter()
 * 
 * Change labels on exposed filter
 * 
 * Add an autocomplete path
 */
function atwork_wiki_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'diff_node_revisions') {
    if (isset($form['nid']['#value']) && $form['nid']['#value'] && $node = node_load($form['nid']['#value'])) {
      if ($node->type == 'wiki') {
        $notes = <<<EOT
<p><strong>Note:</strong> Wikilumpia transitioned from HTML to MediaWiki format (like Wikipedia) in late 2013. Revisions from before that date will appear with encoded HTML.</p>
EOT;
  
        $form['#prefix'] = $notes;
      }
    }
  }
  
//  if ($form['#id'] == 'views-exposed-form-wiki-page') {
//    // only change this form as it appears on wiki node pages
//    if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
//      $node = node_load(arg(1));
//      if ($node) {
//        if ($node->type == 'wiki') {
//          $form['#info']['filter-keys']['label'] = '';
//        }
//      }
//    }
//    //$form['query']['#autocomplete_path'] = 'wikisearch/autocomplete';
//  }
  
  if ($form_id == 'wiki_node_form' || $form_id == 'mediawiki_bridge_section_form') {
    $js = <<<EOT
jQuery(document).ready(function($) {
  $('.markItUpHeader a').hide();
  $('.markItUpHeader li.markitup-bold a').html('<i class="icon-bold font-awesome"></i>');
  $('.markItUpHeader li.markitup-italic a').html('<i class="icon-italic font-awesome"></i> ');
  $('.markItUpHeader li.markitup-strike a').html('<i class="icon-strikethrough font-awesome"></i> ');
  $('.markItUpHeader li.markitup-link a').html('<i class="icon-link font-awesome"></i> ');
  $('.markItUpHeader li.markitup-h1 a').html('<i class="icon- font-awesome">h2</i> ');
  $('.markItUpHeader li.markitup-h2 a').html('<i class="icon- font-awesome">h3</i> ');
  $('.markItUpHeader li.markitup-h3 a').html('<i class="icon- font-awesome">h4</i> ');
  $('.markItUpHeader li.markitup-ul a').html('<i class="icon-list-ul font-awesome"></i> ');
  $('.markItUpHeader li.markitup-ol a').html('<i class="icon-list-ol font-awesome"></i> ');
  
});
EOT;
    drupal_add_js($js, 'inline');
  }
}
 
/**
 * Implements hook_form_FORMID_alter()
 * 
 * Sets user's email and display name as default
 * 
 * Changes the text of the submit buttons
 * 
 * Validates for checkbox on terms of service 
 */
function atwork_wiki_form_wiki_node_form_alter(&$form, &$form_state, $form_id) {
  
}

function atwork_wiki_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'wiki' && $display_id == 'page') {
    if (arg(0) == 'wiki' && arg(1) == 'items' && arg(2)) {
      drupal_goto('node/7994');
    }
    //dpm($view);
  }
}

function atwork_wiki_views_query_alter(&$view, &$query) {
  if ($view->name == 'wiki') {
    
  }
}