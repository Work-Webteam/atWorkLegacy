<?php

/*
 * Helper function to see if a user account changed
 */
function _atwork_user_changed($original_account, $updated_account) {
  $profile_fields = array(
    'signature',
    'field_blog_profile',
    'field_summary',
    'field_career',
    'field_philosophy_influences',
    'field_personal',
    'field_favourites',
    'field_image',
 //   'field_skills',
  );

  //normalize for und
  $original_values = array();
  $updated_values = array();

  foreach ($profile_fields as $field) {
    if (isset($updated_account->{$field}[LANGUAGE_NONE])) {
      $updated_values[$field] = $updated_account->{$field}[LANGUAGE_NONE];
    }
    else {
      $updated_values[$field] = $updated_account->$field;
    }

    if (isset($original_account->{$field}[LANGUAGE_NONE])) {
      $original_values[$field] = $original_account->{$field}[LANGUAGE_NONE];
    }
    else {
      $original_values[$field] = $original_account->$field;
    }
  }

  foreach ($profile_fields as $field) {
    if ($original_values[$field] != $updated_values[$field]) {
      return TRUE;
    }
  }

  return FALSE;
}

/*
 * Helper function that accepts variable name and adds necessary js for qtip
 */
function _atwork_instructions($var_name) {
  $atwork_instructions = variable_get($var_name,'');
  $atwork_instructions = $atwork_instructions['value'];

  $js = <<<EOT
(function($) {
  $(document).ready(function() {
    $('.atwork-instuction').each(function() {
      $(this).qtip({
        content: {
            attr: 'data-tooltip'
        },
        position: {
          target: $(this).find('i')
        },
        hide: {
          fixed: true,
          event: 'click mouseleave',
          target: $(this).find('i')
        },
        show: {
          target: $(this).find('i')
        }
      });
    });
  });
})(jQuery);
EOT;

  drupal_add_js($js, 'inline');

  return $atwork_instructions;
}

/*
 * Helper function to display font-awesome icons
 */
function _atwork_fa($icon, $extra = '') {

  global $user;

  if ($extra) $extra .= ' ';
  if (isset($user->theme)) {
    if ($user->theme == 'atwork') {
      return '<i ' . $extra . 'class="icon-' . $icon . ' font-awesome"></i> ';
    }
    else {
      // name changes to support both themes at same time
      switch ($icon) {
        case 'circle-blank':
          $icon = 'circle-o';
          break;
        case 'envelope-alt':
          $icon = 'envelope-o';
          break;
        case 'comments-alt':
          $icon = 'comments-o';
          break;
        case 'facetime-video':
          $icon = 'video-camera';
          break;
        case 'star-empty':
          $icon = 'star-o';
          break;
      }

    return '<i ' . $extra . 'class="fa fa-' . $icon . '"></i> ';
    }
  }
}

/*
 * Helper function to see if a user is an admin
 */
function _atwork_is_admin($user = 0) {
  if (!$user) {
    global $user;
  }

  if (in_array('administrator', $user->roles)) return TRUE;
  if (in_array('manager', $user->roles)) return TRUE;
  if (in_array('editor', $user->roles)) return TRUE;

  return FALSE;

}

/**
 * Helper function to hide exec related tags from non-users
 */
function _atwork_hide_exec_tags(&$form) {
  if(isset($form['field_tags'][$form['language']['#value']]['#options']) && $form['field_tags']['und']['#options']){
    //Some tags are reserved for editors and admins only
    foreach($form['field_tags'][$form['language']['#value']]['#options'] as $key => $value){
      if($value == '-Executive updates' || $value == 'Executive Corner' || $value == '-Executive blog' || $value == '-Executive profiles' || $value == '-Messages from the Head of the BC Public Service'){
        unset($form['field_tags'][$form['language']['#value']]['#options'][$key]);
      }
    }
  }
  return;
}

function _atwork_add_link_icons(&$variables) {

  // forward
  if (isset($variables['content']['footer']['links']['forward']['#links']['forward_link']['query'])) {
    $variables['content']['footer']['links']['forward']['#links']['forward_link']['title'] = _atwork_fa('envelope-alt') . t('Email this page');
    // While here, change the title text
    $variables['content']['footer']['links']['forward']['#links']['forward_link']['attributes']['title'] = t('Email this page');
  }

  // stats
  if (isset($variables['content']['footer']['links']['statistics']['#links']['statistics_counter']['title'])) {
    $variables['content']['footer']['links']['statistics']['#links']['statistics_counter']['title'] = _atwork_fa('star') . $variables['content']['footer']['links']['statistics']['#links']['statistics_counter']['title'];
    $variables['content']['footer']['links']['statistics']['#links']['statistics_counter']['html'] = TRUE;
  }

  // add comment
  if (isset($variables['content']['footer']['links']['comment']['#links']['comment-add']['title'])) {
    $variables['content']['footer']['links']['comment']['#links']['comment-add']['title'] = _atwork_fa('comment') . $variables['content']['footer']['links']['comment']['#links']['comment-add']['title'];
    $variables['content']['footer']['links']['comment']['#links']['comment-add']['html'] = TRUE;
  }

  // comments
  if (isset($variables['content']['footer']['links']['comment']['#links']['comment-comments']['title'])) {
    $variables['content']['footer']['links']['comment']['#links']['comment-comments']['title'] = _atwork_fa('comments') . $variables['content']['footer']['links']['comment']['#links']['comment-comments']['title'];
    $variables['content']['footer']['links']['comment']['#links']['comment-comments']['html'] = TRUE;
  }

  // new comments
  if (isset($variables['content']['footer']['links']['comment']['#links']['comment-new-comments']['title'])) {
    $variables['content']['footer']['links']['comment']['#links']['comment-new-comments']['title'] = _atwork_fa('comments-alt') . $variables['content']['footer']['links']['comment']['#links']['comment-new-comments']['title'];
    $variables['content']['footer']['links']['comment']['#links']['comment-new-comments']['html'] = TRUE;
  }

  // ical link
  if (isset($variables['content']['footer']['links']['ical']['#links']['ical_link']['title'])) {
    $variables['content']['footer']['links']['ical']['#links']['ical_link']['title'] = _atwork_fa('calendar') . $variables['content']['footer']['links']['ical']['#links']['ical_link']['title'];
    $variables['content']['footer']['links']['ical']['#links']['ical_link']['html'] = TRUE;
  }

  // add an image link
  if (isset($variables['content']['footer']['links']['atwork_add_image']['#links']['add_image']['title'])) {
    $variables['content']['footer']['links']['atwork_add_image']['#links']['add_image']['title'] = _atwork_fa('picture') . $variables['content']['footer']['links']['atwork_add_image']['#links']['add_image']['title'];
    $variables['content']['footer']['links']['atwork_add_image']['#links']['add_image']['html'] = TRUE;
  }

  // flag
  if (isset($variables['content']['footer']['links']['flag']['#links']['flag-abuse_nodes']['title'])) {
    $variables['content']['footer']['links']['flag']['#links']['flag-abuse_nodes']['title'] =
      str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $variables['content']['footer']['links']['flag']['#links']['flag-abuse_nodes']['title']);
    $variables['content']['footer']['links']['flag']['#links']['flag-abuse_nodes']['html'] = TRUE;
  }

  // teaser read more
  if (isset($variables['content']['footer']['links']['node']['#links']['node-readmore']['title'])) {
    $variables['content']['footer']['links']['node']['#links']['node-readmore']['title'] = _atwork_fa('angle-right') . $variables['content']['footer']['links']['node']['#links']['node-readmore']['title'];
    $variables['content']['footer']['links']['node']['#links']['node-readmore']['html'] = TRUE;
  }
}


/*
 * This function exists in some nodes
 */
if (!function_exists('quicktabs_load')) {
  function quicktabs_load($arg1 = '', $arg2 = '') {

  }
}

/*
 * Helper function that provides the field_display_name if it exists
 */
function _atwork_display_name($user) {
  if (!isset($user) || !$user || !isset($user->uid) || !$user->uid) {
    return variable_get('anonymous', t('Employee News'));
  }

  if (!isset($user->field_display_name) && $user->uid) {
    $user = user_load($user->uid);
  }

  $display_name = field_get_items('user', $user, 'field_display_name');

  if (isset($display_name[0]['safe_value'])) {
    return $display_name[0]['safe_value'];
  }

  return $user->name;
}

/*
 * Helper function that provides the field_display_name if it exists
 */
function _atwork_full_name($user) {
  if (!isset($user->field_gal_first_name) && !isset($user->field_gal_last_name) && $user->uid) {
    $user = user_load($user->uid);
  }

  if (!$user) {
    return;
  }

  $first_name = field_get_items('user', $user, 'field_gal_first_name');
  $last_name = field_get_items('user', $user, 'field_gal_last_name');

  if (isset($first_name[0]['safe_value']) && isset($last_name[0]['safe_value'])) {
    return $first_name[0]['safe_value'] . ' ' . $last_name[0]['safe_value'];
  }

  return $user->name;
}

/*
 * Helper function that provides the first if it exists
 */
function _atwork_first_name($user) {
  if (!isset($user->field_gal_first_name) && $user->uid) {
    $user = user_load($user->uid);
  }

  if (!$user) {
    return;
  }

  $first_name = field_get_items('user', $user, 'field_gal_first_name');

  if (isset($first_name[0]['safe_value'])) {
    return $first_name[0]['safe_value'];
  }

  if (!isset($user->name)){
    return;
  }

  return $user->name;
}


/*
 * Implementation of hook_node_view()
 *
 * On node teasers strip all HTML except <p> and <br>
 */
function atwork_misc_node_view($node, $view_mode, $langcode) {
  // js for front page
  if ($node->nid == 96) {
    $js = <<<EOT
(function($) { $(document).ready(function() {
  $('.jcarousel').jcarousel({
    wrap: 'circular',
  })
});})(jQuery);
EOT;
    drupal_add_js('sites/all/libraries/jcarousel/lib/jquery.jcarousel.min.js');
    drupal_add_js('sites/all/libraries/jcarousel/lib/jquery.jcarousel-control.min.js');
    drupal_add_js($js, 'inline');
    // Tutorials
    Global $user;
    if(isset($user->theme) && $user->theme == 'atwork_zen'){
      $account = user_load($user->uid);
      if(!isset($account->field_home_page_tutorial['und'][0]['value']) || isset($account->field_home_page_tutorial['und'][0]['value']) && $account->field_home_page_tutorial['und'][0]['value'] == 1){
        //drupal_clear_js_cache();
        jquery_impromptu_add();
        $node->content['#attached']['js'][drupal_get_path('module', 'atwork_misc') . '/atwork_misc.js'] = array(
        'type' => 'file',
        );
      }
    }
  }
   // For election 2017 infographic - news/2017/0317/election-2017-your-guide
  if($node->nid == 21348){
    $js_1 = <<<EOT

    (function($) {

      $(document).ready(function() {
        // Measure where the div is
        $('#election-wrapper a[href*="#"]').click(function(event) {
          event.preventDefault();

          // Link we want from top of the window
          var link = $($(this).attr('href')).offset().top;
          var container = $('#elections-text-scroll').offset().top;
          var destination = link-container;
          $('#elections-text').animate({
            scrollTop: destination
          }, 500);
           return false;
        });
      });
    })(jQuery);


EOT;
    drupal_add_js($js_1, 'inline');
  }

  if ($view_mode == 'teaser' && isset($node->content['body'][0]['#markup'])) {
    $node->content['body'][0]['#markup'] = strip_tags($node->content['body'][0]['#markup'], '<p><br>');
    //dpm($node);
  }
  if (isset($node->content['field_migration_flag']) && !user_access('administer nodes') || $node->nid == 96) {
    unset($node->content['field_migration_flag']);
  }
  if ($view_mode == 'full') {
    $js_files = field_get_items('node', $node, 'field_js_files');

    if ($js_files) {
      foreach ($js_files as $js_file) {
        drupal_add_js(drupal_get_path('theme', 'atwork') . '/' . $js_file['value']);
      }
    }

    $js_effects = field_get_items('node', $node, 'field_js_effects');

    if ($js_effects) {
      foreach ($js_effects as $js_effect) {
        drupal_add_library('system', $js_effect['value']);
      }
    }

    $show_menu = field_get_items('node', $node, 'field_show_menu');
    if (isset($show_menu[0]['value']) && $show_menu[0]['value']) {
      $path = 'node/' . $node->nid;
      $parent = menu_link_get_preferred($path);
      //dpm($parent);
      $parameters = array(
          'active_trail' => array($parent['plid']),
          'only_active_trail' => FALSE,
          'min_depth' => $parent['depth']+1,
          'max_depth' => $parent['depth']+1,
          'conditions' => array('plid' => $parent['mlid']),
        );

      $children = menu_build_tree($parent['menu_name'], $parameters);

      if ($children) {
        $node->content['atwork_menu'] = array(
          '#prefix' => '<div class="atwork-menu">',
          '#suffix' => '</div>',
          '#weight' => 0,//
          'links' => menu_tree_output($children),
        );
        $node->content['body']['#weight'] = 1;
      }
    }

    $show_menu_siblings = field_get_items('node', $node, 'field_show_menu_siblings');
    if (isset($show_menu_siblings[0]['value']) && $show_menu_siblings[0]['value']) {

      $active_trail = menu_get_active_trail();
     //print_r($active_trail);
      end($active_trail);
      $parent = prev($active_trail);
      // Refresh update
      if(!isset($parent['plid'])){
        return;
      }


      $header_text = '';
      if (isset($parent['options']['attributes']['title']) && $parent['options']['attributes']['title']) {
        $header_text = $parent['options']['attributes']['title'];
      }

      //return;
      $parameters = array(
          'active_trail' => array($parent['plid']),
          'only_active_trail' => FALSE,
          'min_depth' => $parent['depth']+1,
          'max_depth' => $parent['depth']+1,
          'conditions' => array('plid' => $parent['mlid']),
        );

      $children = menu_build_tree($parent['menu_name'], $parameters);

      if ($children) {
        $node->content['atwork_menu'] = array(
          '#prefix' => '<div class="atwork-menu">' . $header_text,
          '#suffix' => '</div>',
          '#weight' => 0,//
          'links' => menu_tree_output($children),
        );
        $node->content['body']['#weight'] = 1;
      }
    }
  }
}


/**
 * Implements hook_menu();
 * Callback function to keep track of who has seen tutorials
 */
function atwork_misc_menu() {
  drupal_add_library('system', 'drupal.ajax');
  $items = array();
  $items['tutorials/ajax/%'] = array(
    'delivery callback' => 'ajax_deliver',
    'title' => 'Tutorial Callback',
    'description' => 'To check if user has seen tutorial',
    'page callback' => 'atwork_misc_tutorial_check',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Used in conjunction with atwork_misc_menu();
 * Function for JQuery to call asynchronosly
 */
function atwork_misc_tutorial_check($argument) {
  global $user;

  if(isset($argument) && $argument == 'tutorial=true'){
    $account = user_load($user->uid);
    // Mark them as though they have seen it
    $edit = array(
      'field_home_page_tutorial' => array(
        'und' => array(
          0 => array(
            'value' => 0
          ),
        ),
      ),
    );
    user_save($account, $edit);
  }
    // It is a stinker about taking new js
    //drupal_clear_js_cache();
}


function atwork_misc_css_alter(&$css) {
  // Remove default ui themes
  unset($css['misc/ui/jquery.ui.theme.css']);

}

/**
 * Implements hook_block_view_alter().
 */
function atwork_misc_block_view_alter(&$data, $block) {
  //dpm($block);
  if ($block->module == 'boxes' && isset($data['controls'])) {

  }
  //dpm($data);
}

/*
 * Implementation of hook_node_view_alter()
 *
 * Move node links (really only the read more link) to the end of all links
 *
 * This pushes the read more link to the end
 */
function atwork_misc_node_view_alter(&$build) {
  if ($build['#view_mode'] == 'teaser') {
    if (isset($build['links']['node'])) {
      $node_links = $build['links']['node'];
      unset($build['links']['node']);
      $build['links']['node'] = $node_links;
    }
  }
}

/*
 * Implementation of hook_menu_alter()
 *
 * Need to edit the add user callback as it was interferring with our VBO view
 *
 * Provide some different link titles for nodes
 */
function atwork_misc_menu_alter(&$items) {
  $items['admin/people/create'] = array(
    'title' => 'Add user',
    'description' => 'Manage user accounts, roles, and permissions.',
    'page callback' => 'user_admin',
    'page arguments' => array('create'),
    'access arguments' => array('administer users'),
    'position' => 'left',
    'weight' => -4,
    'file' => 'modules/user/user.admin.inc',
  );


  if (isset($items['node/%node/edit']['title callback'])) {
    unset($items['node/%node/edit']['title callback']);
  }
  if (isset($items['node/%node/edit']['title arguments'])) {
    unset($items['node/%node/edit']['title arguments']);
  }
  if (isset($items['node/%node/view']['title callback'])) {
    unset($items['node/%node/view']['title callback']);
  }
  if (isset($items['node/%node/view']['title arguments'])) {
    unset($items['node/%node/view']['title arguments']);
  }
  if (isset($items['node/%node/moderation'])) {
    $items['node/%node/moderation']['title'] = t('Revisions');
  }
  $items['node/%node/edit']['title'] = t('Edit');
  $items['node/%node/view']['title'] = t('View');




  unset($items['search/user/%menu_tail']);
  unset($items['search/user']);

}

/*
 * Implementation of hook_admin_paths_alter()
 *
 * Use our theme to edit the user page
 */
function atwork_misc_admin_paths_alter(&$paths) {
    // Treat all user pages as not administrative.
    $paths['user/*'] = FALSE;
}

/*
 * Implementation of hook_form_alter()
 *
 * Many misc changes described within
 */
function atwork_misc_form_alter(&$form, &$form_state, $form_id) {
  // We decided that we always want Send subscriptions notifications to default to unchecked. There is no setting for this behaviour in the front end. We will do it here.
  if(isset($form['options']['subscriptions_notify']['subscriptions_notify']['#default_value']) && $form['options']['subscriptions_notify']['subscriptions_notify']['#default_value'] == TRUE){
    $form['options']['subscriptions_notify']['subscriptions_notify']['#default_value'] = FALSE;
  }

  // add date popups on comment admin
  if ($form['#id'] == 'views-exposed-form-comments-admin-page') {
    if (isset($form['#info']['filter-created']['label'])) {
      $form['#info']['filter-created']['label'] = '';
    }

    $form['created']['min']['#title'] = t('Start Date');
    $form['created']['max']['#title'] = t('End Date');
    $form['created']['min']['#type'] = 'date_popup';
    $form['created']['max']['#type'] = 'date_popup';
    $form['created']['min']['#date_format'] = 'Y-m-d';
    $form['created']['max']['#date_format'] = 'Y-m-d';
  }

  if ($form_id == 'quiz_report_form') {
    foreach ($form as $key => &$element) {
      if (is_numeric($key) && is_array($element) && isset($element['response']['#markup']) && $element['response']['#markup']) {
        $element['response']['#markup'] = html_entity_decode($element['response']['#markup']);
      }
    }
  }
  if ($form_id == 'reroute_email_settings') {
    $form['reroute_email_address']['#type'] = 'textarea';
  }
  global $user;

  if ($form_id == 'subscriptions_ui_node_form') {
    // remove subscribe to tag by author
    $remove_options = array();
    if (isset($form['params']['#value'])) {
      foreach ($form['params']['#value'] as $key => $option) {
        if ($option['field'] == 'tid' && $option['author_uid'] > -1) {
          $remove_options[] = $key;
        }
      }
    }

    foreach ($remove_options as $remove_option) {
      if (isset($form['params']['#value'][$remove_option])) unset($form['params']['#value'][$remove_option]);
      if (isset($form['wrapper']['subscriptions']['#options'][$remove_option])) unset($form['wrapper']['subscriptions']['#options'][$remove_option]);
      if (isset($form['wrapper']['updates']['#options'][$remove_option])) unset($form['wrapper']['updates']['#options'][$remove_option]);
      if (isset($form['wrapper']['comments']['#options'][$remove_option])) unset($form['wrapper']['comments']['#options'][$remove_option]);
    }

    array_unshift($form['#submit'], '_atwork_misc_subscriptions_submit');
    $form['wrapper']['#type'] = 'container';
    $form['wrapper']['footer']['#description'] = '';
    //dpm($form);

    $js = <<<EOT
jQuery(document).ready(function($) {
  $('#subscriptions-ui-node-form').hide();
  $('#node-tools .subscription-flyout-toggle').click(function() {
    $('#subscriptions-ui-node-form').slideToggle();
    return false;
  });
});

EOT;
    drupal_add_js($js, array('type' => 'inline', 'scope' => 'footer', 'weight' => 5));
  }
  if ($form['#id'] == 'views-exposed-form-content-page') {
    if (isset($form['field_migration_flag_value'])) {
      $form['field_migration_flag_value']['#options'] = array(
        'All' => 'All',
        1 => 'Flagged',
      );
    }
    //dpm($form);
  }

  // the subscription form doesn't tell you what you are subscribing to
  // do that here
  if ($form_id == 'subscriptions_add_form') {
    // node type
    if (isset($form['stype']['#value']) && $form['stype']['#value'] == 'node' &&
         isset($form['sid']['#value']) && is_numeric($form['sid']['#value'])) {
      if ($node = node_load($form['sid']['#value'])) {
        $form['header'] = array(
          '#markup' => t('Subscribe to') . ' ' . strtolower(node_type_get_name($node)) . ': <em>' . $node->title . '</em>',
          '#weight' => -10,
        );
      }
    }
    // taxa type
    if (isset($form['stype']['#value']) && $form['stype']['#value'] == 'taxa' &&
         isset($form['sid']['#value']) && is_numeric($form['sid']['#value'])) {
      if ($term = taxonomy_term_load($form['sid']['#value'])) {
        $form['header'] = array(
          '#markup' => t('Subscribe to tag:') . ' <em>' . $term->name . '</em>',
          '#weight' => -10,
        );
      }
    }
    // content type
    if (isset($form['stype']['#value']) && $form['stype']['#value'] == 'type' &&
         isset($form['sid']['#value']) && $types = node_type_get_types()) {
      if (isset($types[$form['sid']['#value']]->name)) {
        $form['header'] = array(
          '#markup' => t('Subscribe to all content of type:') . ' <em>' . $types[$form['sid']['#value']]->name . '</em>',
          '#weight' => -10,
        );
      }
    }
  }

  if ($form_id == 'subscriptions_ui_node_form') {
    //$form['#submit'][] = '_atwork_misc_subscriptions_submit';

  }

  // forward form
  if ($form_id == 'forward_form') {
    $form['message']['email']['#type'] = 'hidden';
    $form['message']['name']['#title'] = t('FROM');
    $form['message']['name']['#default_value'] = _atwork_display_name($GLOBALS['user']);
    $form['message']['name']['#disabled'] = TRUE;
    $form['message']['recipients']['#title'] = 'TO (Limited to organizations within the BC Public Service.)';
    $form['#validate'][] = 'atwork_forward_form_validate';
  }

  // add description to tags wherever they are
  if (isset($form['field_tags'])) {
    $atwork_tag_instructions = variable_get('atwork_tag_instructions','');

    $form['field_tags'][$form['field_tags']['#language']]['#description'] = $atwork_tag_instructions['value'];
  }

  if (isset($form['#node_edit_form'])) {

    $node = $form['#node'];

    // clear subscriptions checkbox if node is published
    if (isset($form['options']['subscriptions_notify']['subscriptions_notify']['#default_value']) && ($form['nid']['#value'] && $form['#node']->status)) {
      $form['options']['subscriptions_notify']['subscriptions_notify']['#default_value'] = FALSE;
    }

    // field permissions
    if (!_atwork_is_admin()) {
      if (isset($form['field_exclude_from_search'])) $form['field_exclude_from_search']['#access'] = FALSE;
      if (isset($form['field_show_menu'])) $form['field_show_menu']['#access'] = FALSE;
      if (isset($form['field_show_menu'])) $form['field_show_menu_siblings']['#access'] = FALSE;
      if (isset($form['field_news'])) $form['field_news']['#access'] = FALSE;
      if (isset($form['field_register'])) $form['field_register']['#access'] = FALSE;
      if (isset($form['field_group_special'])) $form['field_group_special']['#access'] = FALSE;
      if (isset($form['field_promoted'])) $form['field_promoted']['#access'] = FALSE;

      if (in_array($node->type, array('forum', 'question')) && isset($form['field_image'])) {
        $form['field_image']['#access'] = FALSE;
      }

      // let users have unpublished blog posts
      if ($node->type == 'blog') {
        $form['options']['#access'] = TRUE;
        $form['options']['sticky']['#access'] = FALSE;
        $form['options']['promote']['#access'] = FALSE;
      }
    }


    // only allow access to js fields to admins
    if (!isset($user->roles[3])) {
      if (isset($form['field_js_files'])) $form['field_js_files']['#access'] = FALSE;
      if (isset($form['field_js_effects'])) $form['field_js_effects']['#access'] = FALSE;
    }

    if (isset($form['field_migration_flag']) && !user_access('administer nodes')) {
      $form['field_migration_flag']['#access'] = FALSE;
    }

    // enforce revisions
    $form['revision_information']['revision']['#default_value'] = TRUE;
    $form['revision_information']['revision']['#disabled'] = TRUE;

    // if node is new hide log message
    if (!$form['nid']['#value']) {
      $form['revision_information']['#access'] = FALSE;
    }
    elseif(variable_get('atwork_settings_enforce_revision_message', 0)) {
      $form['revision_information']['log']['#required'] = TRUE;
    }

    // set access on tags
//    if (isset($form['field_tags']) && !user_access('edit terms in 6') && $form['#node']->type != 'blog') {
//      $form['field_tags']['#access'] = FALSE;
//    }

    // fix silly workbench_moderation issue https://drupal.org/node/1408858
    if (isset($form['workbench_moderation_state_current']['#value'])
      && isset($form['options']['workbench_moderation_state_new']['#options'][$form['workbench_moderation_state_current']['#value']]) ) {
      $form['options']['workbench_moderation_state_new']['#default_value'] = $form['workbench_moderation_state_current']['#value'];
      unset($form['options']['status']['#access']);
      $form['options']['status']['#disabled'] = TRUE;
      $form['options']['status']['#attributes'] = array(
        'class' => array(
          'hidden',
        ),
      );
    }
    $form['#validate'][] = 'atwork_node_form_validate';
    //dpm($form);
  }

  if ($form_id == 'contact_site_form') {
    $form['name']['#default_value'] = _atwork_display_name($GLOBALS['user']);
    $form['name']['#disabled'] = TRUE;
    $form['mail']['#disabled'] = TRUE;
    $form['#submit'][] = 'atwork_misc_contact_form_submit';
  }

  // hide alt field
  if (isset($form['field_image'])) {
    $form['field_image']['#after_build'][] = 'atwork_image_field_after_build';
  }

  // rename summary
  if (isset($form['#node_edit_form']) && isset($form['body']) && isset($form['body'][$form['body']['#language']][0]['summary'])) {
    $form['body'][$form['body']['#language']][0]['summary']['#title'] = t('Teaser');
    $form['body'][$form['body']['#language']][0]['summary']['#description'] = t('Leave blank to use trimmed value of full text as the teaser');
  }

  if ($form_id == 'article_node_form') {
    $form['options']['sticky']['#title'] = t('Top news story (sticky)');
    $form['options']['promote']['#title'] = t('Scrolling news (promoted)');
  }

  if ($form_id == 'search_block_form') {
    $form['actions']['submit']['#type'] = 'image_button';
    $form['search_block_form']['#suffix'] = _atwork_fa('search', 'style="cursor: pointer;" onclick="document.getElementById(\'search-block-form\').submit()"');
    $form['actions']['submit']['#value'] = '';
  }
  // Changing submit text and setting a message for flag
  if($form_id == 'flag_confirm'){
    $form['actions']['submit']['#value'] = t('Submit');
    $form['#submit'][] = 'flag_form_set_message';
}
}
// Helper function to set message once flag report is submitted
function flag_form_set_message(){
  drupal_set_message(t('Employee News has been notified.'), 'status', FALSE);
}


function _atwork_misc_ct_plural($name) {
  switch ($name) {
    case 'blog':
      return t('Blog entries');
    case 'article':
      return t('News');
    case 'announcement':
      return t('Announcements');
    case 'event':
      return t('Events');
    case 'wiki':
      return t('Wiki entries');
  }
  return $name;
}

/*
 * submit callback
 *
 * Add the drupal messages subscriptions module should
 */
function _atwork_misc_subscriptions_submit(&$form, &$form_state) {
  if (isset($form_state['values']['subscriptions'][1]) && isset($form_state['values']['updates'][1]) && isset($form_state['values']['params'][1])) {
    global $user;
    $params = array(
      'recipient_uid' => $user->uid,
    );

    $subscriptions = subscriptions_get($params);

    if (isset($form_state['values']['params'])) {
      foreach ($form_state['values']['params'] as $key => $sub) {
        switch ($sub['field']) {
          case 'nid':
            // this subscription is subscribed to
            if ($form_state['values']['subscriptions'][$key]) {
              // is this subscription new?
              if (!isset($subscriptions[$user->uid]['node']['nid'][$sub['value']])) {
                drupal_set_message(t('You have subscribed to this page.'));
              }
            }
            // this subscription is NOT subscribed to
            else {
              // did it exist previously?
              if (isset($subscriptions[$user->uid]['node']['nid'][$sub['value']])) {
                drupal_set_message(t('You have unsubscribed from this page.'));
              }
            }
            break;
          case 'type':
            // this subscription is subscribed to
            if ($form_state['values']['subscriptions'][$key]) {
              // is this subscription new?
              // and without an author
              if ($form_state['values']['params'][$key]['author_uid'] == -1 && !isset($subscriptions[$user->uid]['node']['type'][$sub['value']])) {
                drupal_set_message(t('You have subscribed to all <em>!content_type</em>.', array('!content_type' => _atwork_misc_ct_plural($form_state['values']['params'][$key]['value']))));
              }
              // with an author
              elseif ($form_state['values']['params'][$key]['author_uid'] && !isset($subscriptions[$user->uid]['node']['type'][$sub['value']][$form_state['values']['params'][$key]['author_uid']]) && $author = user_load($form_state['values']['params'][$key]['author_uid'])) {
                drupal_set_message(t('You have subscribed to all !content_type by <em>!name</em>.', array('!content_type' => _atwork_misc_ct_plural($form_state['values']['params'][$key]['value']), '!name' => theme('username', array('account' => $author, 'new_window' => TRUE)))));
              }
            }
            // this subscription is NOT subscribed to
            else {
              // did it exist previously?
              if (isset($subscriptions[$user->uid]['node']['type'][$sub['value']])) {
                if ($form_state['values']['params'][$key]['author_uid'] == -1) {
                  drupal_set_message(t('You have unsubscribed from all <em>!content_type</em>.', array('!content_type' => _atwork_misc_ct_plural($form_state['values']['params'][$key]['value']))));
                }
                elseif ($form_state['values']['params'][$key]['author_uid'] && isset($subscriptions[$user->uid]['node']['type'][$sub['value']][$form_state['values']['params'][$key]['author_uid']])) {
                  $author = user_load($form_state['values']['params'][$key]['author_uid']);
                  if ($author) {
                    drupal_set_message(t('You have unsubscribed from all <em>!content_type</em> by <em>!name</em>.', array('!content_type' => _atwork_misc_ct_plural($form_state['values']['params'][$key]['value']), '!name' => theme('username', array('account' => $author, 'new_window' => TRUE)))));
                  }
                }
              }
            }
            break;
          case 'tid':
            if (isset($form_state['values']['params'][$key]['value']) && $form_state['values']['params'][$key]['value'] && $term = taxonomy_term_load($form_state['values']['params'][$key]['value'])) {
              // this subscription is subscribed to
              if ($form_state['values']['subscriptions'][$key]) {
                // is this subscription new?
                // and without an author
                if ($form_state['values']['params'][$key]['author_uid'] == -1 && !isset($subscriptions[$user->uid]['node']['tid'][$sub['value']])) {
                  drupal_set_message(t('You have subscribed to all content with the <em>!tag</em> tag.', array('!tag' => l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('onclick' => 'window.open(this.href); return false;'))))));
                }
                // with an author
                elseif ($form_state['values']['params'][$key]['author_uid'] && !isset($subscriptions[$user->uid]['node']['tid'][$sub['value']][$form_state['values']['params'][$key]['author_uid']]) && $author = user_load($form_state['values']['params'][$key]['author_uid'])) {
                  drupal_set_message(t('You have subscribed to all content by <em>!name</em> with the <em>!tag</em> tag.', array('!name' => theme('username', array('account' => $author, 'new_window' => TRUE)), '!tag' => l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('onclick' => 'window.open(this.href); return false;'))))));
                }
              }
              // this subscription is NOT subscribed to
              else {
                // did it exist previously?
                if (isset($subscriptions[$user->uid]['node']['tid'][$sub['value']])) {
                  if ($form_state['values']['params'][$key]['author_uid'] == -1) {
                    drupal_set_message(t('You have unsubscribed from all content with the <em>!tag</em> tag.', array('!tag' => l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('onclick' => 'window.open(this.href); return false;'))))));
                  }
                  elseif ($form_state['values']['params'][$key]['author_uid'] && isset($subscriptions[$user->uid]['node']['tid'][$sub['value']][$form_state['values']['params'][$key]['author_uid']])) {
                    $author = user_load($form_state['values']['params'][$key]['author_uid']);
                    if ($author) {
                      drupal_set_message(t('You have unsubscribed from all content by <em>!name</em> with the <em>!tag</em> tag.', array('!name' => theme('username', array('account' => $author, 'new_window' => TRUE)), '!tag' => l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('onclick' => 'window.open(this.href); return false;'))))));
                    }
                  }
                }
              }
            }
            break;
        }
      }
    }
  }
}

/*
 * Afterbuild Callback for field_image
 *
 * Hide the alt field as it is useless (we set alt to match title)
 */
function atwork_image_field_after_build(&$element) {
  if ((isset($element['parents'][0]) && $element['parents'][0] = 'field_image') ||
       (isset($element['#parents'][0]) && $element['#parents'][0] = 'field_image') &&
       isset($element['#language']))     {
    // hide alt field
    for ($i = 0; $i <= $element[$element['#language']]['#file_upload_delta']; $i++) {
      $element[$element['#language']][$i]['alt']['#access'] = FALSE;
    }
  }

  return $element;
}

/*
 * Implementation of hook_field_widget_alter()
 *
 * Change the wording on image field from Add a new file to add a new image
 *
 * Override the js file provided by node module in order to change
 * the "summary" into the "teaser"
 */
function atwork_misc_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name'])) {
    // override the text.js file so we can use "Teaser" instead of "Summary"
    if ($element['#field_name'] == 'body' && isset($element['summary'])) {
      $element['summary']['#attached']['js'] = array(
        0 => drupal_get_path('module', 'atwork_misc') . '/text.js'
      );
    }
    if ($element['#field_name'] == 'field_image') {
      $element['#file_upload_title'] = t('Add a new image');
    }
  }

  if (isset($element['summary'])) {
//    drupal_add_css('div.text-summary-wrapper fieldset.filter-wrapper { display: none; }', $option['type'] = 'inline');
//    drupal_add_js(drupal_get_path('module', 'atwork_misc') . '/textarea-summary.js');
//    $element['summary']['#type'] = 'text_format';
//    $element['summary']['#format'] = $element['#format'];
  }
}

/*
 * Validation Callback for forward_form
 *
 * Validate the recipient email addresses
 *
 * Add quotes around the from name to fix email encoding
 */
function atwork_forward_form_validate($form, &$form_state) {
  _atwork_validate_emails($form_state['values']['recipients'], 'recipients', $form['form_token']['#default_value']);
  if (form_get_errors()) return;

  // add quotes around the name because forward module doesn't
  // we will later remove them from the subject and body in atwork_mail and
  $form_state['values']['name'] = '"' . $form_state['values']['name'] . '"';
}

function atwork_node_form_validate($form, &$form_state) {
  //dpm($form_state);
  if (isset($form['field_tags'])) {
    $all_messages = drupal_get_messages();
    foreach ($all_messages as $type =>  $messages) {
      foreach ($messages as $message) {
        if ($message == 'Tags field is required.') {
          $message = 'Please add tag(s) to help promote your content in related topics.';
        }
        drupal_set_message($message, $type);
      }
    }
  }
}

/*
 * Submit Function for contact_site_form
 *
 * Redirect to a confirmation node
 */
function atwork_misc_contact_form_submit($form, &$form_state) {
  unset($_REQUEST['destination']);
  unset($form['#redirect']);
  $form_state['redirect']  = 'feedback/confirmation';
}

/**
 * Implements hook_wysiwyg_editor_settings_alter()
 *
 * Set the Moono skin cause it's awesome
 */
function atwork_misc_wysiwyg_editor_settings_alter(&$settings, $context) {
  global $user;


  if ($context['profile']->editor == 'ckeditor') {
    $settings['disableNativeSpellChecker'] = FALSE;
    $settings['startupFocus'] = FALSE;
    $settings['skin'] = 'moono';
    $settings['allowedContent'] = TRUE;
    $settings['entities'] = FALSE;
    $settings['basicEntities'] = FALSE;
    //$settings['disableReadonlyStyling'] = TRUE;
    //watchdog('atwork', print_r($settings, TRUE));

    if ($context['profile']->format == 'comment') {
      $settings['height'] = 220;
    }
  }


  if ($context['profile']->editor == 'markitup') {

  }
}



function atwork_misc_init() {
  //

  // ugly hack for scrolling news
  if (drupal_is_front_page()) {
    $js = <<<EOD
jQuery(document).ready(function($) {
  if ($('#block-views-home_page_blocks-block_2 .view-display-id-block_2').length) {
    $('#block-views-home_page_blocks-block_2 .view-display-id-block_2').css("padding", 0);
  }
});
EOD;
    drupal_add_js($js, 'inline');
  }

  // admin css
  if (arg(0) == 'admin') {
    $css = <<<EOD
.views-ui-dialog #views-ajax-popup {
  background-color: white;
}
EOD;
    drupal_add_css($css, array('type' => 'inline'));
  }
  drupal_add_css('.ckeditor-hide{visibility: hidden;}', array('type' => 'inline'));

  // for now lets add this all the time
  drupal_add_library('system', 'drupal.collapse');

//  drupal_add_http_header(
//    'Cache-Control',
//    'cache',
//    FALSE
//  );


  //drupal_add_css('.chzn-choices input {width: 100%} .chzn-choices .search-field {width: 100%}', $option['type'] = 'inline');
  //node_delete(7172);
  //node_access_rebuild();
  //cache_clear_all();
//  $atwork_ldap = new atwork_ldap;
//
//  $result = $atwork_ldap->query('person', 'mail', 'Trace.Muldoon@gov.bc.ca');
//
//  $image = base64_decode($result['thumbnailphoto'][0]);
//
//  dpm($image);
//
//  $image = '<img src="data:image/jpeg;base64,'. $image .'">';
//
//  echo $image;

  //dpm($result);




}

/*
 * Implementation of hook_views_pre_view()
 *
 * Add a link to subscribe to taxonomy terms on their respective landing page
 */
function atwork_misc_views_pre_view(&$view, &$display_id, &$args) {
  if ($view->name == 'term_landing_page' && $display_id == 'page' && $view->args[0] && user_access('subscribe to taxonomy terms')) {
    global $user;

    $term = taxonomy_term_load($view->args[0]);

    require_once(drupal_get_path('module', 'subscriptions') . '/subscriptions.module');

    $sid = subscriptions_get_subscription($user->uid, 'node', 'tid', $view->args[0]);

    $attributes = array(
      'query' => array(
        'destination' => current_path(),
      ),
    );

    if (!$sid) {
      $header = l(t('Get notified about content tagged with "!term"', array('!term' => $term->name)), 'subscriptions/add/taxa/' . $view->args[0], $attributes);
    }
    else {
      $header = l(t('Stop getting notified about content tagged with "!term"', array('!term' => $term->name)), 'subscriptions/del/taxa/' . $view->args[0], $attributes);
    }


    $options = array(
      'id' => 'area',
      'table' => 'views',
      'field' => 'area',
      'empty' => FALSE,
      'content' => $header,
      'format' => 'full_html',
      'tokenize' => 0,
    );
    $view->display_handler->set_option('header', array('text' => $options));

  }
}

/**
 * Implements hook_view_pre_render()
 *
 * If a view uses field_display_name but it isn't set, provide the user->name instead
 */
function atwork_misc_views_pre_render(&$view) {
  if (isset($view->field['field_display_name']) && isset($view->field['uid'])) {
    foreach ($view->result as &$row) {
      if (isset($row->field_field_display_name) && (isset($row->_field_data['users_node_uid']['entity']->uid) || isset($row->_field_data['users_comment_uid']['entity']->uid))) {
        if (isset($row->_field_data['users_node_uid']['entity']->uid)) {
          $account = $row->_field_data['users_node_uid']['entity'];
        }
        elseif ($row->_field_data['users_comment_uid']['entity']->uid) {
          $account = $row->_field_data['users_comment_uid']['entity'];
        }
        if (!$row->field_field_display_name) {
          $row->field_field_display_name = array(
            0 => array(
              'rendered' => array(
                '#markup' => $account->name,
                '#access' => TRUE,
              ),
              'raw' => array(
                'value' => $account->name,
                'format' => NULL,
                'safe_value' => $account->name,
              ),
            ),
          );
        }

        if ((!isset($row->_field_data['users_node_uid']['entity']->uid) || !$row->_field_data['users_node_uid']['entity']->uid) &&
            (!isset($row->_field_data['users_comment_uid']['entity']->uid) || !$row->_field_data['users_comment_uid']['entity']->uid)) {
          $view->atwork_strip_anon_links = TRUE;
          $row->field_field_display_name = array(
            0 => array(
              'rendered' => array(
                '#markup' => variable_get('anonymous', 'Guest'),
                '#access' => TRUE,
              ),
              'raw' => array(
                'value' => variable_get('anonymous', 'Guest'),
                'format' => NULL,
                'safe_value' => variable_get('anonymous', 'Guest'),
              ),
            ),
          );
        }
      }
    }
  }




}

/*
 * Implementation of hook_views_post_render()
 *
 * For some reason we can get user links to the anon page so just strip them
 */
function atwork_misc_views_post_render(&$view, &$output, &$cache) {
  if (isset($view->atwork_strip_anon_links)) {
    if (!$view->atwork_strip_anon_links) {
      return;
    }


    $dom = filter_dom_load($output);
    $xpath = new DOMXPath($dom);

    foreach ($xpath->query("//a[contains(@href,'user/0')]") as $link) {
      $newelement = $dom->createTextNode($link->nodeValue);
      $link->parentNode->replaceChild($newelement, $link);
      //dpm($link->nodeValue);
    }

    $output = filter_dom_serialize($dom);
  }

  if ($view->name == 'home_page_blocks' && $view->current_display == 'block_2') {

  }
  if ($view->name == 'home_page_blocks_zen' && in_array($view->current_display, array('block_1', 'block_3', 'block_4'))) {
    $output = str_replace('[icon-article]',       _atwork_fa('newspaper-o', 'title="News Article"'), $output);
    $output = str_replace('[icon-poll]',          _atwork_fa('check-square-o', 'title="Poll"'), $output);
    $output = str_replace('[icon-blog]',          _atwork_fa('pencil-square-o', 'title="Blog Entry"'), $output);
    $output = str_replace('[icon-event]',         _atwork_fa('calendar', 'title="Event"'), $output);
    $output = str_replace('[icon-forum]',         _atwork_fa('comments-o', 'title="Forum Topic"'), $output);
    $output = str_replace('[icon-gallery]',       _atwork_fa('camera', 'title="Gallery"'), $output);
    $output = str_replace('[icon-section]',       _atwork_fa('newspaper-o', 'title="Group"'), $output);
    $output = str_replace('[icon-section_page]',  _atwork_fa('info', 'title="Group Page"'), $output);
    $output = str_replace('[icon-page]',          _atwork_fa('info', 'title="Background Page"'), $output);
    $output = str_replace('[icon-image]',         _atwork_fa('camera', 'title="Image"'), $output);
    $output = str_replace('[icon-question]',      _atwork_fa('question-circle', 'title="Question"'), $output);
    $output = str_replace('[icon-answer]',        _atwork_fa('question-circle', 'title="Answer"'), $output);
  }
}

/*
 * Implementation of hook_preprocess_node()
 *
 * Hide some normal node elements on home page
 *
 * Restrict field_image to one image when viewing teaser
 */
function atwork_misc_preprocess_node(&$variables) {
  // custom node links
  if (isset($variables['content']['links']) && $variables['content']['links']) {
    $variables['classes_array'][] = 'node-tools';

    // re-arrange the links
    $variables['content']['footer'] = array(
      '#weight' => 100,
      '#prefix' => '<div id="node-tools">',
      '#suffix' => '</div>',
      'links' => $variables['content']['links'],
    );

    $variables['content']['footer']['links'] = $variables['content']['links'];
    $variables['content']['footer']['links']['#weight'] = 80;
    unset($variables['content']['links']);

    if ($variables['type'] == 'wiki' && isset($variables['content']['footer']['links']['comment']['#links']['comment-add']['href'])) {
      $variables['content']['footer']['links']['comment']['#links']['comment-add']['href'] .= '/discussion';
    }
//    dpm($variables);
//    dpm($variables['content']['footer']['links']);

    if (isset($variables['content']['rate_thumbup_nodes']) && $variables['content']['rate_thumbup_nodes']) {
      $variables['content']['footer']['rate_thumbup_nodes'] = $variables['content']['rate_thumbup_nodes'];
      $variables['content']['footer']['rate_thumbup_nodes']['#weight'] = 60;
      // Remove odd label display that came with update
      // https://www.drupal.org/node/2196731
      $variables['content']['footer']['rate_thumbup_nodes']['#title'] = '';
      unset($variables['content']['rate_thumbup_nodes']);
    }
    if (isset($variables['content']['ical_link']) && $variables['content']['ical_link']) {
      $variables['content']['footer']['ical_link'] = $variables['content']['ical_link'];
      $variables['content']['footer']['ical_link']['#weight'] = 60;
      unset($variables['content']['ical_link']);
    }
    if ((isset($variables['content']['subscriptions_ui']['wrapper']['subscriptions']) && $variables['content']['subscriptions_ui']['wrapper']['subscriptions'])
         || (isset($variables['content']['subscriptions_ui']['subscriptions_ui_form']['wrapper']['subscriptions']) && $variables['content']['subscriptions_ui']['subscriptions_ui_form']['wrapper']['subscriptions'])) {
      $variables['content']['footer']['subscriptions_ui'] = $variables['content']['subscriptions_ui'];
      $variables['content']['footer']['subscriptions_ui']['#weight'] = 999;
      $variables['content']['footer']['subscriptions_ui_toggle'] = array(
        '#markup' => '<div class="node-links first"><a href="#" title="Subscribe" class="subscription-flyout-toggle">' . _atwork_fa('bullhorn') . 'Subscribe</a></div>',
        '#weight' => 0,
      );
      unset($variables['content']['subscriptions_ui']);
    }

    // add font-awesome icons
    _atwork_add_link_icons($variables);

    // if flag link exists, move it to the end
    //dpm($variables['content']);

    $links = drupal_render($variables['content']['footer']['links']);
    //dpm($links);
    // sooooooooooooo hacky :(
    $links = str_replace('<ul class="links inline">', '', $links);
    $links = str_replace('</ul>', '', $links);
    $links = str_replace('<li', '<div class="node-links"><span', $links);
    $links = str_replace('</li>', '</span></div>', $links);

    $links = str_replace('<div class="node-links"><span class="node-readmore', '<div class="node-links last"><span class="node-readmore', $links);
    $links = str_replace('<div class="node-links"><span class="flag-abuse_nodes last">', '<div class="node-links last"><span class="flag-abuse_nodes last">', $links);
    //dpm($links);
//    $first_div = substr($links, 0, 24);
//
//    if ($first_div == '<div class="node-links">') {
//      $links = substr_replace($links, '<div class="node-links first">', 0, 24);
//    }

    if ($links) {
      $variables['content']['footer']['links'] = array(
        '#markup' => $links,
        '#weight' => 10,
      );
    }
  }

  if (drupal_is_front_page()) {
    $variables['title'] = '';
    unset($variables['content']['links']);
    unset($variables['content']['subscriptions_ui']);
    unset($variables['content']['footer']);
  }

  // when viewing teasers only show the first image
  if ($variables['view_mode'] == 'teaser') {
    if (isset($variables['content']['field_image']['#items'])) {
      $num_images = count($variables['content']['field_image']['#items']);
      for ($i=1; $i<$num_images; $i++) {
        unset($variables['content']['field_image'][$i]);
        unset($variables['content']['field_image']['#items'][$i]);
      }
    }
  }

//  if (isset($variables['uid'])) {
//    if ($user = user_load($variables['uid'])) {
//      $username_variables = array(
//        'account' => $user,
//        'uid' => $variables['uid'],
//        'new_window' => FALSE,
//        'name' => $variables['node']->name,
//        'extra' => '',
//        'attributes_array' => array(),
//      );
//      $variables['name'] = theme('username', $username_variables);
//    }
//    dpm($username_variables);
//    dpm($variables['node']);
//  }
}

function atwork_misc_process_html(&$variables) {
  if (arg(0) == 'ecards' && arg(1) == 'all') {
    $variables['head_title'] = 'Ecards - All | @Work';
  }
}

function atwork_misc_process(&$variables, $hook) {
  //dpm($hook);
}


function atwork_misc_preprocess(&$variables, $hook) {
  if ($hook == 'page') {
    //dpm($variables);
  }

}

function atwork_misc_preprocess_block(&$variables) {
  if ($variables['block']->module == 'boxes') {
    if (strpos($variables['content'], 'class="use-ajax active">Edit Box')) {
      $variables['content'] = str_replace('class="use-ajax active">Edit Box', 'title="AtWork editors can edit this - refresh the page after to see your changes" class="use-ajax active">Edit Box', $variables['content']);
    }
  }
}

function atwork_misc_js_alter(&$javascript) {
  if (isset($javascript['sites/all/libraries/superfish/sfsmallscreen.js'])) {
    $file = drupal_get_path('module', 'atwork_misc') . '/sfsmallscreen.js';
    $javascript['sites/all/libraries/superfish/sfsmallscreen.js']['data'] = $file;
  }

  //dpm($javascript);
}

/**
 *
 * Implementation of hook_flag_flag()
 *
 * Using a hook instead of a rule cause rules doesn't work
 *
 * Act on an object being flagged.
 *
 * @param $flag
 *  The flag object.
 * @param $entity_id
 *  The id of the entity the flag is on.
 * @param $account
 *  The user account performing the action.
 * @param $flagging_id
 *  The flagging entity.
 */
function atwork_misc_flag_flag($flag, $entity_id, $account, $flagging) {

  $message = t('The following user reported an inapproriate item for your review.') . '<br /><br />';
  $message .= '<strong>' . t('User') . ':</strong> ' . l(_atwork_display_name($account), 'user/' . $account->uid) . '<br />';

  $reason = field_get_items('flagging', $flagging, 'field_reason');

  if ($flag->entity_type == 'comment') {
    $comment = comment_load($entity_id);
    $node = node_load($comment->nid);
    $ct_name = node_type_get_name($node);
    $subject = t('A comment has been flagged on the !ct-name: !title', array('!ct-name' => $ct_name, '!title' => $node->title));
    $link = l($node->title, 'node/' . $node->nid, array(
      'query' => array(
        'c' => $comment->cid,
      ),
      'fragment' => 'comment-' . $comment->cid,
    ));
  }
  elseif ($flag->entity_type == 'node') {
    $node = node_load($entity_id);
    $ct_name = node_type_get_name($node);
    if (in_array(substr($ct_name, 0, 1), array('A', 'E', 'I', 'O', 'U'))) {
      $subject_header = ucfirst(t('an')) . ' ' . $ct_name;
    }
    else {
      $subject_header = ucfirst(t('a')) . ' ' . $ct_name;
    }
    $subject = t('!node-type has been flagged', array('!node-type' => $subject_header));
    $link = l($node->title, 'node/' . $node->nid);
  }

  $message .= '<strong>' . t('Item') . ':</strong> ' . $link . '<br />';
  $message .= '<strong>' . t('Reason') . ':</strong> ' . $reason[0]['value'] . '<br /><br />';

  $message .= t('<br />---<br />Manage the reported items list at') . ':<br />';
  $message .= l('https://gww.gov.bc.ca/admin/content/flag_content', 'admin/content/flag_content');


  $params = array(
    'subject' => $subject,
    'body' => $message,
  );

  drupal_mail('atwork_mail', 'atwork_mail_default', variable_get('site_mail', 'EmployeeNews@gov.bc.ca'), language_default(), $params, $account->mail);
}

/**
 * Implements hook_node_presave();
 */
function atwork_misc_node_presave($node) {
  // problem: reverting a node automatically sets $node->subscriptions_notify
  // so we need to detect if this is a revision
  if (isset($node->log) && strpos($node->log, 'opy of the revision from <em class="placeholder">')) {
    $node->subscriptions_notify = FALSE;
  }
}

function atwork_misc_preprocess_field(&$variables) {
  $field_name = $variables['element']['#field_name'];
  if ($field_name == 'field_tags') {
    $variables['label'] = _atwork_fa('tag') . $variables['label'];
  }
}

function atwork_misc_views_query_alter(&$view, &$query) {
  if ($view->name == 'home_page_blocks_zen' && ($view->current_display == 'block' || $view->current_display == 'attachment_1')) {
    $query->table_queue['field_data_field_promoted']['join']->type = 'LEFT';
    unset($query->table_queue['field_data_field_promoted']['join']->extra[1]);
  }
}


/**
 * Implements hook_block_info().
 * Short term solution to display twitter block on front page.
 */
function atwork_misc_block_info(){
  //dpm($blocks);
  $blocks = array();
  $blocks['twitter_block'] = array(
    'info' => t("twitter_block"),
    );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function atwork_misc_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case ('twitter_block'):
      $block['subject'] = '';
      $block['content'] = _atwork_misc_block_content();
      drupal_add_js(drupal_get_path('module', 'atwork_misc').'/atwork_misc_block.js');
      break;
  }
  return $block;
}

function _atwork_misc_block_content(){
  // TODO - find an api or json that you can pull medal counts off of
  $gold = 0;
  $silver = 0;
  $bronze = 0;
  // Parse the medal count .csv
  $fh = fopen(drupal_get_path('module', 'atwork_misc').'/olympic/olympic.csv', "r");
  if(isset($fh)){
    while(($row = fgetcsv($fh, ",")) !== FALSE){
      $gold = $row[0];
      $silver = $row[1];
      $bronze = $row[2];
    }
  }
  fclose($fh);
  // Add the medal banner
  $img = drupal_get_path('module', 'atwork_misc') . '/images/2medals_382x80.png';
  $output = <<<EOL
<div id="olympic_block_container">
  <div id="twitter_feed_div" align="left"><a class="twitter-timeline" data-width="600" data-height="300" data-dnt="true" data-chrome="noheader nofooter transparent noborder" href="https://twitter.com/TheCrownCa">Tweets by TheCrownCa</a> <script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div>
</div>
<div id="olympic_medal_count_containers">
  <!--<div id="olympic_background_image">
    <div id="olympic_gold_medal_count_container">$gold</div>
    <div id="olympic_silver_medal_count_container">$silver</div>
    <div id="olympic_bronze_medal_count_container">$bronze</div>
  </div>-->
  <!--<div id="olympic_placeholder_for_additional_content"> <a href="http://olympic.ca/" _target="blank">Canadian Olympic Team Official Website</a></div>-->
  <div class="royalDYK">
    <img src="/sites/all/themes/atwork_zen/images/royal-tour2016.jpg" />
    <h1>Did You Know?</h1>
    <p>When meeting Members of the Royal Family, there is no requirement to wear a hat, though it is entirely acceptable to do so. Hats are not normally worn at functions after 6:30 p.m.</p>
  </div>
</div>
<!--<div id="olympic_placeholder_for_additional_content2"> This box can also hold additional content</div>-->
<div id="olympic_block_roll_up_down"> + </div>
</div>
EOL;

  return $output;
}


/**
 * implements hook_field_access, hiding certain forms from user
 */
function atwork_misc_field_access($op, $field, $entity_type, $entity, $account){
  if($op == "edit" && ($field['field_name'] ==  'field_sticky_start_date' || $field['field_name'] == 'field_sticky_to_activity_feeds')){
    return false;
     // if not an admin hide important user fields
    if (!user_access('administer users')) {
      return false;
    }
    return true;

  }
  if($op == "edit" && $field['field_name'] ==  'field_feed_options' ){
    return false;
  }
  if($op == "edit" && $field['field_name'] ==  'field_gal_employee_number' ){
    return false;
  }

}
