<?php
// Premiers awards application pages
define("PA_APP_NID", 5990);
define("PA_LP_NID", 5991);

// Premier's awards webcast registration pages
//define("PA_REG_FORM_NID", 10241); // 2014 Webcast Reg
//define("PA_REG_CONF_NID", 10242); // 2014 Confirmation page
define("PA_REG_FORM_NID", 13361); // 2015 Webcast Reg, the webform we create
define("PA_REG_CONF_NID", 13362); // 2015 Confirmation page, created as a background page dynamically updated with info below



/**
 * BEGINNING OF WEBCAST REGISTRATION SECTION
 */
function _atwork_prem_awards_registration_confirmation($sid = 0) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  // this is the start of the page, displayed no matter what dates are selected
  $output = <<<EOT
<h2>Thank you for registering!</h2>
<p>Go to the <strong><a href="http://video.web.gov.bc.ca/psa/pa/vod/" target="_blank" >Premier's Awards webcast stage,</a></strong> to test out the setup and watch the webcast on show day. The stage highlights the next scheduled webcast.</p>
<p style="margin-bottom:0;">Test out: </p>
<ul style="margin-top:0;">
  <li> Is the video playing? Allow 30 seconds for buffering. </li>
  <li> Can you hear the video's audio? Are your speakers on? (Audio for the webcast will be directly through your computer speakers. Audio is not available through the phone) </li>
</ul>
<p><strong>Technical Troubles?</strong></p>
<p>Please refresh your browser (IE 11, Chrome, Firefox). <br />
If neither of these options work, please call 250-387-7000 â€“ option#1 or toll free at 1-800-387-7000</p>

<hr />

EOT;

  // this is the event-specific details. We might want to add links, etc, key numbers corrospond with the $submission array
  $dates = array(
    15 => "Interior/North: October 18 <br />
  <a href=\" https://gww.gov.bc.ca/sites/default/files/ics/2018/premiers-innovation-and-excellence-awards-interiornorth/event.ics \" > Add to your Outlook Calendar </a></p><hr />
  ",
    5 => "Vancouver Island/Lower Mainland: October 11 <br />
  <a href=\"  https://gww.gov.bc.ca/sites/default/files/ics/2018/premiers-innovation-and-excellence-awards-lower-mainland-vanisland/event.ics \" > Add to your Outlook Calendar </a></p><hr />
  ",
    7 => "Lower Mainland: November 9 <br />
  <a href=\" https://gww.gov.bc.ca/sites/default/files/ics/2017/premiers-innovation-and-excellence-awards-lower-mainland/event.ics \" > Add to your Outlook Calendar </a></p><hr />
  " ,
  );
//Check array numbers to match; 15 Interior North, 7 Lower Mainland, 5 is Vancouver Island

  // get the sid from GET if possible
  if (!$sid && isset($_GET['sid']) && $_GET['sid'] && is_numeric($_GET['sid'])) {
    $sid = $_GET['sid'];
  }

  if ($sid) {
    $submission = webform_get_submission(PA_REG_FORM_NID, $sid);
    // this output depends on a submission existing
    /* $output .= <<<EOT
<div class="field-label-above"><div class="field-label">Registrant Name:&nbsp;</div><div class="field-items"><div class="field-item odd">{$submission->data[12][0]}</div></div></div>
<div class="field-label-above"><div class="field-label">Ministry:&nbsp;</div><div class="field-items"><div class="field-item odd">{$submission->data[14][0]}</div></div></div>
<h2>You registered:</h2>
EOT; */

    $output .= "<strong>You registered:</strong>";
    foreach ($dates as $key => $value) {
      if (isset($submission->data[$key][0]) && $submission->data[$key][0]) {
        $output .= "<p>";
        $output .= $submission->data[$key][0];
        $output .= " person(s) for ";
        $output .= $value;
      }
    }

  $output .= <<<EOT
    <div class="field-label-above">
      <div class="field-label">
        <p style="margin-bottom:0;">You can also:</p>
      </div>
    </div>
    <ul style="margin-top:0;">
      <li> Add the webcast link to your &quot;Favourites&quot; on your browser for quick access on show day. </li>
      <li> Subscribe to the tag for <a href="https://gww.gov.bc.ca/tags/premiers-awards"> Premier's Awards </a> and get email alerts of new related content and discussion. </li>
      <li> Contact Alysia Johnson (<a href="mailto:Alysia.Johnson@gov.bc.ca?Subject=Premier's%20awards%202015" >Alysia.Johnson@gov.bc.ca</a>) for other event information. </li>
    </ul>
EOT;

  }
  else {
    // what if a user comes to this page directly. Send them back to the form?
    drupal_goto('node/' . PA_REG_FORM_NID);
  }


  return $output;
}

// On submit send an email.
function atwork_prem_awards_registration_submit($form, &$form_state) {
  $to = $form_state['input']['submitted']['user']['confirmation_email'];

  // applicant email
  $params = array(
    'subject' => 'Premier\'s Awards Webcast Confirmation',
    'body' => _atwork_prem_awards_registration_confirmation($form_state['values']['details']['sid']),
  );

  $form_state['redirect'] = array(
    'node/' . PA_REG_CONF_NID,
    array(
      'query' => array(
        'sid' => $form_state['values']['details']['sid'],
      ),
    ),
  );

  drupal_mail('atwork_mail', 'atwork_mail_default', $to, language_default(), $params, variable_get('site_mail', 'EmployeeNews@gov.bc.ca'));
}
// End of Webcast application section
/**************************************/




/*****************************************************
 * BEGINNING OF THE PREMIER AWARDS APPLICATION SECTION
 */

function _atwork_prem_awards_print() {
  global $user;
  if ($user->uid == '40360') {
    return true;
  }
  if ($user->uid == '77') {
    return true;
  }
  return false;
}

function readDocx($filePath) {
  if (!extension_loaded('zip')) {
    return '';
  }
    // Create new ZIP archive
    $zip = new ZipArchive;
    $dataFile = 'word/document.xml';
    // Open received archive file
    if (true === $zip->open($filePath)) {
        // If done, search for the data file in the archive
        if (($index = $zip->locateName($dataFile)) !== false) {
            // If found, read it to the string
            $data = $zip->getFromIndex($index);
            $data = str_replace('</w:r></w:p></w:tc><w:tc>', ' ', $data);
            $data = str_replace('</w:r></w:p>', '\r\n', $data);
            // Close archive file
            $zip->close();
            $contents = explode('\n',strip_tags($data));
            $text = '';
            foreach($contents as $i=>$content) {

                $text .= $contents[$i];
            }
            return $text;
        }
        $zip->close();
    }
    // In case of failure return empty string
    return "";
}

function _atwork_prem_awards_count_words($files) {
  $attached_words = 0;
  $pdf_page = 0;
  $longest_doc = '';
  $longest_length_of_doc = 0;
  $pages = 0;
  foreach ($files as $file) {
    if (strpos(' ' . strtolower($file), '.docx')) {
      $text = readDocx($file);
      if(str_word_count($text) > $longest_length_of_doc){
        $longest_length_of_doc = str_word_count($text);
        $file_split = explode('/', $file);
        $title = array_pop($file_split);
        $longest_doc = $title;
      }
    }

    elseif (strpos(' ' . strtolower($file), '.doc')) {
      $fileHandle = fopen($file, "r");
      $line = @fread($fileHandle, filesize($file));
      $lines = explode(chr(0x0D),$line);
      $outtext = '';
      foreach($lines as $thisline) {
        $pos = strpos($thisline, chr(0x00));
        if (($pos !== FALSE)||(strlen($thisline)==0))
          {
          } else {
            $outtext .= $thisline." ";
          }
      }

      $outtext = preg_replace("/[^a-zA-Z0-9\s\,\.\-\n\r\t@\/\_\(\)]/","",$outtext);
      list($text) = explode('Y, dXiJ', $outtext);
      if(str_word_count($text) > $longest_length_of_doc){
        $longest_length_of_doc = str_word_count($text);
        $file_split = explode('/', $file);
        $title = array_pop($file_split);
        $longest_doc = $title;
      }
    }

    elseif(strpos(' ' . strtolower($file), '.pdf')){
      $cmd = '';
      $output = '';
      $target_pdf = $file;
      $cmd = sprintf('identify %s', $target_pdf);
      exec($cmd, $output);
      $pdf_page += count($output);
      $pages_longest = ceil($longest_length_of_doc/300);
      if($pages_longest < $pdf_page){
        $longest_length_of_doc = $pdf_page * 300;
        $file_split = explode('/', $file);
        $title = array_pop($file_split);
        $longest_doc = $title;
      }
    }

    if (isset($text)) {
      $text = preg_replace('/\s+/', ' ', $text);
      $words = explode(' ', $text);
      $attached_words = $attached_words + count($words);
    }
  }

  if ($attached_words ) {
    $pages += number_format(($attached_words / 300), 1);
  }

  if($pdf_page){
    $pages += $pdf_page;
  }
  // Everything up to 5.9 is acceptable
  if ($pages >= 6) {
    drupal_set_message(t('Over 5 pages of text has been detected across all of your attachments. Please review them to ensure you aren\'t over the 5 page limit. *NOTE: Pages are assumed to be 300 words max, your longest document looks to be ' . $longest_doc), 'warning');
  }


  return 0;
}

function _atwork_prem_awards_process_nominees($string) {
  $header = array(
    'No.',
    'Name',
    'Branch or program area',
    'Email',
    'Phone Number',
  );

  $data = explode(':', $string);
  $rows = array();
  $i = 1;
  $output = '';
  foreach ($data as $row) {
    if ($row) {
      $row_data = explode('|', $row);
      $rows[] = array(
        0 => $i,
        1 => $row_data[0],
        2 => $row_data[1],
        3 => l($row_data[2], "mailto:". $row_data[2]),
        4 => $row_data[3],
      );
      $i++;
    }
  }

  $variables = array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array(),
    'caption' => '',
    'colgroups' => array(),
    'sticky' => FALSE,
    'empty' => '',
  );

  return theme_table($variables);
}

function _atwork_prem_awards_get_contacts() {
  $result = db_query("
    SELECT mail FROM {users} u
    LEFT JOIN {users_roles} r ON (u.uid = r.uid)
    WHERE r.rid = 8
    ORDER BY mail ASC");

  $contacts = array();
  foreach ($result as $row) {
    $contacts[] = $row->mail;
  }
  return $contacts;
}

function _atwork_prem_awards_nav_block() {
  drupal_add_js(drupal_get_path('module', 'jquery_update') . '/replace/ui/ui/minified/jquery.ui.accordion.min.js');

  $expanded_year = '0';

  if (strpos(' ' . request_path(), 'career/premiers-awards/2011-12') || strpos(' ' . request_path(), 'career/premiers-awards/2011-2012')) {
    $expanded_year = '1';
  }
  if (strpos(' ' . request_path(), 'career/premiers-awards/2010-11') || strpos(' ' . request_path(), 'career/premiers-awards/2010-2011')) {
    $expanded_year = '2';
  }
  if (strpos(' ' . request_path(), 'career/premiers-awards/2009-10') || strpos(' ' . request_path(), 'career/premiers-awards/2009-2010')) {
    $expanded_year = '3';
  }

  $js = <<<EOT
jQuery(document).ready(function($) {
  $( "#prem-nav-accordian" ).accordion({
     active: $expanded_year,
     collapsible: true,
     heightStyle: "content"
  });
});
EOT;
  drupal_add_js($js, 'inline');

  $menu = menu_tree('menu-premiers-awards');
  $menu_2013 = render($menu);

  $menu = menu_tree('menu-premiers-awards-2011-2012');
  $menu_2012 = render($menu);

  $menu = menu_tree('menu-premiers-awards-2010-2011');
  $menu_2011 = render($menu);

  $menu = menu_tree('menu-premiers-awards-2009-2010');
  $menu_2010 = render($menu);

  $output = <<<EOT
<div>
  <div id="prem-nav-accordian">
    <h3>2012/2013</h3>
    <div id="prem-award-current">
      $menu_2013
    </div>
    <h3>2011/2012</h3>
    <div>
      $menu_2012
    </div>
    <h3>2010/2011</h3>
    <div>
      $menu_2011
    </div>
    <h3>2009/2010</h3>
    <div>
      $menu_2010
    </div>
  </div>
</div>
EOT;

  return $output;
}

function atwork_prem_awards_permission() {
  return array(
    'premiers awards access' => array(
      'title' => t('Access Premiere\'s Awards'),
      'description' => t('Submit and edit applications.'),
    ),
    'premiers awards admin' => array(
      'title' => t('Administer Premiere\'s Awards'),
      'description' => t('Submit and edit all applications.'),
    ),
  );
}

function atwork_prem_awards_roles_access($node) {
  if ($node->nid != PA_APP_NID) {
    return FALSE;
  }

  if (!user_access('premiers awards admin') && !user_access('premiers awards access')) {
    return FALSE;
  }

  return TRUE;
}

function atwork_prem_awards_roles_form($form, $node) {

  // get existing contacts
  $contacts = _atwork_prem_awards_get_contacts();

  $form = array();

  $form['users'] = array(
    '#type' => 'textarea',
    '#title' => t("Premier's Awards Contacts"),
    '#default_value' => implode("\r\n", $contacts),
    '#required' => TRUE,
    '#wysiwyg' => FALSE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

function atwork_prem_awards_roles_form_submit($form, &$form_state) {
  // get existing contacts
  $contacts = _atwork_prem_awards_get_contacts();

  $users = explode("\r\n", $form_state['values']['users']);

  foreach ($users as $key => $mail) {
    if (!$mail) {
      unset($users[$key]);
    }
  }

  // unset all existing contacts
  foreach ($contacts as $mail) {
    $user = user_load_by_mail($mail);
    if ($user->uid) {
      unset($user->roles[8]);
      $edit = array('roles' => $user->roles);
      user_save($user, $edit);
    }
  }

  // add the role to all submitted contacts
  foreach ($users as $mail) {
    $user = user_load_by_mail($mail);
    if ($user->uid) {
      $user->roles[8] = 'premiers awards contact';
      $edit = array('roles' => $user->roles);
      user_save($user, $edit);
    }
    else {
      drupal_set_message("Couldn't find an account for $mail");
    }
  }
}

/*
 * Implementation of hook_node_view
 *
 */
function atwork_prem_awards_node_view($node, $view_mode, $langcode) {
  if ($view_mode == 'full' && node_is_page($node)) {
    if ($node->nid == PA_APP_NID || $node->nid == PA_LP_NID) {
      if (!user_access('premiers awards access')) {
        drupal_access_denied();
      }
    }
    if ($node->nid == PA_APP_NID) {
      if (!isset($_GET['type'])) {
        drupal_goto('node/' . PA_LP_NID);
      }
      else {

        require_once drupal_get_path('module', 'atwork_prem_awards') . '/atwork_prem_awards.replacements.inc';

        $header_replace = _atwork_prem_awards_headers();

        $node->content['body'][0]['#markup'] = str_replace('[prem-award-header]', $header_replace[$_GET['type']], $node->content['body'][0]['#markup']);
      }
    }
    if ($node->nid == PA_REG_CONF_NID) {
      $node->content['body'][0]['#markup'] = _atwork_prem_awards_registration_confirmation();
    }
  }
}

function atwork_prem_awards_form_alter(&$form, $form_state, $form_id) {

  if ($form_id == 'webform_client_form_' . PA_APP_NID) {

    global $user;
    require_once drupal_get_path('module', 'atwork_prem_awards') . '/atwork_prem_awards.replacements.inc';
    drupal_add_js(drupal_get_path('module', 'atwork_prem_awards') . '/atwork_prem_awards.js');

    $node = $form['#node'];

    $cid_map = array();
    foreach ($node->webform['components'] as $cid => $field) {
      $cid_map[$field['form_key']] = $cid;
    }

    $form['#submit'][] = 'atwork_prem_awards_application_submit';
    //$form['#validate'][] = 'atwork_prem_application_2012_validate';
    array_unshift($form['#validate'], 'atwork_prem_awards_application_validate');

    $form['submitted']['nominees']['#maxlength'] = '20000';

    if (!isset($form['submitted']['nominees']['#default_value']) && (isset($form_state['post']['nominee_name'][0]) || isset($form_state['post']['nominee_name'][1]) || isset($form_state['post']['nominee_name'][2]))) {
      $nominees = '';
      foreach ($form_state['post']['nominee_name'] as $key => $nominee) {
        if ($form_state['post']['nominee_name'][$key] || $form_state['post']['nominee_branch'][$key] || $form_state['post']['nominee_address'][$key] || $form_state['post']['nominee_email'][$key] || $form_state['post']['nominee_phone'][$key]) {
          $nominees .= $form_state['post']['nominee_name'][$key] .'|'. $form_state['post']['nominee_branch'][$key] .'|'. $form_state['post']['nominee_email'][$key] .'|'. $form_state['post']['nominee_phone'][$key] .":";
        }
      }
      if ($nominees) {
        $form['submitted']['nominees']['#default_value'] = $nominees;
      }
    }

    if (isset($form['submitted']['nominees']['#value'])) {
      $nominees = '';
      $nom_arr = explode(":", $form['submitted']['nominees']['#value']);

      foreach($nom_arr as $nominee) {
        if (trim($nominee)) {
          $nominee_arr = explode('|', $nominee);
          $nominees .= '<tr><td><input type="text" name="nominee_name[]" value="'. $nominee_arr[0] .'"/></td><td><input type="text" name="nominee_branch[]" value="'. $nominee_arr[1] .'"/></td><td><input type="text" name="nominee_email[]" value="'. $nominee_arr[2] .'"/></td><td><input type="text" name="nominee_phone[]" value="'. $nominee_arr[3] .'"/></td><tr>';
        }
      }

      $form['submitted']['nominee_information']['nominees_header']['#markup'] = str_replace('</tbody></table>', $nominees .'</tbody></table>', $form['submitted']['nominee_information']['nominees_header']['#markup']);
    }

    // check if we are editing the submission
    if (strpos(' '.$form['#action'], '/submission/') && !user_access('edit webform submissions')) {
      if (arg(4) == 'edit') {
        $form['submitted']['name_of_ministry_or_eligible_organization_sponsoring_this_application']['#disabled'] = 'true';
        //$form['submitted']['region']['#disabled'] = 'true';
      }
    }

    $form['actions']['submit']['#prefix'] = '<p>' . t('Submitting the application will send an email copy to the Nomination Contact and Ministry Contact.') . '</p>';
    $form['actions']['submit']['#value'] = t('Submit');
    $form['actions']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
      '#prefix' => '<p>' . t('Saving the application will not trigger any emails.') . '</p>',
    );
    // check for existence of application type (innovation, leadership, etc)
    if (!isset($form['submitted']['application_type']['#default_value']) || !$form['submitted']['application_type']['#default_value']) {
      return;
    }
    else {
      $form_type = $form['submitted']['application_type']['#default_value'];
      if (!in_array('lsa manager', $user->roles) && !in_array('administrator', $user->roles)) {
        $form['submitted']['application_type']['#disabled'] = TRUE;
      }
    }

    $translations = _atwork_prem_awards_questions();

    $form['submitted']['summary_statement']['#title'] = '<h2>Evaluation Considerations</h2><strong>Summary (not to exceed 150 words):</strong><br />' . $translations[$form_type][0];
    $form['submitted']['prem_award_q1']['#title'] = '<h2>The combined sections below must not exceed 1500 words</h2><strong>Context (not to exceed 250 words):</strong><br />' . $translations[$form_type][1];
    for ($i=2;$i<10;$i++) {
      if (isset($translations[$form_type][$i]) && $translations[$form_type][$i]) {
        $form['submitted']['prem_award_q'. $i]['#title'] = str_replace('[prem-award-q'. $i .']', $translations[$form_type][$i], $form['submitted']['prem_award_q'. $i]['#title']);
      } else {
        unset($form['submitted']['prem_award_q'. $i]);
      }
    }
  }

  if ($form_id == 'webform_client_form_' . PA_REG_FORM_NID && (arg(0)==='node' && is_numeric(arg(1)) && arg(1)== PA_REG_FORM_NID)) {
    $form['#submit'][] = 'atwork_prem_awards_registration_submit';
  }


  if ($form_id == 'webform_client_form_33248') {
    // Hide the second field here - we will print it out under the submit button so it doesn't show up unexpectedly.
    $form['submitted']['post_text']['#access'] = false;

    // check if user voted
    global $user;

    $voted = db_select('webform_submissions', 'd')
      ->fields('d', array('uid'))
      ->condition('d.nid', 33248)
      ->condition('d.uid', $user->uid)
      ->execute()
      ->fetchAll();

    if ($voted) {
      $form['actions']['submit']['#access'] = FALSE;
      drupal_set_message('Thanks for voting!');
    }

    /*
     * Uncomment this when voting closes
     */
    //$form['actions']['submit']['#access'] = FALSE;


    //// This is used for the current years emergent leaders - code above is for last years.
    //foreach ($form['submitted']['finalists']['#options'] as $key => $data) {
    //  list($name, $video_id, $thumb_path, $caption) = explode('&&&', $data);
    //  $form['submitted']['finalists']['#options'][$key] = '<div class="video-finalist video-'. $key .'"><h3>'. $name .'</h3><a href="//www.youtube.com/embed/'. $video_id .'?wmode=transparent&amp;fs=1&amp;width=640&amp;height=385&amp;hl=en_US1&amp;iframe=true&amp;rel=0&amp;showinfo=0" class="colorbox-load" title="' . $caption . '" rel="Click to see ' . $name . '\'s video"><img src="/sites/default/files/webform/premieres_awards/2017/'. $thumb_path .'" alt = "Click me" /></a></div>';
    //}
  }
}

/**
 * Want to append some text to the webform
 * implements hook_node_view
 */
function atwork_webform_node_view_alter(&$build){
  if(isset($build['body']['#object']->nid) && $build['body']['#object']->nid == '33248'){
    //Need to grab text from second field in this webform and plug it in as the suffix here.
    if(isset($build['body']['#object']->webform['components'][2]['value']) && $build['body']['#object']->webform['components'][2]['value']){
      $suffix_text = $build['body']['#object']->webform['components'][2]['value'];
      // Put it in the suffix, Including an html note if anyone finds this and it breaks anything
      $build['webform']['#suffix'] = '<!-- This text is pulled from the webforms second field. If it should not be showing up then access it in atwork_prem_awards.module --> ' . $suffix_text . '<br />';
    }
  }
}

function atwork_prem_awards_application_validate($form, &$form_state) {
  $nominees = '';

  if (isset($_POST['nominee_name'])) {
    foreach ($_POST['nominee_name'] as $key => $nominee) {
      if ($_POST['nominee_name'][$key] || $_POST['nominee_branch'][$key] || $_POST['nominee_email'][$key] || $_POST['nominee_phone'][$key]) {
        $nominees .= $_POST['nominee_name'][$key] .'|'. $_POST['nominee_branch'][$key] .'|'. $_POST['nominee_email'][$key] .'|'. $_POST['nominee_phone'][$key] .":";
      }
    }
  }
  if ($nominees) {
    $form_state['values']['submitted']['nominees'] = $nominees;
  }

  if ($form_state['clicked_button']['#value'] == 'Save') {
    // change the op so webform doesn't break
    $form_state['values']['op'] = 'Submit';
  }
}

function atwork_prem_awards_application_submit($form, &$form_state) {
  global $user;
  unset($form_state['redirect']);

  require_once drupal_get_path('module', 'atwork_prem_awards') . '/atwork_prem_awards.replacements.inc';
  $ministry_contacts = _atwork_prem_awards_ministry_contacts();
  // clear existing messages
  drupal_get_messages();

  if ($form_state['clicked_button']['#value'] == 'Submit') {
    $node = $form_state['build_info']['args'][0];

    if ($form_state['build_info']['args'][1]) {
      $submission = $form_state['build_info']['args'][1];
    }
    else {
      $submission = webform_get_submission($node->nid, $form_state['values']['details']['sid']);
    }

    $ministry = $submission->data[1][0];
    $node->atwork_form = $form;

    $email = array(
      'nid' => $node->nid,
      'eid' => 1, // ??
      'email' => $form_state['input']['submitted']['nominator']['nominator_email'],
      'subject' => t('Premier\'s Award Nomination Confirmation'),
      'from_name' => t('@Work'),
      'from_address' => 'EmployeeNews@gov.bc.ca',
      'template' => 'default',
      'excluded_components' => array(),
      'html' => TRUE,
      'attachments' => FALSE,
    );

    $renderable_fields = webform_submission_render($node, $submission, $email, 'full_html');

    $contact_email = $renderable_fields['nomination_contact']['nomination_contact_email']['#value'];


    $email['message'] = theme(array('webform_mail_prem_awards', 'webform_mail', 'webform_mail_message'), array('node' => $node, 'submission' => $submission, 'email' => $email, 'renderable_fields' => $renderable_fields));

    // Replace tokens in the message.
    $email['message'] = _webform_filter_values($email['message'], $node, $submission, $email, FALSE);

    $email['message'] = drupal_get_css() . $email['message'];

    // Build the e-mail headers.
    $email['headers'] = theme(array('webform_mail_headers_' . $node->nid, 'webform_mail_headers'), array('node' => $node, 'submission' => $submission, 'email' => $email));

    // Assemble the From string.
    $email['from'] = webform_format_email_address($email['from_address'], $email['from_name'], $node, $submission);

    $email['subject'] = webform_format_email_subject($email['subject'], $node, $submission);

    $language = $user->uid ? user_preferred_language($user) : language_default();
    $mail_params = array(
      'message' => $email['message'],
      'subject' => $email['subject'],
      'headers' => $email['headers'],
      'node' => $node,
      'submission' => $submission,
      'email' => $email,
    );

    // Set all other properties for HTML e-mail handling.
    $mail_params['plain'] = !$email['html'];
    $mail_params['plaintext'] = $email['html'] ? NULL : $email['message'];
    $mail_params['headers'] = $email['headers'];
    if ($email['html']) {
      // MIME Mail requires this header or it will filter all text.
      //$mail_params['headers']['Content-Type'] = 'text/html; charset=UTF-8';
    }
    // Mail the submission.
    $message = drupal_mail('webform', 'submission', $email['email'], $language, $mail_params, $email['from']);

    // now send to ministry contact
    if ($ministry_contacts[$ministry]) {
      $mail_params['email'] = $ministry_contacts[$ministry];
      $message = drupal_mail('webform', 'submission', $ministry_contacts[$ministry], $language, $mail_params, $email['from']);
    }

    if (!empty($contact_email)) {
      $mail_params['email'] = $contact_email;
      $message = drupal_mail('webform', 'submission', $contact_email, $language, $mail_params, $email['from']);
    }

    drupal_set_message('Thank you for your submission. An email has been sent to '. l($email['email'], 'mailto:'. $email['email']) . ' (Nomination Contact) and ' . l($ministry_contacts[$ministry], 'mailto:'. $ministry_contacts[$ministry]) . ' (Ministry Contact).');
  }
  elseif ($form_state['clicked_button']['#value'] == 'Save') {
    if(isset($form_state['storage']['details']['sid']) && $form_state['storage']['details']['is_new'] == TRUE){
      $sid = $form_state['storage']['details']['sid'];
      drupal_goto('/premiers-award-application-2018/submission/' . $sid . '/edit');
    }
    drupal_set_message(t('Your submission has been saved. You may review and edit any of your submissions !here.', array( '!here' => l('here', 'node/' . PA_APP_NID . '/submissions'))));
  }

  $files = array();

  // play with files
  foreach ($form_state['input']['submitted']['attachments'] as $key => $fid) {
    if ($fid['fid']) {
      $file = file_load($fid['fid']);
      $files[] = drupal_realpath($file->uri);
    }
  }

  if ($files) {
    _atwork_prem_awards_count_words($files);
  }
}

/**
 * Preprocess function for webform-submission.tpl.php.
 */
function atwork_prem_awards_preprocess_webform_submission(&$vars) {
  if (!isset($vars['node']->nid) || $vars['node']->nid != PA_APP_NID) {
    return;
  }

  global $user;
  require_once drupal_get_path('module', 'atwork_prem_awards') . '/atwork_prem_awards.replacements.inc';

  $application_type = $vars['submission']->data[41][0];
  $translations = _atwork_prem_awards_questions();
  $headers = _atwork_prem_awards_headers();

  $atwork_header = array(
    '#markup' => $headers[$application_type],
    '#weight' => -99,
  );

  array_unshift($vars['renderable'], $atwork_header);

  if (isset($vars['renderable']['application_type'])) {
    unset($vars['renderable']['application_type']);
  }

  if ($vars['submission']->data[3][0]) {
    $vars['renderable']['nominee_information']['nominees_header']['#value'] = _atwork_prem_awards_process_nominees($vars['submission']->data[3][0]);

    $vars['renderable']['nominee_information']['nominees_header'] = array(
      '#markup' => _atwork_prem_awards_process_nominees($vars['submission']->data[3][0]),
    );
  }
  else {
    unset($vars['renderable']['nominee_information']);
  }

  unset($vars['renderable']['nominees']);

  $summary_markup = <<<EOT
<h2>Evaluation Considerations</h2>
<h3>{$vars['renderable']['summary_statement']['#title']}</h3>
EOT;
  $summary_markup .= '<strong>' . $translations[$application_type][0] . '</strong>';

  $vars['renderable']['summary_statement'] = array(
    '#weight' => $vars['renderable']['summary_statement']['#weight'],
    '#markup' => $summary_markup . check_markup($vars['renderable']['summary_statement']['#value']),
  );

  $vars['renderable']['prem_award_q1'] = array(
    '#weight' => $vars['renderable']['prem_award_q1']['#weight'],
    '#markup' => '<h3>' . $vars['renderable']['prem_award_q1']['#title'] .
      '</h3>' . '<strong>' . 'Context (not to exceed 250 words):<br />' .
      $translations[$application_type][1] . '</strong>' .
      check_markup($vars['renderable']['prem_award_q1']['#value']),
  );

  for ($i=2; $i<10; $i++) {
    if (isset($vars['renderable']['prem_award_q' . $i])) {
      if (isset($translations[$application_type][$i]) && $translations[$application_type][$i]) {
        $vars['renderable']['prem_award_q' . $i]['#title'] = str_replace(
          '[prem-award-q' . $i . ']',
          $translations[$application_type][$i],
          $vars['renderable']['prem_award_q' . $i]['#title']
        );
        $display = array(
          '#weight' => $vars['renderable']['prem_award_q' . $i]['#weight'],
          '#markup' => '<strong>' . $vars['renderable']['prem_award_q' . $i]['#title'] . '</strong>' . check_markup($vars['renderable']['prem_award_q' . $i]['#value']),
        );
        $vars['renderable']['prem_award_q' . $i] = $display;
      }
      else {
        unset($vars['renderable']['prem_award_q' . $i]);
      }
    }
  }

  if (_atwork_prem_awards_print()) {

    if (isset($vars['renderable'][0]['#markup'])) {
      $arr = explode('</h3>', $vars['renderable'][0]['#markup']);
      $vars['renderable'][0]['#markup'] = $arr[0] . '</h3>';
    }

    if (isset($vars['renderable']['name_of_ministry_or_eligible_organization_sponsoring_this_application'])) {
      $vars['renderable']['name_of_ministry_or_eligible_organization_sponsoring_this_application']['#title'] = '';
    }

    if (isset($vars['renderable']['region'])) {
      $vars['renderable']['region']['#title'] = '';
    }

    if (isset($vars['renderable']['title_of_nomination'])) {
      $vars['renderable']['title_of_nomination']['#title'] = '';
    }

    $vars['renderable']['nominator']['#access'] = FALSE;
    $vars['renderable']['nomination_contact']['#access'] = FALSE;
    $vars['renderable']['video_contact']['#access'] = FALSE;
    $vars['renderable']['nominee_information']['#access'] = FALSE;
    $vars['renderable']['summary_word_count']['#access'] = FALSE;
    $vars['renderable']['submission_word_count']['#access'] = FALSE;
    //$vars['renderable']['attachments']['#access'] = FALSE;

  }
}

/**
* Block to act as a registration page for Prem awards.
* Uses Ajax/JQuery callbacks to populate webform.
*/

/**
* Implements hook_menu();
* Create menu path for accessing values via Ajax.
*/
function atwork_prem_awards_menu(){
  $items['p-awards/registration/%/%'] = array(
    'page callback' => 'atwork_prem_awards_callback', // Render HTML.
    'page arguments' => array(2,3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    //'delivery callback' => 'atwork_prem_ajax_callback',  // Magic goes here.
  );
  $items['node/%node/prem-award-roles'] = array(
    'title' => 'Assign Roles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('atwork_prem_awards_roles_form', 1),
    'access callback' => 'atwork_prem_awards_roles_access',
    'access arguments' => array(1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
 // submission function path for updates
  $items['p-awards/submit'] = array(
    'page callback' => 'atwork_prem_awards_submit_callback',
    //'page arguements' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
  // submission function path for new
  $items['p-awards/submit/new'] = array(
    'page callback' => 'atwork_prem_awards_new_submit_callback',
    'types' => MENU_CALLBACK,
    'access arguements' => array('access content'),
  );
  return $items;
}

/**
 * Callback function for premiers award function if user has previously submitted an application.
 *
 * @param [string] $user - the idir of the user
 * @param [string] $current_uid - the uid of the user.
 * @return echo's a JSON string used by jQuery.
 */
function atwork_prem_awards_callback($user, $current_uid){
  // This has to be included on custom pages.
  //module_load_include('inc', 'webform', 'webform.submission');
  include_once(drupal_get_path('module', 'webform') . '/includes/webform.submissions.inc');
  // Look for forms that have the uid, if they are there, return them all. JQuery can hand back any updates - or we can just move on.
  // else we can tell jQuery this is new, and we can build fields to submit back to a secondary php function where we can save the form
  $submissions = webform_get_submissions(array('nid' => PA_REG_FORM_NID, 'uid' => $current_uid));
  // Get static webform for titles
  $webform_node = node_load(PA_REG_FORM_NID);
  // https://www.drupal.org/node/1731742
  // Break these out into specific sid's and values
  $return_info_array = array();
  $applicant = user_load($current_uid);
  $return_info_array['applicant'] = array(
    "name" => $applicant->field_gal_first_name['und'][0]['safe_value'] . " " . $applicant->field_gal_last_name['und'][0]['safe_value'],
    "ministry" => $applicant->field_gal_ministry_name['und'][0]['safe_value'],
    "city" => $applicant->field_gal_city['und'][0]['safe_value'],
  );
  // Grab current webcast names
  $return_info_array['webcasts'] = array(
    'vancouver_island' =>  $webform_node->webform['components'][4]['name'],
    //'lower_mainland' => $webform_node->webform['components'][6]['name'],
    'interior_north' =>  $webform_node->webform['components'][14]['name'],
  );
  $return_info_array['uid'] = $current_uid;
  if(isset($submissions) && !empty($submissions)){
    foreach($submissions as $key=>$value){
      if(isset($value->data[5][0]) && $value->data[5][0] > 0){
        $return_info_array[$key] = array(
          'webcast' => $webform_node->webform['components'][4]['name'],
          'numberAttending' =>$value->data[5][0],
          'ministry' => $value->data[10][0],
          'name' => $value->data[9][0],
          'city' => $value->data[11][0],
        );
      }
      // Signed up for Int/North
      if(isset($value->data[15][0]) && $value->data[15][0] > 0){
        $return_info_array[$key] = array(
          'webcast' => $webform_node->webform['components'][14]['name'],
          'numberAttending' => $value->data[15][0],
          'ministry' => $value->data[10][0],
          'name' => $value->data[9][0],
          'city' => $value->data[11][0],
        );
      }
      // Signed up for Lower Mainland
      if(isset($value->data[7][0]) && $value->data[7][0] > 0){
        $return_info_array[$key] = array(
          'webcast' => $webform_node->webform['components'][6]['name'],
          'numberAttending' => $value->data[7][0],
          'ministry' => $value->data[10][0],
          'name' => $value->data[9][0],
          'city' => $value->data[11][0],
        );
      }
    }
  }
  // Return to js
  echo json_encode($return_info_array);
  // Stops themeing layer from interacting with this
  die();
}

function atwork_prem_awards_submit_callback(){
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  $submission_array = $_POST;
  $status = array();
  // This is a new webform
  if($submission_array['sid'] == null){
    // create a new webform (insert function)
    $status = create_new_webform_entry($submission_array);
  } else {
     // Get existing webform
    $webform = webform_get_submission(PA_REG_FORM_NID, $submission_array['sid']);
    $webform_node = node_load(PA_REG_FORM_NID);

    // Check if this matches webcast for existing webform
    if($submission_array['webcast'] == $webform_node->webform['components'][4]['name'] && isset($webform->data[13][0]) && $webform->data[13][0] == 'vi_webcast'){
      //continue
    } elseif (isset($webform_node->webform['components'][6]['name']) && ($submission_array['webcast'] == $webform_node->webform['components'][6]['name']) && isset($webform->data[13][0]) && $webform->data[13][0] == 'main_webcast') {
      //continue
    } elseif ($submission_array['webcast'] == $webform_node->webform['components'][14]['name'] && isset($webform->data[13][0]) && $webform->data[13][0] == 'int_webcast') {
      //continue
    } else {
      // This is net new, or they have changed the webcast, should be a new entry, need to keep the original sid as id for next func
      $submission_array['id'] = $submission_array['sid'];
      $status = create_new_webform_entry($submission_array);
      echo json_encode($status);
      die();
    }
    // If found, update webform with any changes
    $changes = 0;
    // Check name
    if($webform->data[9][0] != $submission_array['name']){
      $webform->data[9][0] = $submission_array['name'];
      $changes ++;
    }
    //check ministry
    if($webform->data[10][0] != $submission_array['ministry']){
      $webform->data[10][0] = $submission_array['ministry'];
      $changes ++;
    }
    // check number attending
    if(isset($webform->data[5][0]) && $webform->data[5][0] > 1 && $webform->data[5][0] != $submission_array['attending']){
      $webform->data[5][0] = $submission_array['attending'];
      $changes ++;

    }
    if(isset($webform->data[7][0]) &&  $webform->data[7][0] > 1 && $webform->data[7][0] != $submission_array['attending']){
      $webform->data[7][0] = $submission_array['attending'];
      $changes ++;

    }
    if(isset($webform->data[15][0]) &&  $webform->data[15][0] > 1 && $webform->data[15][0] != $submission_array['attending']){
      $webform->data[15][0] = $submission_array['attending'];
      $changes ++;

    }
    // check city
    if($webform->data[11][0] != $submission_array['city']){
      $webform->data[11][0] = $submission_array['city'];
      $changes ++;

    }
    // update webform if any changes
    if($changes > 0){
      $form_node = node_load(PA_REG_FORM_NID);
      $new_webform = webform_submission_update($form_node, $webform);
      if(isset($new_webform) && $new_webform > 0){
        // WE got an sid back - this has been saved
        $status = array(
         'sid'=>$new_webform,
         'response'=>'200',
        );
      } else {
        array(
          'sid'=>Null,
          'response'=>'500',
         );
      }
    } else {
      // No actual updates required, so send back a 200, keep data as is
      $status = array(
        'sid'=>$submission_array['sid'],
        'response'=>'200',
       );
    }

  }

  // Return either a 200 or 500 to js, so we can mark if it is successful or not.
  echo json_encode($status);
  die();
}

/**
 * Helper function to create new webform if required
 *
 * @param [array] $submission_array
 * @return string of status (200 okay, 500 error)
 */
function create_new_webform_entry($submission_array){
  $current_user = user_load($submission_array['uid']);
   // Get static webform for titles
  $webform_node = node_load(PA_REG_FORM_NID);
  isset( $webform_node->webform['components'][4]['name']) ? $vancouver_island =  $webform_node->webform['components'][4]['name']: $vancouver_island = null;
  isset(  $webform_node->webform['components'][6]['name']) ? $lower_mainland =  $webform_node->webform['components'][6]['name']: $lower_mainland = null;
  isset( $webform_node->webform['components'][14]['name']) ? $interior_north =  $webform_node->webform['components'][14]['name']: $interior_north = null;

  $response = array(
    'sid' => $submission_array['id'],
    'response' => '',
  );
  $data = array(
    '9' => array(
      '0' => $submission_array['name'],
    ),
    '10' => array(
      '0' => $submission_array['ministry'],
    ),
    '11' => array(
      '0' => $submission_array['city'],
    ),
    '12' => array(
      '0' => $current_user->mail,
    ),
  );

  // Now check for webcast choice
  if($submission_array['webcast'] == $vancouver_island){
    $data['13'] = array(
      "0" => "vi_webcast"
    );
    $data['5'] = array(
      "0" => $submission_array['attending']
    );
  } elseif($submission_array['webcast'] == $interior_north) {
    $data['13'] = array(
      "0" => "int_webcast"
    );
    $data['15'] = array(
      "0" => $submission_array['attending']
    );
  } elseif($submission_array['webcast'] == $lower_mainland){
    $data['13'] = array(
      "0" => "main_webcast"
    );
    $data['7'] = array(
      "0" => $submission_array['attending']
    );
  } else {
    $response['response'] = 500;
    return $response;
  }
  $webform_node = node_load(PA_REG_FORM_NID);
  //webform_submission_create()
  $submission = (object) array(
    'nid' => PA_REG_FORM_NID,
    'uid' => $current_user->uid,
    'sid' => NULL,
    'submitted' => REQUEST_TIME,
    'completed' => REQUEST_TIME,
    'remote_addr' => ip_address(),
    'is_draft' => FALSE,
    'data' => $data,
  );

  $sid = webform_submission_insert($webform_node, $submission);
  if(isset($sid) && $sid > 0){
    $response['response'] = "200";
    return $response;
  } else {
    $response['response'] = "500";
    return $response;
  }
  return $response;
}


/**
* Implements hook_block_info
* We want a block that can be used to grab info on Prem awards viewers
*/
function atwork_prem_awards_block_info() {
  $blocks['prem_registration'] = array(
    'info' => t("Premiers awards registration form"),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'cache' => DRUPAL_NO_CACHE,
  );
  // This example comes from node.module.
  $blocks['nav'] = array(
      'info' => t("Premiere's Awards Navigation"),
      'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['randomizer_block'] = array(
    'info' => t("Emerging Leaders Randomizer"),
  );
 return $blocks;
}



/**
* Implements hook_block_view
* Specialized block to check/receive/update viewer numbers for the premiers awards.
*/
function atwork_prem_awards_block_view($delta = ''){
  $block = array();
  switch ($delta) {
    case 'prem_registration':
      $block['content'] = array(
        // We don't really want to show anything here - so we are not receiving anything more than an empty string back.
        '#markup' => premiers_awards_registration_information(),
      );
      break;
    case 'nav':
      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => _atwork_prem_awards_nav_block(),
      );
      break;
      // For the emerging leaders block.
    case ('randomizer_block'):
      drupal_add_js(drupal_get_path('module', 'atwork_prem_awards').'/js/js_atwork_webform_ajax.js');
      drupal_add_js(drupal_get_path('module', 'atwork_prem_awards').'/js/atwork_webform.js');
      $block['subject'] = '';
      $block['content'] = atwork_prem_awards_block_content();
      break;
  }
  return $block;
}

/**
* Function that gets info for user, and passes it to the dom for registration check.
**/
function premiers_awards_registration_information(){
  global $user;
  $current_user = user_load($user->uid);
  // The output string we will return, we don't really want anything to show in the block, so we pass nothing back.
  $output = '';

  // Add form update js and library
  drupal_add_library('system', 'ui.dialog');
  drupal_add_js(drupal_get_path('module', 'atwork_prem_awards') . '/js/' . 'js_prem_awards_form.js');
  drupal_add_js(array('atwork_prem_awards' => array('user' => $current_user->name, 'uid' => $current_user->uid)), 'setting');
  return $output;
}


function atwork_prem_awards_block_content(){
  // Our current webform
  $nid = 33248;
  //Pull out the names of the nominees
  $choices_array = array();
  //Get the form to match names to selection
  $webform = node_load($nid);

  // Get names of nominees
  $webform_question_text = $webform->webform['components'][1]['extra']['options'];
  if(preg_match_all('/\|(.*?)</s',$webform_question_text,$nominees)){
    $choices_array = $nominees[1];
  }
  // Sync the choices array to the key values in vote_count (by default choices array is 0 based)
  $choices_array = array_combine(range(1, count($choices_array)), array_values($choices_array));
  // Now set up all fields for each participant
  foreach($choices_array as $key=>$value){

    $choices_array[$key] = array(
      'name'=> $value,
      'total_score' => 0,
      'first_place' => 0,
      'second_place' => 0,
      'third_place' => 0,
      'total_votes' => 0,
      'id' => $key
    );
  }
  // Now lets make a table of all contestants and their vote numbers
  // We need to get all of our votes cast per contestant key
  $votes = db_select('webform_submitted_data', 's')
    ->fields('s', array('no'))
    ->fields('s', array('data'))
    ->condition('s.nid', $nid)
    ->condition('s.no', '0', '!=')
    ->execute()
    ->fetchAll();
  // Count votes by key option for each nominee.
  foreach($votes as $key=>$value){
    // TODO: Sort data here into "Total score, First, Second, Third, Total votes"
    if(isset($value->data) && isset($choices_array[$value->data])){
      if(isset($value->no)){
        switch(true)
        {

          case $value->no == 1 : {
            $choices_array[$value->data]['total_score'] += 3;
            $choices_array[$value->data]['first_place'] += 1;
            $choices_array[$value->data]['total_votes'] += 1;
            break;
          }
          case $value->no == 2 : {
            $choices_array[$value->data]['total_score'] += 2;
            $choices_array[$value->data]['second_place'] += 1;
            $choices_array[$value->data]['total_votes'] += 1;
            break;
          }
          case $value->no == 3 : {
            $choices_array[$value->data]['total_score'] += 1;
            $choices_array[$value->data]['third_place'] += 1;
            $choices_array[$value->data]['total_votes'] += 1;
            break;
          }
        }
      }
    }
  }

  // Sort this by the vote numbers
  usort($choices_array, function($a, $b) {
    return $b['total_score'] - $a['total_score'];
  });

  // Now make  table of emerging leaders and vote counts
  $output = '<div id="count-block">';
  $output .= '<table id="leaders-list" style="width:100%; border:1px solid black;" >';
  $output .= '<tr style="border:1px solid black; background-color:#E0EEEE;"><td style="border:1px solid black !important;"><h2>Emerging Leader</h2></td><td style="border:1px solid black !important;"><h2>Total Score</h2></td><td style="border:1px solid black !important;"><h2>First Place Votes</h2></td><td style="border:1px solid black !important;"><h2>Second Place Votes</h2></td><td style="border:1px solid black !important;"><h2>Third Place Votes</h2></td><td style="border:1px solid black !important;"><h2>Total Votes</h2></td></tr>';
  // To color stripes
  $i = 1;
  foreach($choices_array as $key=>$value){
    // pick our background color
    if($i & 1 ){
      $background = '#FFFFFF';
    } else {
      $background = '#E0EEEE';
    }
    $output .= '<tr style="border:1px solid black; background-color:' . $background . ';"><td style="border:1px solid black !important;">' . $value['name'] . '</td><td style="border:1px solid black !important; background-color:' . $background . ';">' . $choices_array[$key]['total_score'] . '</td><td style="border:1px solid black !important; background-color:' . $background . ';">' . $value['first_place'] . '</td><td style="border:1px solid black !important; background-color:' . $background . ';">' . $value['second_place'] . '</td><td style="border:1px solid black !important; background-color:' . $background . ';">' . $value['third_place'] . '</td><td style="border:1px solid black !important; background-color:' . $background . ';">' . $value['total_votes'] . '</td></tr>';

    $i++;
  }
  $output .= '</table>';
  // Find all users who voted:
  $voted = db_select('webform_submissions', 'd')
    ->fields('d', array('uid'))
    ->condition('d.nid', $nid)
    ->execute()
    ->fetchAll();

  // Add the table
  $output .= '<div id="randomizer_block">';
  // This button will be used to fire an Ajax function to choose a winner.
  $output .= '<button type="submit" id="randomize">Choose Winner</button></div>';
  $output .= '<input type="button" value="Show Voters List" id="contestant-button" />';
  $output .= '<table id="voter_list" >';
  $output .= '<tr style="border:1px solid black !important; background-color:#E0EEEE;"><th><h2>Voters:  </h2></th></tr>';

  // To color stripes
  $i = 1;
  // Create voters table
  foreach($voted as $key => $value){
    // pick our background color
    if($i & 1 ){
      $background = '#FFFFFF';
    } else {
      $background = '#E0EEEE';
    }
    $voter = user_load($value->uid);
    $output .= '<tr style="border:1px solid black !important; background-color:' . $background . ';"><td><a href="/user/' . $voter->uid . '">' .  $voter->field_gal_first_name['und'][0]['safe_value'] . ' ' . $voter->field_gal_last_name['und'][0]['safe_value'] . '</a></td></tr>';
    $i++;
  }
  $output .= '</table>';
  return $output;
}

/**
 * Implements hook_menu();
 */
function atwork_webform_menu() {
  // this one has an access callback which was handy when it was a menu tab

  $items['random'] = array(
    'page callback' => 'atwork_webform_ajax_callback', // Render HTML.
    'page arguments' => array(1),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
    'delivery callback' => 'atwork_webform_ajax',  // Magic goes here.
  );

  return $items;
}

function atwork_webform_ajax_callback($var){
  // Find all users who voted:
  $voted = db_select('webform_submissions', 'd')
    ->fields('d', array('uid'))
    ->condition('d.nid', 33248)
    ->execute()
    ->fetchAll();

  // Get total # of voters
  $total = count($voted);

  // Choose a winner:
  $winning_number = mt_rand(0,$total-1);

  // Winner is:
  $winner = $voted[$winning_number];
  $winning_user = user_load($winner->uid);

  // Return winners info
  $winner_name = $winning_user->field_gal_first_name['und'][0]['safe_value'] . " " . $winning_user->field_gal_last_name['und'][0]['safe_value'];

  if(isset($winning_user->field_image['und'][0]['uri'] )&& $winning_user->field_image['und'][0]['uri'] ){
    $picture_url = $winning_user->field_image['und'][0]['uri'];
  } else {
    global $base_url;
    global $base_path;
    $picture_url = $base_path . 'default_images/default_profile220x220b_0.gif';
  }

  $picture_location = str_replace("public://", "", $picture_url);

  $winner_picture = '/sites/default/files/' . $picture_location;

  $return_string = '<div id="winner_profile"><h1>The Winner is....</p><img src="' . $winner_picture . '" style="width:160px;height:200px;"><h2><a href="/user/' . $winning_user->uid . '">' . $winner_name .'</a></h2></div>';

  // Return image and winner name to js
  echo json_encode($return_string);

  // Stops themeing layer from interacting with this
  die();

  return;
}
