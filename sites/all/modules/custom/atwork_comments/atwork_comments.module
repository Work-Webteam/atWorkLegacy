<?php
/*
 * Implementation of hook_menu_alter()
 */
function atwork_comments_menu_alter(&$items) {
  //$items['comment/%']['page callback'] = 'atwork_comments_view';
}

/*
 * page callback of comment/%
 *
 * here we are adding the comment ID (c) into the URL
 * so we can direct to the appropriate page if necessary
 *
 */
// Currently turned off - seemed it may have caused an issue with switching comment pages.
/*
function atwork_comments_view($cid) {
  $comment = comment_load($cid);
  if ($comment) {
    $node = node_load($comment->nid);
    if ($node) {
      $link_options = array(
        'query' => array(
          'c' => $cid,
        ),
        'fragment' => 'comment-' . $cid,
      );

      drupal_goto('node/' . $node->nid, $link_options);

    }
  }
  return drupal_not_found();
}
*/

/*
 * Implementation of hook_form_FORMID_alter()
 */
function atwork_comments_form_views_exposed_form_alter(&$form, &$form_state, $form_id){
  global $user;
  // If the exposed filter form was submitted save the values in $user->data
  if(isset($form_state['input']['items_per_page'])){
    $comments_per_page = $form_state['input']['items_per_page'];
  }

  if(isset($form_state['input']['sort_order'])){
    $sort_order = $form_state['input']['sort_order'];
  }

  // only set the cookie if the form was submitted
  if (isset($comments_per_page) && isset($sort_order)) {
    //setcookie('views_user_options', serialize($views_user_options), time()+60*60*24*365, '/');
    $edit = array(
      'data' => array(
        'atwork_comments_per_page' => $comments_per_page,
        'atwork_sort_order' => $sort_order,
      ),
    );
    user_save($user, $edit);
  }

  // if the form wasn't submitted and there is no data in the cookie we can go now
  if (!isset($user->data['atwork_comments_per_page']) && !isset($user->data['atwork_sort_order'])) {
    return;
  }

  // we found data in $user->data, set the form accordingly
  $form['items_per_page']['#default_value'] = $user->data['atwork_comments_per_page'];
  $form['sort_order']['#default_value'] = $user->data['atwork_sort_order'];
}

/*
 * Implementation of hook_node_load()
 *
 * Tricky thing we do here is set $node->comment to 0.
 * This prevents the comment module from adding the comments
 * and we do this to avoid the processing time since we use
 * views to display the comments
 *
 * Note: this requires that we later add the node-comments links ourselves
 *
 */
function atwork_comments_node_load($nodes, $types) {
  // only do this on node pages to prevent typical comment processing
  // don't do it on other pages or comment links will dissappear
  if (arg(0) == 'node' && is_numeric(arg(1)) && isset($nodes[arg(1)]) && !in_array($nodes[arg(1)]->type, array('image', 'status', 'answer', 'poll'))) {
    $nodes[arg(1)]->atwork_comment = $nodes[arg(1)]->comment;
    $nodes[arg(1)]->comment = 0;
  }
}

function atwork_comments_node_presave($node) {
  if (isset($node->atwork_comment)) {
    $node->comment = $node->atwork_comment;
  }
}

/*
 * Implementation of hook_node_view()
 *
 * copied from the comment module to add comment links to the node
 */
function atwork_comments_node_view($node, $view_mode) {
  if (arg(0) == 'node' && is_numeric(arg(1)) && arg(1) == $node->nid && ($view_mode != 'search_index' && $view_mode != 'search_result')) {
    $links = array();

    if (isset($node->atwork_comment) && $node->atwork_comment == COMMENT_NODE_OPEN) {
      $comment_form_location = variable_get('comment_form_location_' . $node->type, COMMENT_FORM_BELOW);
      if (user_access('post comments')) {
        // Show the "post comment" link if the form is on another page, or
        // if there are existing comments that the link will skip past.
        if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE || (!empty($node->comment_count) && user_access('access comments'))) {
          $links['comment-add'] = array(
            'title' => t('Add new comment'),
            'attributes' => array('title' => t('Share your thoughts and opinions related to this posting.')),
            'href' => "node/$node->nid",
            'fragment' => 'comment-form',
          );
          if ($comment_form_location == COMMENT_FORM_SEPARATE_PAGE) {
            $links['comment-add']['href'] = "comment/reply/$node->nid";
          }
        }
      }
      else {
        $links['comment_forbidden'] = array(
          'title' => theme('comment_post_forbidden', array('node' => $node)),
          'html' => TRUE,
        );
      }
    }

    if ($links) {
      $node->content['links']['comment'] = array(
        '#theme' => 'links__node__comment',
        '#links' => $links,
        '#attributes' => array('class' => array('links', 'inline')),
      );
    }
  }
}

/*
 * Implementation of hook_form_alter()
 *
 * Remove the exposed sort by exposed filter as there is only one
 * thing to sort by anyway. Also change the wording of the items per page filter
 *
 * Add a submit callback for wikis because we put wiki comments on a separate tab
 *
 * Add a very simple checkbox to subscribe to the thread (with default subscription settings)
 *
 */
function atwork_comments_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'views-exposed-form-node-comments-block' || $form['#id'] == 'views-exposed-form-node-comments-page-1') {
    if (isset($form['sort_by']['#title'])) {
      $form['sort_by']['#title'] = '';
      //drupal_add_css('#edit-sort-by {display:none}', 'inline');
    }
    $form['items_per_page']['#title'] = '';
    //$form['items_per_page']['#access'] = FALSE;
    if(isset($form['items_per_page']['#options'])){
      $form['sort_order']['#title'] = '';
      foreach ($form['items_per_page']['#options'] as $option => $value) {
        if (is_numeric($option)) {
          $form['items_per_page']['#options'][$option] .= ' ' . t('comments per page');
        }
      }
    }
  }

  if ($form_id == 'comment_node_wiki_form') {
    $form['#submit'][] = 'atwork_comments_wiki_submit';
  }

  if ($form['#id'] == 'comment-form' && !$form['cid']['#value']) {
    global $user;

    $comment_terms = variable_get('atwork_comment_terms','');

    $form['actions']['submit']['#value'] = t('Post');
    $form['actions']['submit']['#prefix'] = $comment_terms['value'];

    // add subscrible checkbox
    $form['atwork_subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('atwork_comment_subscription_text',''),
    );

    $autosub_on_comment = _subscriptions_get_setting('autosub_on_comment', $user);
    $sid = subscriptions_get_subscription($GLOBALS['user']->uid, 'node', 'nid', $form['nid']['#value']);
    if ($sid || $autosub_on_comment) {
      $form['atwork_subscribe']['#default_value'] = 1;
    }

    // add employee news checkbox
    if (user_access('administer comments')) {
      $form['post_as_en'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as Employee News.'),
      );
    }


    $form['#submit'][] = 'atwork_comment_form_submit';
    $form['#validate'][] = 'atwork_comment_form_validate';
  }

  if (isset($form['#node_edit_form']) && isset($form['#node']->atwork_comment)) {
    $form['comment_settings']['comment']['#default_value'] = $form['#node']->atwork_comment;
    $form['#submit'][] = 'atwork_comment_node_form_submit';
  }
}

/*
 * Validation callback
 *
 * Prevent Saren from posting comments
 */
function atwork_comment_form_validate($form, &$form_state) {
  global $user;

//   Saren is leaving so can now post comments again
//  if ($user->uid == 40360 && $form_state['values']['name'] == 'scalvert') {
//    form_set_error('name', 'You aren\'t allowed to post comments!');
//    drupal_goto('node/' . $form['#node']->nid);
//  }
}

/*
 * Submit callback
 *
 * Clear parent comment for forum nodes
 *
 * Set custom message
 *
 * Redirect to the page the comment is on (if not 0)
 *
 * Add subscription if checked
 *
 */
function atwork_comment_form_submit($form, &$form_state) {
  global $user;

  // forum allows replying to a comment
  // disable that here
  if (isset($form_state['values']['pid']) && $form_state['values']['pid']) {
    //$form_state['values']['pid'] = '';
  }

  // clear messages
  $messages = drupal_get_messages();

  // strip confirmation message
  foreach ($messages as $type => $message_group) {
    foreach ($message_group as $message) {
      if ($message != 'Your comment has been posted.') {
        drupal_set_message($message, $type);
      }
    }
  }
}

function atwork_comment_node_form_submit($form, &$form_state) {
  $form_state['values']['atwork_comment'] = $form_state['values']['comment'];
}

/*
 * Implementation of hook_comment_presave()
 *
 * Let administators post as emplyeenews.
 */
function atwork_comments_comment_presave($comment) {
  if (user_access('administer comments') && isset($comment->post_as_en) && $comment->post_as_en) {
    $comment->name = '';
    $comment->uid = 0;
    $comment->is_anonymous = TRUE;
  }
}

/*
 * Implementation of hook_init()
 *
 * We have trouble with identifying "new" comments probably because they are
 * displayed through views.
 *
 */
function atwork_comments_init() {
  if (arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    global $atwork_comments_last_viewed;
    $atwork_comments_last_viewed = node_last_viewed(arg(1));
  }
}

/*
 * Implementation of hook_comment_load()
 *
 * In conjunction with atwork_comments_init() this properly marks comments as new
 *
 */
function atwork_comments_comment_load($comments) {
  global $atwork_comments_last_viewed;
  foreach ($comments as $cid => &$comment) {
    if (isset($atwork_comments_last_viewed)) {
      if ($comment->changed > $atwork_comments_last_viewed) {
        $comment->new = MARK_NEW;
      }
    }
  }
}

/*
 * Implementation of hook_preprocess_comment()
 *
 * Remove title, picture and permalink from comments
 *
 * Add comment links
 *
 * Remove reply links (advanced adds it hard-coded)
 *
 */
function atwork_comments_preprocess_comment(&$variables){
  $variables['title'] = '';
  //$variables['permalink'] = '';
  $variables['picture'] = '';
  $comment = $variables['comment'];

  // we need to manually add comment links because we already
  // tricked drupal into thinking they are disabled for this node
  $node = $variables['node'];
  if (isset($node->atwork_comment)) {
    $node->comment = $node->atwork_comment;
  }

  if ($comment->pid) {
    $parent_comment = comment_load($comment->pid);
    if ($parent_comment->uid) {
      $parent_author = user_load($parent_comment->uid);
      $reply_to_name = _atwork_display_name($parent_author);
    }
    else {
      $reply_to_name = variable_get('anonymous', t('Employee News'));
      $parent_author = '';
    }

    if ($parent_comment->status == 1) {
      $title = $parent_comment->comment_body[$parent_comment->language][0]['safe_value'];
      $title = strip_tags(str_replace("\n", "\n\n", $title));
    }
    else {
      $title = '';
    }
    $variables['author'] .= ' ' . t('in !link to !name', array(
      '!link' => l('reply', 'node/' . $node->nid, array(
        'query' => array(
          'c' => $parent_comment->cid,
        ),
        'fragment' => 'comment-' . $parent_comment->cid,
        'attributes' => array(
          'title' =>  $title,
        ),
      )),
      '!name' => theme('username', array('account' => $parent_author)),
    ));
  }

  if ($node->type != 'status') {
    $variables['content']['links']['comment'] = array(
      '#theme' => 'links__comment__comment',
      '#links' => comment_links($variables['comment'], $node),
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }

  if (isset($variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'])) {
    $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'] =
      str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title']);
  }

  // now remove reply link on non-forums
//  if ($node->type != 'forum' && isset($variables['content']['links']['comment']['#links']['comment-reply'])) {
//    unset($variables['content']['links']['comment']['#links']['comment-reply']);
//  }

  //dpm($variables);
}

/**
 * Implementation of hook_preprocess_node()
 *
 * In case we are showing a node in colorbox and for some reason
 * our normal wrapper isn't being added
 *
 */
function atwork_comments_preprocess_node(&$variables){
  if (isset($variables['content']['comments']['comments']) && (!isset($variables['content']['comments']['comments']['#prefix']))) {
    $variables['content']['comments']['comments']['#prefix'] = '<div id="comment-wrapper-nid-' . $variables['nid'] . '">';
    $variables['content']['comments']['comments']['#suffix'] = '</div>';
  }
}

/*
 * Implementation of hook_views_pre_render()
 *
 * Remove exposed filter is no comments posted
 */
function atwork_comments_views_pre_render(&$view) {
  if ($view->name == 'node_comments' && $view->current_display == 'block') {
    $view->build_info['title'] = _atwork_fa('comment') . t('Comments');
    if (!$view->result) {
      $view->exposed_widgets = '';
    }
  }
}

/**
 * Implementation of hook_views_post_render()
 *
 * Add the comment form to our view
 *
 */

function atwork_comments_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'node_comments') {
    $output = preg_replace('/<span class="new">New<\/span>/', '<span id="new" class="new">New</span>', $output, 1);
  }

  if ($view->name == 'node_comments' && $view->current_display == 'block') {
    if (isset($view->args[0])) {
      $node = node_load($view->args[0]);
      if ($node && isset($node->nid) && $node->nid != 96) {
        // don't display on wiki node
        if ($node->type == 'wiki' && !arg(2)) {
          $output = '';
          return;
        }


        if (isset($node->atwork_comment)) {
          //$output = '';
          switch ($node->atwork_comment) {
            case 0:
              $output = '';
              break;
            case 1:
              if (!$node->comment_count) {
                $output = '';
              }
              break;
            case 2:
              //dpm($view);
              if (!isset($view->exposed_input['sort_by'])) {
                $form_output = drupal_get_form('comment_node_' . $node->type . '_form', (object) array('nid' => $view->args[0]));
                // Need to make sure we do not already have a form - this insures it is not duplicated.
                if(!isset($view->preview)){
                  $output .= drupal_render($form_output);
                }
              }
              break;
          }

          if ($output) {
            //dpm($view);
            $output = '<div id="comments">' . $output . '</div>';
          }

          //  WHY IS THIS NEEDED?!?!
          $output = str_replace('</div> <!-- /comment --></div></div>  </div>', '</div> <!-- /comment --></div></div>', $output);

          //dpm($output);
          //dpm($node);
          return;
        }
      }
    }
    $output = '';
  }
}
/**
 * Implementation of hook_preprocess_block
*/
function atwork_comments_preprocess_block(&$variables) {
  global $user;

  if ($variables['block']->delta == 'home_page_blocks-videos') {
    $variables['block']->subject = _atwork_fa('facetime-video') . $variables['block']->subject;
  }
  if ($variables['block']->delta == 'home_page_blocks-polls') {
    $variables['block']->subject = _atwork_fa('pencil') . $variables['block']->subject;
  }
  if ($variables['block']->delta == 'home_page_blocks-forums') {
    $variables['block']->subject = _atwork_fa('bullhorn') . $variables['block']->subject;
  }
  if ($variables['block']->delta == 'home_page_blocks-blogs') {
    $variables['block']->subject = _atwork_fa('bookmark') . $variables['block']->subject;
  }
}

/*
 * Implementation of hook_views_pre_build()
 *
 * Set number of results and sort order based on users individual preferences
 *
 * Set the view to the page the comment appears on.
 * This will ensure the fragment will be able to focus the browser on the comment
 *
 */
function atwork_comments_views_pre_build(&$view) {
  if ($view->name == 'node_comments') {

    if (arg(0) == 'search') {
      return;
    }

    global $pager_total;
    $pager_total[0] = 0;

    global $user;

    // if there is no data in $user->data we can leave now
    if (isset($user->data['atwork_comments_per_page']) && isset($user->data['atwork_sort_order'])) {
      // set items per page
      if ($user->data['atwork_comments_per_page'] == 'All') {
        $view->set_items_per_page(0);
      }
      else {
        $view->set_items_per_page($user->data['atwork_comments_per_page']);
      }
    }

		$view->set_items_per_page(10);

    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));
      if (!$node) {
        return;
      }
    }
    else {
      return;
    }

    // determine sort order and items per page
    if (isset($user->data['atwork_comments_per_page']) && isset($user->data['atwork_sort_order'])) {
      $items_per_page = $user->data['atwork_comments_per_page'];
      $sort_order = $user->data['atwork_sort_order'];
    }

    if (isset($_GET['items_per_page'])) {
      if ($_GET['items_per_page']) $items_per_page = $_GET['items_per_page'];
    }

    if (isset($_GET['sort_order'])) {
      if ($_GET['sort_order']) $sort_order = $_GET['sort_order'];
    }

    if (!isset($items_per_page)) $items_per_page = 10;
    if (!$items_per_page) $items_per_page = 10;
    if (!isset($sort_order)) $sort_order = 'DESC';


    if (!isset($_GET['c'])) {
      //$GLOBALS['pager_total'][1] = 0;
      // we have no comment to find so display normally
      return;
    }

    $result = db_query('
      SELECT cid FROM {comment}
      WHERE status = 1 AND nid = :nid
      ORDER BY created ' . $sort_order,
         array(
           ':nid' => $node->nid,
         ));

    $data = array();
    foreach ($result as $record) {
      $data[] = $record->cid;
    }

    if ($data) {
      $position = array_search($_GET['c'], $data);
      if ($position) {
        $position++;
        if ($position > $items_per_page && $items_per_page > 0) {
          $curr_page = $position / $items_per_page;
          $view->current_page = (ceil($curr_page) - 1);
        }
      }
    }
  }
}

/*
 * Submit callback
 *
 * Special case for wiki comments as they appear on a different tab
 *
 */
function atwork_comments_wiki_submit($form, &$form_state) {
  //dpm($form_state);
  $redirect = array(
    0 => 'node/' . $form['#node']->nid . '/discussion',
    1 => array(
      'fragment' => 'comment-' . $form_state['comment']->cid,
    ),
  );
  $form_state['redirect'] = $redirect;
}

/*
 * Implementation of hook_comment_insert()
 *
 * Override the subscription setting where you are auto-subscribed to nodes you comment on
 */
function atwork_comments_comment_insert($comment) {
  if (!$comment->atwork_subscribe) {
    subscriptions_delete($GLOBALS['user']->uid, 'node', 'nid', $comment->nid);
  }
}

/**
 * Implementation of hook_comment_view_alter
 *
 * @param $build
 * @return void
 * For some reason, our first forum post keeps losing its edit/reply/delete buttons
 * We will check here and re-implement them if they are missing.
 */

function atwork_comments_comment_view_alter(&$build){
  if(isset($build['#entity_type']) && $build['#entity_type'] == 'comment'){
    if(isset($build['#bundle']) && $build['#bundle'] == 'comment_node_forum'){
      // Only admins should get edit and delete by default
      if(_atwork_is_admin()){
        // Add in edit link if not there
        if(isset($build['links']['comment']['#links']) && !isset($build['links']['comment']['#links']['comment-edit'])){
          $build['links']['comment']['#links']['comment-edit'] = array(
            'title' => "<span>edit</span>",
            'href' => "comment/" . $build['#node']->cid .'/edit',
            'html' => TRUE,
            'attributes' => array(
              'class' => array(
                '0' => 'af-button-small',
              )
            )
          );
        }
        // Delete link if missing
        if(isset($build['links']['comment']['#links']) && !isset($build['links']['comment']['#links']['comment-delete'])){
          $build['links']['comment']['#links']['comment-delete'] = array(
              'title' => "<span>delete</span>",
              'href' => "comment/" . $build['#node']->cid .'/delete',
              'html' => TRUE,
              'attributes' => array(
                'class' => array(
                  '0' => 'af-button-small',
                )
              )
          );
        }
      }
      // Reply link if missing (Everyone should see this)
      if(isset($build['links']['comment']['#links']) && !isset($build['links']['comment']['#links']['comment-reply'])){
        $build['links']['comment']['#links']['comment-reply'] = array(
            'title' => "<span>reply</span>",
            'href' => "comment/reply/" . $build['#node']->nid . '/' . $build['#node']->cid,
            'html' => TRUE,
            'attributes' => array(
              'class' => array(
                '0' => 'af-button-small',
              )
            )
        );
      }
    }
  }
}
