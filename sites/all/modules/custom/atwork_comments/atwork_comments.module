<?php

/*
 * Implementation of hook_form_alter()
 *
 * Add a very simple checkbox to subscribe to the thread (with default subscription settings)
 *
 */
function atwork_comments_form_alter(&$form, &$form_state, $form_id) {

  if ($form['#id'] == 'comment-form' && !$form['cid']['#value']) {
    global $user;

    $comment_terms = variable_get('atwork_comment_terms','');

    $form['actions']['submit']['#value'] = t('Post');
    $form['actions']['submit']['#prefix'] = $comment_terms['value'];
    // add subscrible checkbox
    $form['atwork_subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('atwork_comment_subscription_text',''),
    );
    $autosub_on_comment = _subscriptions_get_setting('autosub_on_comment', $user);
    $sid = subscriptions_get_subscription($GLOBALS['user']->uid, 'node', 'nid', $form['nid']['#value']);
    if ($sid || $autosub_on_comment) {
      $form['atwork_subscribe']['#default_value'] = 1;
    }
    // add employee news checkbox
    if (user_access('administer comments')) {
      $form['post_as_en'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as Employee News.'),
      );
    }
    global $user;
    $current_commenter = user_load($user);
    // add Pension BC checkbox
    if(user_has_role(18, $current_commenter)){
      $form['post_as_pensions'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as Public Service Pension Plan'),
      );
<<<<<<< HEAD
=======
    }


    $form['#submit'][] = 'atwork_comment_form_submit';
    $form['#validate'][] = 'atwork_comment_form_validate';
  }

  if (isset($form['#node_edit_form']) && isset($form['#node']->atwork_comment)) {
    $form['comment_settings']['comment']['#default_value'] = $form['#node']->atwork_comment;
    $form['#submit'][] = 'atwork_comment_node_form_submit';
  }
}

/*
 * Validation callback
 *
 * Prevent Saren from posting comments
 */
function atwork_comment_form_validate($form, &$form_state) {
  global $user;

//   Saren is leaving so can now post comments again
//  if ($user->uid == 40360 && $form_state['values']['name'] == 'scalvert') {
//    form_set_error('name', 'You aren\'t allowed to post comments!');
//    drupal_goto('node/' . $form['#node']->nid);
//  }
}

/*
 * Submit callback
 *
 * Clear parent comment for forum nodes
 *
 * Set custom message
 *
 * Redirect to the page the comment is on (if not 0)
 *
 * Add subscription if checked
 *
 */
function atwork_comment_form_submit($form, &$form_state) {
  global $user;

  // forum allows replying to a comment
  // disable that here
  if (isset($form_state['values']['pid']) && $form_state['values']['pid']) {
    //$form_state['values']['pid'] = '';
  }

  // clear messages
  $messages = drupal_get_messages();

  // strip confirmation message
  foreach ($messages as $type => $message_group) {
    foreach ($message_group as $message) {
      if ($message != 'Your comment has been posted.') {
        drupal_set_message($message, $type);
      }
    }
  }


  // determine redirect location
  if (isset($form_state['complete form']['#node']->comment_count)) {
    if (isset($user->data['atwork_comments_per_page']) && $user->data['atwork_comments_per_page'] &&
          isset($user->data['atwork_sort_order']) && $user->data['atwork_sort_order']) {
        $sort_order = $user->data['atwork_sort_order'];
        $items_per_page = $user->data['atwork_comments_per_page'];
    }
    if (!isset($sort_order) && !isset($items_per_page)) {
      $sort_order = 'ASC';
      $items_per_page = 10;
    }

    if ($sort_order == 'DESC' && isset($form_state['redirect'][1]['query']['page'])) {
      unset($form_state['redirect'][1]['query']['page']);
    }
    elseif ($sort_order == 'ASC') {
      if ($form_state['complete form']['#node']->comment_count <= $items_per_page) {
        unset($form_state['redirect'][1]['query']['page']);
      }
      else {
        $form_state['redirect'][1]['query']['page'] = floor($form_state['complete form']['#node']->comment_count / $items_per_page);
      }
>>>>>>> master
    }
  }
}


/*
 * Implementation of hook_comment_presave()
 *
 * Let administators post as emplyeenews.
 */
function atwork_comments_comment_presave($comment) {
  if (user_access('administer comments') && isset($comment->post_as_en) && $comment->post_as_en) {
    $comment->name = '';
    $comment->uid = 0;
    $comment->is_anonymous = TRUE;
  }
<<<<<<< HEAD
=======
  if(user_has_role(18, $current_commenter) && isset($comment->post_as_pensions) && $comment->post_as_pensions){
    $comment->name = 'Public Service Pension Plan';
    // TODO: THis will need to be changed to Pensions UID after it is created on @Work
    $comment->uid = 99633;
    $comment->is_anonymous = FALSE;
  }
}
>>>>>>> master

  global $user;
  $current_commenter = user_load($user);
  // Pension plan hack for comments
  if(user_has_role(18, $current_commenter) && isset($comment->post_as_pensions) && $comment->post_as_pensions){
    $comment->name = 'Public Service Pension Plan';
    // TODO: This will need to be changed to Pensions UID after it is created on @Work
    $comment->uid = 99633;
    $comment->is_anonymous = FALSE;
  }
}

/*
 * Implementation of hook_preprocess_comment()
 *
 * Remove title, picture and permalink from comments
 *
 * Add comment links
 *
 *
 */
function atwork_comments_preprocess_comment(&$variables){
  //$variables['title'] = '';
  //$variables['permalink'] = '';
  //$variables['picture'] = '';
  if(isset($variables['permalink'])){
    $variables['permalink'] = str_replace(">Permalink</a>", ">Comment URL</a>", $variables['permalink']);
  }

  $comment = $variables['comment'];
  // We want to show users display name, not their idir
  if($comment->uid){
    $commenter = user_load($comment->uid);
    $comment_author = _atwork_display_name($commenter);
    $variables['author'] = l(_atwork_display_name($commenter), 'user/' . $commenter->uid);
  }
  // We also want to note if this is a reply to someone else's comment (i.e. does it have a parent?)
  if ($comment->pid) {
    $parent_comment = comment_load($comment->pid);
    if ($parent_comment->uid) {
      $parent_author = user_load($parent_comment->uid);
      $reply_to_name = _atwork_display_name($parent_author);
    }
    else {
      $reply_to_name = variable_get('anonymous', t('Employee News'));
      $parent_author = '';
    }

    if ($parent_comment->status == 1) {
      $title = $parent_comment->comment_body[$parent_comment->language][0]['safe_value'];
      $title = strip_tags(str_replace("\n", "\n\n", $title));
    }
    else {
      $title = '';
    }
    $variables['author'] .= ' ' . t('in !link to !name', array(
      '!link' => l('reply', 'node/' . $node->nid, array(
        'query' => array(
          'c' => $parent_comment->cid,
        ),
        'fragment' => 'comment-' . $parent_comment->cid,
        'attributes' => array(
          'title' =>  $title,
        ),
      )),
      '!name' => l(_atwork_display_name($parent_author), 'user/' . $parent_author->uid),
    ));
  }
  if (isset($variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'])) {
    $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'] =
      str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title']);
  }

  //dpm($variables);
}

/**
 * Implementation of hook_preprocess_node()
 *
 * In case we are showing a node in colorbox and for some reason
 * our normal wrapper isn't being added
 *
 */
function atwork_comments_preprocess_node(&$variables){
  if (isset($variables['content']['comments']['comments']) && (!isset($variables['content']['comments']['comments']['#prefix']))) {
    $variables['content']['comments']['comments']['#prefix'] = '<div id="comment-wrapper-nid-' . $variables['nid'] . '">';
    $variables['content']['comments']['comments']['#suffix'] = '</div>';
  }
}

/*
 * Implementation of hook_comment_insert()
 *
 * Override the subscription setting where you are auto-subscribed to nodes you comment on
 */
function atwork_comments_comment_insert($comment) {
  if (!$comment->atwork_subscribe) {
    subscriptions_delete($GLOBALS['user']->uid, 'node', 'nid', $comment->nid);
  }
}

