<?php

/*
 * Implementation of hook_form_alter()
 *
 * Add a very simple checkbox to subscribe to the thread (with default subscription settings)
 *
 */
function atwork_comments_form_alter(&$form, &$form_state, $form_id) {
	
  if ($form['#id'] == 'comment-form' && !$form['cid']['#value']) {
    global $user;
    //$comment_terms = variable_get('atwork_comment_terms','');

    $form['actions']['submit']['#value'] = t('Post');
    // add subscrible checkbox
    $form['atwork_subscribe'] = array(
      '#type' => 'checkbox',
      '#title' => variable_get('atwork_comment_subscription_text',''),
    );
    $autosub_on_comment = _subscriptions_get_setting('autosub_on_comment', $user);
    $sid = subscriptions_get_subscription($GLOBALS['user']->uid, 'node', 'nid', $form['nid']['#value']);
    if ($sid || $autosub_on_comment) {
      $form['atwork_subscribe']['#default_value'] = 1;
    }
    // add employee news checkbox
    if (user_access('administer comments')) {
      $form['post_as_en'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as Employee News.'),
      );
    }
    $current_commenter = user_load($user->uid);
    // Pension BC checkbox
    if(user_has_role(18, $current_commenter)){
      $form['post_as_pensions'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as Public Service Pension Plan'),
      );    
    }
    // BCGEU checkbox
    if(user_has_role(20, $current_commenter)){
      $form['post_as_bcgeu'] = array(
        '#type' => 'checkbox',
        '#title' => t('Post as BCGEU Representative'),
      );    
    }
    // Acknowledge terms checkbox
    $form['agree_to_terms'] = [
      '#type' => 'checkbox',
      '#title' => '<span class="form-required" title="This field is required.">*</span> I have read and agree to the <a href="/org/terms-use">Terms of Use</a>.',
      //'#required' => "required"
    ];
    // Set our own validator so we can set an appropriate message before Drupal sets it's weird message.
    array_unshift($form['#validate'], 'check_acknowledge_box');
  }
}


function check_acknowledge_box($form, $form_state){
  if($form['agree_to_terms']['#checked'] == FALSE){
    form_set_error('agree_to_terms', t(
      'You must agree to the Terms of Use before posting a comment. '
    ));
  }
}


/*
 * Implementation of hook_comment_presave()
 *
 * Let administators post as emplyeenews.
 */
function atwork_comments_comment_presave($comment) {
  if (user_access('administer comments') && isset($comment->post_as_en) && $comment->post_as_en) {
    $comment->name = '';
    $comment->uid = 0;
    $comment->is_anonymous = TRUE;
  }

  global $user;
  $current_commenter = user_load($user->uid);
  // Pension plan mod for comments
  if(user_has_role(18, $current_commenter) && isset($comment->post_as_pensions) && $comment->post_as_pensions){
    $comment->name = 'Public Service Pension Plan';
    $comment->uid = 99633;
    $comment->is_anonymous = FALSE;
  }
  // BCGEU mod for comments
  if(user_has_role(20, $current_commenter) && isset($comment->post_as_bcgeu) && $comment->post_as_bcgeu){
    $comment->name = 'BCGEU Representative';
    // TODO: This will need to be changed to Pensions UID after it is created on @Work
    $comment->uid = 100406;
    $comment->is_anonymous = FALSE;
  }
}

/*
 * Implementation of hook_preprocess_comment()
 *
 * Remove title, picture and permalink from comments
 *
 * Add comment links
 *
 *
 */
function atwork_comments_preprocess_comment(&$variables){
  //$variables['title'] = '';
  //$variables['permalink'] = '';
  //$variables['picture'] = '';
  if(isset($variables['permalink'])){
    $variables['permalink'] = str_replace(">Permalink</a>", ">Comment URL</a>", $variables['permalink']);
  }

  $comment = $variables['comment'];
  // We want to show users display name, not their idir
  if($comment->uid){
    $commenter = user_load($comment->uid);
    $comment_author = _atwork_display_name($commenter);
    $variables['author'] = l(_atwork_display_name($commenter), 'user/' . $commenter->uid);
  }
  // We also want to note if this is a reply to someone else's comment (i.e. does it have a parent?)
  if ($comment->pid) {
    $parent_comment = comment_load($comment->pid);
    if ($parent_comment->uid) {
      $parent_author = user_load($parent_comment->uid);
      $reply_to_name = _atwork_display_name($parent_author);
    } else {
      $reply_to_name = variable_get('anonymous', t('Employee News'));
      $parent_author = '';
    }

    if ($parent_comment->status == 1) {
      $title = $parent_comment->comment_body[$parent_comment->language][0]['safe_value'];
      $title = strip_tags(str_replace("\n", "\n\n", $title));
    } else {
      $title = '';
    }
    // We need to grab the name and link we want to use. If this is EN we need to add a link or we get an error and broken link.
    $name_link = isset($parent_author) && !empty($parent_author)? l(_atwork_display_name($parent_author), 'user/' . $parent_author->uid) : l('Employee News', 'at-work');
    $variables['author'] .= ' ' . t('in !link to !name', array(
      '!link' => l('reply', 'node/' . $comment->nid, array(
        'query' => array(
          'c' => $parent_comment->cid,
        ),
        'fragment' => 'comment-' . $parent_comment->cid,
        'attributes' => array(
          'title' => $title,
        ),
      )),
      '!name' => $name_link,
    ));

  }
  if (isset($variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'])) {
    $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title'] =
      str_replace('rel="nofollow">', 'rel="nofollow">' . _atwork_fa('flag'), $variables['content']['links']['flag']['#links']['flag-abuse_comments']['title']);
  }

  //dpm($variables);
}

/**
 * Implementation of hook_preprocess_node()
 *
 * In case we are showing a node in colorbox and for some reason
 * our normal wrapper isn't being added
 *
 */
function atwork_comments_preprocess_node(&$variables){
  if (isset($variables['content']['comments']['comments']) && (!isset($variables['content']['comments']['comments']['#prefix']))) {
    $variables['content']['comments']['comments']['#prefix'] = '<div id="comment-wrapper-nid-' . $variables['nid'] . '">';
    $variables['content']['comments']['comments']['#suffix'] = '</div>';
  }
}

/*
 * Implementation of hook_comment_insert()
 *
 * Override the subscription setting where you are auto-subscribed to nodes you comment on
 */
function atwork_comments_comment_insert($comment) {
  if (!$comment->atwork_subscribe) {
    subscriptions_delete($GLOBALS['user']->uid, 'node', 'nid', $comment->nid);
  }
}

