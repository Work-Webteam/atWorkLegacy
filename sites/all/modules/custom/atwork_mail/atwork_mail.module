<?php

/*
 * Helper function that checks for an email domain and proper syntax
 * If the email address is deemed correct, returns email address.
 * Else returns false.
 */
function _atwork_valid_email($email) {
  // Make it all lower case.
  $email = strtolower($email);
  // Check against a popular regex.
  $pattern = "/^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$/";
  //If we match, return the $email.
  if(preg_match($pattern, $email, $matches)) {
    return $email;
  }
  // Else return false.
  return FALSE;
}

/*
 * Helper function
 *
 * Return an array of email addresses from a textarea
 */
function _atwork_get_addresses($string) {
  $string = strtolower($string);
  $string = str_replace(';', ',', $string);
  $string = str_replace(array("\r\n", "\n", "\r"), ',', trim($string));
  $string = str_replace(' ', '', $string);

  $addresses = explode(',', $string);
  return array_filter($addresses);
}



/*
 * Implementation of hook_exit()
 *
 * We cached the emails so we don't need to check them twice in case
 * there were other form errors.
 *
 * As soon as they leave the form we remove the cached emails
 */
function atwork_mail_exit($destination = NULL) {
  if (isset($_SESSION['atwork_LDAP_checked'])) {
    // unset if they aren't on the page anymore
    $atwork_LDAP_checked = &drupal_static('atwork_LDAP_checked');

    if (isset($atwork_LDAP_checked) ? $_SESSION['atwork_LDAP_checked']['id'] == $atwork_LDAP_checked ? TRUE : FALSE : FALSE) {
      // we are still on the same page doing the checking, don't unset anything
      return;
    }
  }
}

/*
 * Implementation of hook_mail_alter()
 *
 * Modify some email headers the way we like them for outlook/exchange
 */
function atwork_mail_mail_alter(&$message) {
  // We don't want to send emails to users who have been deactivated.
  $email_address = $message['to'];
  $email_extension = explode('@', $email_address);
  if(isset($email_extension[1]) && $email_extension[1] == 'gov.old.ca'){
    $message['send'] = FALSE;
  }

  if ($message['id'] == 'forward_forward_page') {
    // we added quotes around the name in atwork_misc atwork_forward_form_validate()
    // now remove them from the subject
    $message['subject'] = str_replace('"', '', $message['subject']);
  }

  if ($message['id'] == 'ecard_ecard_ecard') {
    // if no name_to fix the emptyness
    $message['body'][0] = str_replace('Hello ,', 'Hello,', $message['body'][0]);

    // problem: ecard removing commas and messing up email fields
    // try to load recipient
    if ($user = user_load_by_mail($message['params']['ecard']->mail_to)) {
      $message['to'] = '"' . _atwork_display_name($user) . '" <' . $user->mail .'>';
    }

    // now fix sender
    $message['from'] = $message['headers']['Sender'];
    $message['headers']['From'] = '"' . $message['params']['ecard']->name_from . '" <' . $message['headers']['Sender'] .'>';
    $message['headers']['Reply-To'] = '"' . $message['params']['ecard']->name_from . '" <' . $message['params']['ecard']->mail_from .'>';
  }

  if ($message['id'] == 'ecard_ecard_copy') {
    // fix sender
    $message['from'] = '"' . $message['params']['ecard']->site_name . '" <' . $message['headers']['Sender'] .'>';
    $message['headers']['From'] = '"' . $message['params']['ecard']->site_name . '" <' . $message['headers']['Sender'] .'>';
    // fix to
    if ($user = user_load_by_mail($message['params']['ecard']->mail_from)) {
      $message['to'] = '"' . _atwork_display_name($user) . '" <' . $user->mail .'>';
    }
  }
}

/**
 * Implements hook_mail();
 */
function atwork_mail_mail($key, &$message, $params) {
  if($key ==  'atwork_mail_default') {
    if (isset($params['subject'])) {
      $message['subject'] = $params['subject'];
    }
    if (isset($params['body'])) {
      $message['body'][] = $params['body'];
    }
    if (isset($params['headers']) && is_array($params['headers'])) {
      // Ensure we catch all Cc and Bcc headers, regardless of case,
      // and protecting against multiple instances of the "same" header.
      $header_keys = array();
      foreach (array_keys($params['headers']) as $key) {
        $header_keys[strtolower($key)][] = $key;
      }
      // We need to stop messages from CCing if we have set the rerout email variable
      if (!empty($header_keys['cc']) && variable_get(REROUTE_EMAIL_ENABLE) == 1) {
        foreach ($header_keys['cc'] as $header) {
          $message['headers']['X-Rerouted-Original-Cc'] = $params['headers'][$header];
          $message['params']['headers']['X-Rerouted-Original-Cc'] = $params['headers'][$header];
          $params['headers']['X-Rerouted-Original-Cc'] = $params['headers'][$header];
          unset($message['headers'][$header]);
          unset($message['params']['headers'][$header]);
          unset($params['headers'][$header]);
        }
      } elseif(!empty($header_keys['cc']) && variable_get(REROUTE_EMAIL_ENABLE) == 0) {
        $message['headers'] += $params['headers'];
      }

      if (!empty($header_keys['bcc']) && variable_get(REROUTE_EMAIL_ENABLE) == 1) {
        foreach ($header_keys['bcc'] as $header) {
          $message['headers']['X-Rerouted-Original-Bcc'] = $params['headers'][$header];
          $message['params']['headers']['X-Rerouted-Original-Bcc'] = $params['headers'][$header];
          $params['headers']['X-Rerouted-Original-Bcc'] = $params['headers'][$header];
          unset($message['headers'][$header]);
          unset($message['params']['headers'][$header]);
          unset($params['headers'][$header]);

        }
      } elseif(!empty($header_keys['bcc']) && variable_get(REROUTE_EMAIL_ENABLE) == 0) {
          $message['headers'] += $params['headers'];
      }
    }
    if(isset($params['attachment']) && is_array($params['attachment'])) {
      $message['params']['attachments'][] = $params['attachment'];
    }
  }
}

/*
 * Validation Callback for forward_form
 *
 * Validate the recipient email addresses
 *
 * Add quotes around the from name to fix email encoding
 */
function atwork_forward_form_validate($form, &$form_state) {
  if (form_get_errors()) return;

  // add quotes around the name because forward module doesn't
  // we will later remove them from the subject and body in atwork_mail and
  $form_state['values']['name'] = '"' . $form_state['values']['name'] . '"';
}

/**
 *
 * Forward form fields alter prior to mailing.
 *
 */
/**
 * Implements hook_form_alter().
 */
function atwork_mail_form_alter(&$form, &$form_state, $form_id) {
  // forward form alterations.
  // Update a few fields, add new validation handler.
  if ($form_id == 'forward_form') {
    $form['message']['email']['#type'] = 'hidden';
    $form['message']['name']['#title'] = t('FROM');
    $form['message']['name']['#default_value'] = _atwork_display_name($GLOBALS['user']);
    $form['message']['name']['#disabled'] = TRUE;
    $form['message']['recipients']['#title'] = 'TO (Limited to organizations within the BC Public Service.)';
    $form['#validate'][] = 'atwork_forward_form_validate';
  }
}
