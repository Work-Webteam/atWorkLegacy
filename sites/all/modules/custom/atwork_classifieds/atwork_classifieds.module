<?php

/**
 * Helper function to use the views exposed filter category in the breadcrumb
 *
 */
function _atwork_classifieds_breadcrumb($term = NULL) {
  $breadcrumbs = array();
  $breadcrumbs[] = l(t('Home'), '<front>');
  $breadcrumbs[] = l(t('Classifieds'), 'classifieds');
  $breadcrumbs[] = l(t('All Categories'), 'classifieds/list');

  if ($term) {
    $term_uri = entity_uri('taxonomy_term', $term);
    $breadcrumbs[] = l($term->name, $term_uri['path'], $term_uri['options']);
  }

  drupal_set_breadcrumb($breadcrumbs);
}

/*
 * Implementation of hook_block_info()
 *
 * Providing our own block of classified categories
 *
 */
function atwork_classifieds_block_info() {
  // This example comes from node.module.
  $blocks['categories'] = array(
    'info' => t('Classifieds: Home Page Categories'),
    'region' => 'content',
    'pages' => 'classifieds',
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );
  $blocks['homepage_tabs'] = array(
    'info' => t('Classifieds: Homepage Tabs'),
    'pages' => 'classifieds',
    'visibility' => BLOCK_VISIBILITY_LISTED,
  );

  return $blocks;
}

/*
 * Implementation of hook_block_view()
 *
 * Could probably have done this in views (drupal 8)
 *
 */
function atwork_classifieds_block_view($delta = '') {
  // This example is adapted from node.module.
  $block = array();

  switch ($delta) {
    case 'categories':
      // get the terms to use for zero results
      $terms = taxonomy_get_tree(2, 0, 1);

      $result = db_query("SELECT t.name, t.tid, COUNT(n.nid) as count FROM {taxonomy_term_data} t
          LEFT JOIN {taxonomy_index} ti ON (t.tid = ti.tid)
          LEFT JOIN {node} n ON (ti.nid = n.nid)
        WHERE t.vid = 2
        GROUP BY t.tid
        ORDER BY t.weight");

      $items = array();
      foreach ($result as $record) {

        $entity = entity_load('taxonomy_term', array($record->tid));
        $entity = reset($entity);
        $entity_uri = entity_uri('taxonomy_term', $entity);

        $items[] = l($record->name, $entity_uri['path'], $entity_uri['options']) . ' ('. $record->count .')';
      }

      $variables = array(
        'items' => $items,
        'title' => '',
        'type' => 'ul',
        'attributes' => array(),
      );

      $block['subject'] = '';
      $block['content'] = array(
        '#markup' => theme_item_list($variables),
      );
      break;

    case 'homepage_tabs':


      $most_popular = views_embed_view('classifieds', 'block_1');
      $newest = views_embed_view('classifieds', 'block_2');
      $last_chance = views_embed_view('classifieds', 'block_3');


      drupal_add_library('system', 'ui.tabs');

      $js = <<<EOT
(function($) {
  $(document).ready(function() {
    $( "#tabs" ).tabs();
  });
})(jQuery);
EOT;

      drupal_add_js($js, 'inline');

      $block['subject'] = t('Ads');
      $block['content'] = array(
        '#markup' => '
<div id="tabs">
  <ul>
    <li><a href="#tabs-1">Most Popular</a></li>
    <li><a href="#tabs-2">Newest</a></li>
    <li><a href="#tabs-3">Last Chance</a></li>
  </ul>
  <div id="tabs-1">
  ' . $most_popular . '
  </div>
  <div id="tabs-2">
  ' . $newest . '
  </div>
  <div id="tabs-3">
  ' . $last_chance . '
  </div>
</div>',
      );









      break;
  }
  return $block;
}

/*
 * Implementation of hook_node_view()
 *
 * Add OBO/Firm to price
 * Add expiry date
 *
 */
function atwork_classifieds_node_view($node, $view_mode, $langcode) {
  if ($node->type != 'classified') {
    return;
  }

  if ($view_mode == 'full') {
    // Hide the OBO field and add it to the price if it was selected
    $obo_field = field_get_items('node', $node, 'field_obo');

    unset($node->content['field_obo']);

    if ($obo_field[0]['value']) {
      $node->content['field_price'][0]['#markup'] .= ' ' . t('(OBO)');
    }
    else {
      $node->content['field_price'][0]['#markup'] .= ' ' . t('(Firm)');
    }

    // add expiry to end of content
    $node->content['expiry'] = array(
      '#weight' => 999,
      '#markup' => '<div class="field expiry">'
                    . t('Expires')
                    . ' '
                    . date('l, F j, Y', ($node->created + (60*60*24*30)))
                    . '</div>',
    );
    // combine email and display name if possible
//    /dpm($node);
    $email = field_get_items('node', $node, 'field_email');
    $contact_name = field_get_items('node', $node, 'field_contact_name');
    $account = user_load($node->uid);
    if ($account) {
      $display_name = field_get_items('user', $account, 'field_display_name');
    }

    if ((isset($email[0]['email']) && isset($contact_name[0]['safe_value']) && isset($account) && isset($display_name[0]['safe_value']))
         && $display_name[0]['safe_value'] == $contact_name[0]['safe_value'] && $email[0]['email'] == $account->mail) {
      unset($node->content['field_contact_name']);
      $variables = array(
        'account' => $account,
        'name' => $display_name[0]['safe_value'],
        'link_path' => 'mailto:' . $account->mail,
        'email_link' => TRUE,
      );
      $node->content['field_email'][0]['#markup'] = theme('username', $variables);
    }

    // argg. re-shuffle fields to a seperate container
    $fields = array(
      'field_classified_category',
      'field_classified_location',
      'field_price',
      'field_email',
      'field_phone',
      'field_contact_name',
      'expiry',
    );

    $node->content['atwork_classifieds'] = array(
      '#prefix' => '<div id="atwork-classifieds-info">',
      '#suffix' => '</div>',
      '#weight' => 20,
    );

    foreach ($fields as $field) {
      if (isset($node->content[$field]) && $node->content[$field]) {
        $node->content['atwork_classifieds'][$field] = $node->content[$field];
        unset($node->content[$field]);
      }
    }

    // breadcrumb
    $category_field = field_get_items('node', $node, 'field_classified_category');
    $term = $category_field[0]['taxonomy_term'];
    _atwork_classifieds_breadcrumb($term);
  }
  if ($view_mode == 'teaser') {
    // move price and title into body for themeing
//    $price_field = field_get_items('node', $node, 'field_price');
//    if (!isset($node->content['body'][0]['#markup'])) {
//      $node->content['body'][0]['#markup'] = '';
//    }
  }
}

function atwork_classifieds_preprocess_page(&$variables, $hook) {
//  if (isset($variables['node']->nid)
//      && $variables['node']->nid
//      && isset($variables['page']['content']['views_classified_gallery-block'])
//      && isset($variables['page']['content']['system_main']['nodes'][$variables['node']->nid])
//      && $variables['node']->type == 'classified') {
//    $gallery = array(
//      0 => $variables['page']['content']['views_classified_gallery-block'],
//      '#weight' => 2,
//    );
//    array_splice($variables['page']['content']['system_main']['nodes'][$variables['node']->nid], 2, 0, $gallery);
//    unset($variables['page']['content']['views_classified_gallery-block']);
//  }
}

function atwork_classifieds_preprocess_node(&$variables) {
  if (isset($variables['node']->type) && $variables['node']->type != 'classified') {
    return;
  }
  if ($variables['teaser']) {
    $title = '<h2>$'
        . $variables['field_price']['und'][0]['value']
        . ' - '
        . l($variables['title'], 'node/' . $variables['nid'])
        . '</h2>';

    if (!isset($variables['content']['field_image'])) {
      $variables['content']['field_image'] = array(
        '#markup' => '<div class="field field-name-field-image"><img width="115" src="/sites/all/themes/atwork-zen/images/no-image-found.jpg" /></div>',
        '#weight' => 0,
      );
    }


    $variables['content']['body'] = array(
      '#markup' => '<div class="field field-name-body">' . $title . $variables['content']['body'][0]['#markup'] . '</div>',
      '#weight' => 1,
    );
    $variables['title'] = '';
  }
  else {
    foreach ($variables['content'] as &$arr) {
      if (isset($arr['#weight']) && is_numeric($arr['#weight'])) {
        $arr['#weight'] = $arr['#weight'] + 1;
      }
    }

    $gallery = views_embed_view('classified_gallery', 'block');

    if ($gallery) {
      if (isset($variables['content']['body']['#weight'])) {
        $variables['content']['body']['#weight'] = 0;
      }
      $variables['content']['gallery'] = array(
        '#markup' => $gallery,
        '#weight' => 1,
      );
    }

    //dpm($variables);

  }
}

/**
 * Implements hook_form_FORMID_alter()
 *
 * Sets user's email and display name as default
 *
 * Changes the text of the submit buttons
 *
 * Validates for checkbox on terms of service
 */
function atwork_classifieds_form_classified_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  // put in email as default
  if (!$form['field_email'][$form['field_email']['#language']][0]['email']['#default_value']) {
    $form['field_email'][$form['field_email']['#language']][0]['email']['#default_value'] = $user->mail;
  }

  // and display name
  if (!$form['field_contact_name'][$form['field_contact_name']['#language']][0]['value']['#default_value']) {
    $form['field_contact_name'][$form['field_contact_name']['#language']][0]['value']['#default_value'] = _atwork_display_name($user);
  }

  if (isset($form['#node']->nid)) {
    $form['actions']['submit']['#value'] = t('Update Ad');
  }
  else {
    $form['actions']['submit']['#value'] = t('Post Ad');
  }

  if (isset($form['actions']['delete'])) {
    $form['actions']['delete']['#value'] = t('Delete/Sold');
  }

  $form['#validate'][] = 'atwork_classifieds_form_validation';

}

/**
 * Implements hook_form_FORMID_alter()
 *
 * "stealing" this form to unpublish instead of delete
 *
 */
function atwork_classifieds_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'classified') {
    $form['#submit'] = array('atwork_classifieds_node_delete_submit');
  }
}

/**
 * submit callback for "node_delete_confirm"
 *
 */
function atwork_classifieds_node_delete_submit($form, $form_state) {
  $node = $form['#node'];
  $node->status = 0;
  node_save($node);
  drupal_set_message(t('Classified %title has been deleted', array('%title' => $node->title)));
  drupal_goto('classifieds');
}

/**
 * submit callback for "classified_node_form"
 *
 */
function atwork_classifieds_form_validation($form, $form_state) {
  // terms of use checkbox must be checked
  if (!$form_state['input']['field_terms_of_use'][$form_state['complete form']['field_terms_of_use']['#language']]) {
    form_set_error('field_terms_of_use', t('You must read and check the !terms.', array(
      '!terms' => l(t('terms of use'), 'http://www.google.ca', array('attributes' => array('onclick' => 'window.open(this.href); return false;')))
    )));
  }
}

/**
 * Implements hook_cron()
 *
 * Unpublishes/deleted classified nodes when they expire
 *
 */
function atwork_classifieds_cron() {
  $expiry = variable_get('atwork_classifieds_expiry', 30);
  $deletion = variable_get('atwork_classifieds_deletion', 15);

  // unpublish classified
  if ($expiry) {
    $nids = db_query("SELECT nid FROM {node} WHERE created < :date AND status = 1 AND type = 'classified'", array(':date' => time() - ($expiry * 60 * 60 * 24)));
    if (!empty($nids)) {
      foreach ($nids as $nid) {
        $node = node_load($nid->nid);
        $node->status = 0;
        node_save($node);
      }
    }
  }

  // delete classifieds
  if ($deletion) {
    $nids = db_query("SELECT nid FROM {node} WHERE created < :date AND status = 0 AND type = 'classified'", array(':date' => time() - (($expiry + $deletion) * 60 * 60 * 24)));
    if (!empty($nids)) {
      foreach ($nids as $nid) {
        node_delete($nid->nid);
      }
    }
  }
}

/**
 * Implements hook_views_post_render()
 *
 * Special breadcrumb to match exposed filter
 *
 */
function atwork_classifieds_views_post_render(&$view, &$output, &$cache) {
  if ($view->name == 'classifieds' && $view->current_display == 'page') {
    if (is_numeric($view->exposed_raw_input['category'])) {
      $term = entity_load('taxonomy_term', array($view->exposed_raw_input['category']));
      $term = reset($term);
      _atwork_classifieds_breadcrumb($term);
    }
    else {
      _atwork_classifieds_breadcrumb();
    }
  }
}

/**
 * Implements hook_views_pre_render()
 *
 * Adds expiry to block that shows a logged-in user's current ads
 *
 */
function atwork_classifieds_views_pre_render(&$view) {
  if ($view->name == 'classifieds' && $view->current_display == 'block_4') {
    // add expiry
    $expiry = variable_get('atwork_classifieds_expiry', 30);

    foreach ($view->result as $key => $result) {
      $view->result[$key]->node_created = $view->result[$key]->node_created + ($expiry * 60 * 60 * 24);
    }
  }
  if ($view->name == 'classifieds' && ($view->current_display == 'block_1' || $view->current_display == 'block_2' || $view->current_display == 'block_3')) {
    foreach ($view->result as $key => $result) {
      if (!$result->field_field_image) {
        $view->result[$key]->field_field_image[0]['rendered'] = array(
          '#markup' => '<div class="field field-name-field-image"><img width="115" src="/sites/all/themes/atwork-zen/images/no-image-found.jpg" /></div>',
          '#access' => TRUE,
        );
      }
    }
    //dpm($view);
  }
  // Making our titles more relevant
  if ($view->name == 'classifieds' && $view->current_display == 'page'){
    if(isset($view->exposed_data['category']) && $view->exposed_data['category']){
      if(preg_match('/[A-Za-z]/', $view->exposed_data['category'])) {
        $view->build_info['title'] = 'Classifieds: ' . $view->exposed_data['category'];
      }
      if(preg_match('/[0-9]/', $view->exposed_data['category'])) {
        $term = taxonomy_term_load($view->exposed_data['category']);
        $view->build_info['title'] = 'Classifieds: ' . $term->name;
      }
    }
  }
}

/**
 * Implements hook_preprocess_status_messages()
 *
 * Hack! @todo check if a views module update fixes this
 *
 */
function atwork_classifieds_preprocess_status_messages(&$vars) {
  if (arg(0) == 'classifieds' && arg(1) == 'list') {
    $errors = drupal_get_messages();
    foreach ($errors as $type => $id) {
      foreach ($id as $message){
        // Loop through individual messages, looking for ones to remove or replace
        if ($message != 'An illegal choice has been detected. Please contact the site administrator.') {
          drupal_set_message($message, $type);
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter()
 *
 * Want to hide revision from not admins only
 */

function atwork_classifieds_form_alter(&$form, &$form_state, $form_id) {
  if($form_id == 'classified_node_form') {
    if(!_atwork_is_admin()){
      $form['revision_information']['#access'] = FALSE;
    }
  }
}

