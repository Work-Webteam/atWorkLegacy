<?php


/*
 * Implements hook_init()
 *
 * This is used to authenticate users after they have gone through Siteminder.
 * Uses $_SERVER['HTTP_SM_USER'] which is passed in from Siteminder after authentification.
 * We also check for Drush/RSS etc before we deny access - so they don't get caught
 * up in this.
 *
 * If the user does not check out at all - we completely deny access across the board.
 *
 */
function atwork_authorization_init() {
  // If this is a call from the stite itself, ignore.
  if(isset($_SERVER['HTTP_SM_AUTHTYPE']) && $_SERVER['HTTP_SM_AUTHTYPE'] == 'Auto'){
    return;
  }
  //$_SERVER['HTTP_SM_USER'] = 'twerdal';
  // Check if we have an idir as expected.
  if (isset($_SERVER['HTTP_SM_USER'])) {
    // Get idir from $server - this can come in a few forms depending on Test or Prod.
    // We want this lowercase - as per standard.
    if (strpos($_SERVER['HTTP_SM_USER'], 'IDIR') !== false) {
      $sm_user = str_replace("idir\\", "", strtolower($_SERVER['HTTP_SM_USER']));
    } else {
      $sm_user = strtolower($_SERVER['HTTP_SM_USER']);
    }
  }


  global $user;

  dpm($sm_user);
  dpm($_SERVER);
  if(!empty($sm_user)) {
    dpm($user);
    dpm($_SERVER);
  }

  // If we are already logged in, then we don't need to do this again.
  // Do need to check that our current user matches what we expect.
  if ( user_is_logged_in() && isset( $sm_user )) {
    // Get currently logged in user.
    //global $user;
    // Check for a match.
    if($user->init == $sm_user ) {
      // User is properly signed in. End function.
      dpm('exit');
      return;
    }
    // Support masquerading, don't proceed if a user is currently masquerading.
    if (isset($user->name) && isset($user->sid)) {
      if (module_exists('masquerade') && $sm_user != $user->name) {
        $true_uid = db_select('masquerade', 'm')
          ->condition('sid', $user->sid)
          ->condition('uid_as', $user->uid)
          ->fields('m', array('uid_from'))
          ->execute()
          ->fetchAssoc();
        dpm($true_uid);

        if ($true_uid) {
          // user is masquerading, abort now
          return;
        }
      }
    }
  }

  // If this is drush, eject.
  if(drupal_is_cli()) {
    return;
  }

  // rss.xml bypasses siteminder so can abort now.
  if ($_GET['q'] == 'rss.xml') {
    return;
  }

  // Try to log the user in.
  if(isset($sm_user)) {
    $current_user = user_load_by_name($sm_user);
    if (isset($current_user->uid)) {
      $form_state['uid'] = $current_user->uid;
      // We have everything we need, now lets login.
      user_login_submit(array(), $form_state);
      drupal_session_regenerate();
      // For some reason, the access check occurs before the user
      // is loaded, so we are going to have to redirect them here.
      drupal_goto(current_path());
      return;
    }
  }
  if($user->uid && !isset($sm_user)) {
    dpm($user);
    // We have someone who is logged in - but we were passed a non-existant idir in $_SERVER.
    // Want to make sure past user is logged out.
    module_load_include('pages.inc', 'user');
    user_logout_current_user();
    drupal_goto(current_path());
  }
  // Nobody is logged in, we didn't get a $SERVER name that is recognized.
  // Drupal permissions handle this case.
}


/**
 * Implements hook_module_implements_alter().
 *
 * Want to make sure we authorize very first thing.
 */
function atwork_authorization_module_implements_alter(&$implementations, $hook) {
  // Working with hook_init.
  if ($hook != 'init') {
    return;
  }
  // Move our module hook up to the top of the list.
  $module = 'atwork_authorization';
  $group = array($module => $implementations[$module]);
  unset($implementations[$module]);
  $implementations = $group + $implementations;
}
